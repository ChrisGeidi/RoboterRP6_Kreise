
bin\Debug\RP6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004026  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00004026  000040ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fa  00800174  00800174  000041ce  2**0
                  ALLOC
  3 .debug_aranges 00000200  00000000  00000000  000041ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d32  00000000  00000000  000043ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d9b  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017fa  00000000  00000000  00008e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002e34  00000000  00000000  0000a695  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000640  00000000  00000000  0000d4cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f6f  00000000  00000000  0000db0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009a2  00000000  00000000  0000ea7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000f41d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 01 	jmp	0x212	; 0x212 <__ctors_end>
       4:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__vector_1>
       8:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_2>
       c:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__vector_3>
      10:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_4>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__vector_10>
      2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__vector_13>
      38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      4c:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__vector_19>
      50:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>

00000054 <__c.2098>:
      54:	54 68 65 20 52 6f 62 6f 74 20 6e 65 65 64 73 20     The Robot needs 
      64:	74 6f 20 62 65 20 72 65 73 65 74 74 65 64 20 6e     to be resetted n
      74:	6f 77 2e 0a 0a 00                                   ow....

0000007a <__c.2096>:
      7a:	59 6f 75 20 6e 65 65 64 20 74 6f 20 63 68 65 63     You need to chec
      8a:	6b 20 4d 6f 74 6f 72 20 61 73 73 65 6d 62 6c 79     k Motor assembly
      9a:	20 28 6f 72 20 79 6f 75 72 20 73 6f 66 74 77 61      (or your softwa
      aa:	72 65 29 2e 0a 0a 00                                re)....

000000b1 <__c.2094>:
      b1:	0a 0a 28 73 2e 20 74 61 73 6b 5f 6d 6f 74 6f 72     ..(s. task_motor
      c1:	43 6f 6e 74 72 6f 6c 28 29 20 66 75 6e 63 74 69     Control() functi
      d1:	6f 6e 20 69 6e 20 52 50 36 4c 69 62 21 29 0a 00     on in RP6Lib!)..

000000e1 <__c.2092>:
      e1:	0a 0a 23 23 23 20 4d 4f 54 4f 52 20 4f 56 45 52     ..### MOTOR OVER
      f1:	43 55 52 52 45 4e 54 20 23 23 23 0a 00              CURRENT ###..

000000fe <__c.2090>:
      fe:	59 6f 75 20 6e 65 65 64 20 74 6f 20 63 68 65 63     You need to chec
     10e:	6b 20 45 6e 63 6f 64 65 72 2f 4d 6f 74 6f 72 20     k Encoder/Motor 
     11e:	61 73 73 65 6d 62 6c 79 20 28 6f 72 20 79 6f 75     assembly (or you
     12e:	72 20 73 6f 66 74 77 61 72 65 29 2e 0a 0a 00        r software)....

0000013d <__c.2088>:
     13d:	21 0a 0a 28 73 2e 20 74 61 73 6b 5f 6d 6f 74 6f     !..(s. task_moto
     14d:	72 43 6f 6e 74 72 6f 6c 28 29 20 66 75 6e 63 74     rControl() funct
     15d:	69 6f 6e 20 69 6e 20 52 50 36 4c 69 62 21 29 0a     ion in RP6Lib!).
	...

0000016e <__c.2086>:
     16e:	52 49 47 48 54 00                                   RIGHT.

00000174 <__c.2084>:
     174:	4c 45 46 54 00                                      LEFT.

00000179 <__c.2082>:
     179:	41 66 66 65 63 74 65 64 20 63 68 61 6e 6e 65 6c     Affected channel
     189:	3a 00                                               :.

0000018b <__c.2080>:
     18b:	0a 23 23 23 20 45 4e 43 4f 44 45 52 20 28 4f 52     .### ENCODER (OR
     19b:	20 4d 4f 54 4f 52 29 20 4d 41 4c 46 55 4e 43 54      MOTOR) MALFUNCT
     1ab:	49 4f 4e 21 20 23 23 23 0a 00                       ION! ###..

000001b5 <__c.2078>:
     1b5:	23 23 23 23 23 20 41 4c 4c 20 4f 50 45 52 41 54     ##### ALL OPERAT
     1c5:	49 4f 4e 53 20 53 54 4f 50 50 45 44 20 54 4f 20     IONS STOPPED TO 
     1d5:	50 52 45 56 45 4e 54 20 41 4e 59 20 44 41 4d 41     PREVENT ANY DAMA
     1e5:	47 45 21 20 23 23 23 23 23 0a 00                    GE! #####..

000001f0 <__c.2076>:
     1f0:	0a 0a 23 23 23 23 23 20 45 4d 45 52 47 45 4e 43     ..##### EMERGENC
     200:	59 20 53 48 55 54 44 4f 57 4e 20 23 23 23 23 23     Y SHUTDOWN #####
     210:	0a 00                                               ..

00000212 <__ctors_end>:
     212:	11 24       	eor	r1, r1
     214:	1f be       	out	0x3f, r1	; 63
     216:	cf e5       	ldi	r28, 0x5F	; 95
     218:	d8 e0       	ldi	r29, 0x08	; 8
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	cd bf       	out	0x3d, r28	; 61

0000021e <__do_copy_data>:
     21e:	11 e0       	ldi	r17, 0x01	; 1
     220:	a0 e6       	ldi	r26, 0x60	; 96
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	e6 e2       	ldi	r30, 0x26	; 38
     226:	f0 e4       	ldi	r31, 0x40	; 64
     228:	02 c0       	rjmp	.+4      	; 0x22e <.do_copy_data_start>

0000022a <.do_copy_data_loop>:
     22a:	05 90       	lpm	r0, Z+
     22c:	0d 92       	st	X+, r0

0000022e <.do_copy_data_start>:
     22e:	a4 37       	cpi	r26, 0x74	; 116
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <.do_copy_data_loop>

00000234 <__do_clear_bss>:
     234:	12 e0       	ldi	r17, 0x02	; 2
     236:	a4 e7       	ldi	r26, 0x74	; 116
     238:	b1 e0       	ldi	r27, 0x01	; 1
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ae 36       	cpi	r26, 0x6E	; 110
     240:	b1 07       	cpc	r27, r17
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <main>
     248:	0c 94 11 20 	jmp	0x4022	; 0x4022 <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <Zustand>:
        r3, //Radius3
        r4  //Radius4
    } state;

void Zustand (void)
{
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	00 d0       	rcall	.+0      	; 0x256 <Zustand+0x6>
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
	switch (state)                                  // Hier wird die Entscheidung getroffen welcher Kreis gefahren werden soll
     25a:	80 91 9b 01 	lds	r24, 0x019B
     25e:	90 91 9c 01 	lds	r25, 0x019C
     262:	9a 83       	std	Y+2, r25	; 0x02
     264:	89 83       	std	Y+1, r24	; 0x01
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	9a 81       	ldd	r25, Y+2	; 0x02
     26a:	82 30       	cpi	r24, 0x02	; 2
     26c:	91 05       	cpc	r25, r1
     26e:	a9 f1       	breq	.+106    	; 0x2da <Zustand+0x8a>
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	9a 81       	ldd	r25, Y+2	; 0x02
     274:	83 30       	cpi	r24, 0x03	; 3
     276:	91 05       	cpc	r25, r1
     278:	50 f4       	brcc	.+20     	; 0x28e <Zustand+0x3e>
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	9a 81       	ldd	r25, Y+2	; 0x02
     27e:	00 97       	sbiw	r24, 0x00	; 0
     280:	91 f0       	breq	.+36     	; 0x2a6 <Zustand+0x56>
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	91 05       	cpc	r25, r1
     28a:	81 f0       	breq	.+32     	; 0x2ac <Zustand+0x5c>
     28c:	68 c0       	rjmp	.+208    	; 0x35e <Zustand+0x10e>
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	83 30       	cpi	r24, 0x03	; 3
     294:	91 05       	cpc	r25, r1
     296:	c1 f1       	breq	.+112    	; 0x308 <Zustand+0xb8>
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	9a 81       	ldd	r25, Y+2	; 0x02
     29c:	84 30       	cpi	r24, 0x04	; 4
     29e:	91 05       	cpc	r25, r1
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <Zustand+0x54>
     2a2:	49 c0       	rjmp	.+146    	; 0x336 <Zustand+0xe6>
     2a4:	5c c0       	rjmp	.+184    	; 0x35e <Zustand+0x10e>
	{
		case IDLE:
			stop();
     2a6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <stop>
     2aa:	59 c0       	rjmp	.+178    	; 0x35e <Zustand+0x10e>
		break;

		case r1:
		driveRadius(radius_eins,iSpeed, left);
     2ac:	80 91 a2 01 	lds	r24, 0x01A2
     2b0:	90 91 a3 01 	lds	r25, 0x01A3
     2b4:	20 91 60 00 	lds	r18, 0x0060
     2b8:	30 91 61 00 	lds	r19, 0x0061
     2bc:	b9 01       	movw	r22, r18
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	0e 94 b4 01 	call	0x368	; 0x368 <driveRadius>
		setLEDs(0b000001);                          // LED dient der Statusanzeige zur visuellen Ãœberwachung in welchem Zustand sich das Programm befindet.
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <setLEDs>
		state = r2;
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	90 93 9c 01 	sts	0x019C, r25
     2d4:	80 93 9b 01 	sts	0x019B, r24
     2d8:	42 c0       	rjmp	.+132    	; 0x35e <Zustand+0x10e>
		break;

		case r2:
		driveRadius(radius_zwei,iSpeed, right);
     2da:	80 91 9f 01 	lds	r24, 0x019F
     2de:	90 91 a0 01 	lds	r25, 0x01A0
     2e2:	20 91 60 00 	lds	r18, 0x0060
     2e6:	30 91 61 00 	lds	r19, 0x0061
     2ea:	b9 01       	movw	r22, r18
     2ec:	41 e0       	ldi	r20, 0x01	; 1
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	0e 94 b4 01 	call	0x368	; 0x368 <driveRadius>
		setLEDs(0b000010);                          // LED dient der Statusanzeige zur visuellen Ãœberwachung in welchem Zustand sich das Programm befindet.
     2f4:	82 e0       	ldi	r24, 0x02	; 2
     2f6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <setLEDs>
		state = r3;
     2fa:	83 e0       	ldi	r24, 0x03	; 3
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 9c 01 	sts	0x019C, r25
     302:	80 93 9b 01 	sts	0x019B, r24
     306:	2b c0       	rjmp	.+86     	; 0x35e <Zustand+0x10e>
		break;

		case r3:
		driveRadius(radius_drei,iSpeed, left);
     308:	80 91 9d 01 	lds	r24, 0x019D
     30c:	90 91 9e 01 	lds	r25, 0x019E
     310:	20 91 60 00 	lds	r18, 0x0060
     314:	30 91 61 00 	lds	r19, 0x0061
     318:	b9 01       	movw	r22, r18
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	0e 94 b4 01 	call	0x368	; 0x368 <driveRadius>
		setLEDs(0b000100);                          // LED dient der Statusanzeige zur visuellen Ãœberwachung in welchem Zustand sich das Programm befindet.
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <setLEDs>
		state = r4;
     328:	84 e0       	ldi	r24, 0x04	; 4
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	90 93 9c 01 	sts	0x019C, r25
     330:	80 93 9b 01 	sts	0x019B, r24
     334:	14 c0       	rjmp	.+40     	; 0x35e <Zustand+0x10e>
		break;

		case r4:
		driveRadius(radius_vier,iSpeed, right);
     336:	80 91 99 01 	lds	r24, 0x0199
     33a:	90 91 9a 01 	lds	r25, 0x019A
     33e:	20 91 60 00 	lds	r18, 0x0060
     342:	30 91 61 00 	lds	r19, 0x0061
     346:	b9 01       	movw	r22, r18
     348:	41 e0       	ldi	r20, 0x01	; 1
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	0e 94 b4 01 	call	0x368	; 0x368 <driveRadius>
		setLEDs(0b001010);                          // LED dient der Statusanzeige zur visuellen Ãœberwachung in welchem Zustand sich das Programm befindet.
     350:	8a e0       	ldi	r24, 0x0A	; 10
     352:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <setLEDs>
		state =IDLE;
     356:	10 92 9c 01 	sts	0x019C, r1
     35a:	10 92 9b 01 	sts	0x019B, r1
		break;
	}
}
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	cf 91       	pop	r28
     364:	df 91       	pop	r29
     366:	08 95       	ret

00000368 <driveRadius>:

void driveRadius (unsigned int Radius, int speed, int direction)
{
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	df 93       	push	r29
     36e:	cf 93       	push	r28
     370:	00 d0       	rcall	.+0      	; 0x372 <driveRadius+0xa>
     372:	00 d0       	rcall	.+0      	; 0x374 <driveRadius+0xc>
     374:	00 d0       	rcall	.+0      	; 0x376 <driveRadius+0xe>
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	7c 83       	std	Y+4, r23	; 0x04
     380:	6b 83       	std	Y+3, r22	; 0x03
     382:	5e 83       	std	Y+6, r21	; 0x06
     384:	4d 83       	std	Y+5, r20	; 0x05
        if (getLeftDistance()== Radius) calculateSpeed(Radius, speed, direction);
     386:	20 91 ff 01 	lds	r18, 0x01FF
     38a:	30 91 00 02 	lds	r19, 0x0200
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	28 17       	cp	r18, r24
     394:	39 07       	cpc	r19, r25
     396:	49 f4       	brne	.+18     	; 0x3aa <driveRadius+0x42>
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	2b 81       	ldd	r18, Y+3	; 0x03
     39e:	3c 81       	ldd	r19, Y+4	; 0x04
     3a0:	4d 81       	ldd	r20, Y+5	; 0x05
     3a2:	5e 81       	ldd	r21, Y+6	; 0x06
     3a4:	b9 01       	movw	r22, r18
     3a6:	0e 94 1c 02 	call	0x438	; 0x438 <calculateSpeed>
        if (getLeftDistance()== (Radius+calculateDistanceForLeftTrack_Arc(Radius  , direction))) calculateSpeed(Radius, speed, straight);
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	2d 81       	ldd	r18, Y+5	; 0x05
     3b0:	3e 81       	ldd	r19, Y+6	; 0x06
     3b2:	b9 01       	movw	r22, r18
     3b4:	0e 94 14 03 	call	0x628	; 0x628 <calculateDistanceForLeftTrack_Arc>
     3b8:	9c 01       	movw	r18, r24
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	9a 81       	ldd	r25, Y+2	; 0x02
     3be:	28 0f       	add	r18, r24
     3c0:	39 1f       	adc	r19, r25
     3c2:	80 91 ff 01 	lds	r24, 0x01FF
     3c6:	90 91 00 02 	lds	r25, 0x0200
     3ca:	28 17       	cp	r18, r24
     3cc:	39 07       	cpc	r19, r25
     3ce:	49 f4       	brne	.+18     	; 0x3e2 <driveRadius+0x7a>
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	2b 81       	ldd	r18, Y+3	; 0x03
     3d6:	3c 81       	ldd	r19, Y+4	; 0x04
     3d8:	b9 01       	movw	r22, r18
     3da:	42 e0       	ldi	r20, 0x02	; 2
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	0e 94 1c 02 	call	0x438	; 0x438 <calculateSpeed>
        if (getLeftDistance()> (2*Radius+calculateDistanceForLeftTrack_Arc(Radius, direction)))
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	9a 81       	ldd	r25, Y+2	; 0x02
     3e6:	8c 01       	movw	r16, r24
     3e8:	00 0f       	add	r16, r16
     3ea:	11 1f       	adc	r17, r17
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	2d 81       	ldd	r18, Y+5	; 0x05
     3f2:	3e 81       	ldd	r19, Y+6	; 0x06
     3f4:	b9 01       	movw	r22, r18
     3f6:	0e 94 14 03 	call	0x628	; 0x628 <calculateDistanceForLeftTrack_Arc>
     3fa:	98 01       	movw	r18, r16
     3fc:	28 0f       	add	r18, r24
     3fe:	39 1f       	adc	r19, r25
     400:	80 91 ff 01 	lds	r24, 0x01FF
     404:	90 91 00 02 	lds	r25, 0x0200
     408:	28 17       	cp	r18, r24
     40a:	39 07       	cpc	r19, r25
     40c:	50 f4       	brcc	.+20     	; 0x422 <driveRadius+0xba>
        {
            stop();
     40e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <stop>
            iLeftSpeed=0;
     412:	10 92 98 01 	sts	0x0198, r1
     416:	10 92 97 01 	sts	0x0197, r1
            iRightSpeed=0;
     41a:	10 92 93 01 	sts	0x0193, r1
     41e:	10 92 92 01 	sts	0x0192, r1
        }
};
     422:	26 96       	adiw	r28, 0x06	; 6
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	cf 91       	pop	r28
     430:	df 91       	pop	r29
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	08 95       	ret

00000438 <calculateSpeed>:

void calculateSpeed(unsigned int iRadius, int iSpeed, int direction) // Die Radiusfahrt wird Ã¼ber die Differenz der Kettengeschwindigkeiten erzielt
{
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	df 93       	push	r29
     442:	cf 93       	push	r28
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	28 97       	sbiw	r28, 0x08	; 8
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	9a 83       	std	Y+2, r25	; 0x02
     456:	89 83       	std	Y+1, r24	; 0x01
     458:	7c 83       	std	Y+4, r23	; 0x04
     45a:	6b 83       	std	Y+3, r22	; 0x03
     45c:	5e 83       	std	Y+6, r21	; 0x06
     45e:	4d 83       	std	Y+5, r20	; 0x05
    switch(direction)       //je nach Fahrtrichtung fÃ¼r den Radius wird entschieden welche Kette wie schnell angetrieben werden muss
     460:	8d 81       	ldd	r24, Y+5	; 0x05
     462:	9e 81       	ldd	r25, Y+6	; 0x06
     464:	98 87       	std	Y+8, r25	; 0x08
     466:	8f 83       	std	Y+7, r24	; 0x07
     468:	8f 81       	ldd	r24, Y+7	; 0x07
     46a:	98 85       	ldd	r25, Y+8	; 0x08
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	91 05       	cpc	r25, r1
     470:	09 f4       	brne	.+2      	; 0x474 <calculateSpeed+0x3c>
     472:	66 c0       	rjmp	.+204    	; 0x540 <calculateSpeed+0x108>
     474:	8f 81       	ldd	r24, Y+7	; 0x07
     476:	98 85       	ldd	r25, Y+8	; 0x08
     478:	82 30       	cpi	r24, 0x02	; 2
     47a:	91 05       	cpc	r25, r1
     47c:	09 f4       	brne	.+2      	; 0x480 <calculateSpeed+0x48>
     47e:	bb c0       	rjmp	.+374    	; 0x5f6 <calculateSpeed+0x1be>
     480:	8f 81       	ldd	r24, Y+7	; 0x07
     482:	98 85       	ldd	r25, Y+8	; 0x08
     484:	00 97       	sbiw	r24, 0x00	; 0
     486:	09 f0       	breq	.+2      	; 0x48a <calculateSpeed+0x52>
     488:	c2 c0       	rjmp	.+388    	; 0x60e <calculateSpeed+0x1d6>
    {
    case left:
        iRightSpeed = iSpeed;
     48a:	8b 81       	ldd	r24, Y+3	; 0x03
     48c:	9c 81       	ldd	r25, Y+4	; 0x04
     48e:	90 93 93 01 	sts	0x0193, r25
     492:	80 93 92 01 	sts	0x0192, r24
        iLeftSpeed  = iRightSpeed / (iRadius + HALBER_ACHSABSTAND) * (iRadius - HALBER_ACHSABSTAND);
     496:	80 91 92 01 	lds	r24, 0x0192
     49a:	90 91 93 01 	lds	r25, 0x0193
     49e:	aa 27       	eor	r26, r26
     4a0:	97 fd       	sbrc	r25, 7
     4a2:	a0 95       	com	r26
     4a4:	ba 2f       	mov	r27, r26
     4a6:	bc 01       	movw	r22, r24
     4a8:	cd 01       	movw	r24, r26
     4aa:	0e 94 26 1c 	call	0x384c	; 0x384c <__floatsisf>
     4ae:	7b 01       	movw	r14, r22
     4b0:	8c 01       	movw	r16, r24
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	cc 01       	movw	r24, r24
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	bc 01       	movw	r22, r24
     4be:	cd 01       	movw	r24, r26
     4c0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatunsisf>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	bc 01       	movw	r22, r24
     4ca:	cd 01       	movw	r24, r26
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	4e e4       	ldi	r20, 0x4E	; 78
     4d2:	52 e4       	ldi	r21, 0x42	; 66
     4d4:	0e 94 23 1a 	call	0x3446	; 0x3446 <__addsf3>
     4d8:	dc 01       	movw	r26, r24
     4da:	cb 01       	movw	r24, r22
     4dc:	9c 01       	movw	r18, r24
     4de:	ad 01       	movw	r20, r26
     4e0:	c8 01       	movw	r24, r16
     4e2:	b7 01       	movw	r22, r14
     4e4:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__divsf3>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	7c 01       	movw	r14, r24
     4ee:	8d 01       	movw	r16, r26
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	9a 81       	ldd	r25, Y+2	; 0x02
     4f4:	cc 01       	movw	r24, r24
     4f6:	a0 e0       	ldi	r26, 0x00	; 0
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	bc 01       	movw	r22, r24
     4fc:	cd 01       	movw	r24, r26
     4fe:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatunsisf>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	4e e4       	ldi	r20, 0x4E	; 78
     510:	52 e4       	ldi	r21, 0x42	; 66
     512:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	9c 01       	movw	r18, r24
     51c:	ad 01       	movw	r20, r26
     51e:	c8 01       	movw	r24, r16
     520:	b7 01       	movw	r22, r14
     522:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
     526:	dc 01       	movw	r26, r24
     528:	cb 01       	movw	r24, r22
     52a:	bc 01       	movw	r22, r24
     52c:	cd 01       	movw	r24, r26
     52e:	0e 94 84 1c 	call	0x3908	; 0x3908 <__fixsfsi>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	90 93 98 01 	sts	0x0198, r25
     53a:	80 93 97 01 	sts	0x0197, r24
     53e:	67 c0       	rjmp	.+206    	; 0x60e <calculateSpeed+0x1d6>
        break;

    case right:
        iLeftSpeed  = iSpeed;
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	90 93 98 01 	sts	0x0198, r25
     548:	80 93 97 01 	sts	0x0197, r24
        iRightSpeed = iLeftSpeed / (iRadius + HALBER_ACHSABSTAND) * (iRadius - HALBER_ACHSABSTAND);
     54c:	80 91 97 01 	lds	r24, 0x0197
     550:	90 91 98 01 	lds	r25, 0x0198
     554:	aa 27       	eor	r26, r26
     556:	97 fd       	sbrc	r25, 7
     558:	a0 95       	com	r26
     55a:	ba 2f       	mov	r27, r26
     55c:	bc 01       	movw	r22, r24
     55e:	cd 01       	movw	r24, r26
     560:	0e 94 26 1c 	call	0x384c	; 0x384c <__floatsisf>
     564:	7b 01       	movw	r14, r22
     566:	8c 01       	movw	r16, r24
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	9a 81       	ldd	r25, Y+2	; 0x02
     56c:	cc 01       	movw	r24, r24
     56e:	a0 e0       	ldi	r26, 0x00	; 0
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	bc 01       	movw	r22, r24
     574:	cd 01       	movw	r24, r26
     576:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatunsisf>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	bc 01       	movw	r22, r24
     580:	cd 01       	movw	r24, r26
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	4e e4       	ldi	r20, 0x4E	; 78
     588:	52 e4       	ldi	r21, 0x42	; 66
     58a:	0e 94 23 1a 	call	0x3446	; 0x3446 <__addsf3>
     58e:	dc 01       	movw	r26, r24
     590:	cb 01       	movw	r24, r22
     592:	9c 01       	movw	r18, r24
     594:	ad 01       	movw	r20, r26
     596:	c8 01       	movw	r24, r16
     598:	b7 01       	movw	r22, r14
     59a:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__divsf3>
     59e:	dc 01       	movw	r26, r24
     5a0:	cb 01       	movw	r24, r22
     5a2:	7c 01       	movw	r14, r24
     5a4:	8d 01       	movw	r16, r26
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	9a 81       	ldd	r25, Y+2	; 0x02
     5aa:	cc 01       	movw	r24, r24
     5ac:	a0 e0       	ldi	r26, 0x00	; 0
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	bc 01       	movw	r22, r24
     5b2:	cd 01       	movw	r24, r26
     5b4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatunsisf>
     5b8:	dc 01       	movw	r26, r24
     5ba:	cb 01       	movw	r24, r22
     5bc:	bc 01       	movw	r22, r24
     5be:	cd 01       	movw	r24, r26
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	4e e4       	ldi	r20, 0x4E	; 78
     5c6:	52 e4       	ldi	r21, 0x42	; 66
     5c8:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	9c 01       	movw	r18, r24
     5d2:	ad 01       	movw	r20, r26
     5d4:	c8 01       	movw	r24, r16
     5d6:	b7 01       	movw	r22, r14
     5d8:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
     5dc:	dc 01       	movw	r26, r24
     5de:	cb 01       	movw	r24, r22
     5e0:	bc 01       	movw	r22, r24
     5e2:	cd 01       	movw	r24, r26
     5e4:	0e 94 84 1c 	call	0x3908	; 0x3908 <__fixsfsi>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	90 93 93 01 	sts	0x0193, r25
     5f0:	80 93 92 01 	sts	0x0192, r24
     5f4:	0c c0       	rjmp	.+24     	; 0x60e <calculateSpeed+0x1d6>
        break;

    case straight:
        iLeftSpeed  = iSpeed;
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	9c 81       	ldd	r25, Y+4	; 0x04
     5fa:	90 93 98 01 	sts	0x0198, r25
     5fe:	80 93 97 01 	sts	0x0197, r24
        iRightSpeed = iSpeed;
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	9c 81       	ldd	r25, Y+4	; 0x04
     606:	90 93 93 01 	sts	0x0193, r25
     60a:	80 93 92 01 	sts	0x0192, r24
        break;
    }
}
     60e:	28 96       	adiw	r28, 0x08	; 8
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	cf 91       	pop	r28
     61c:	df 91       	pop	r29
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	08 95       	ret

00000628 <calculateDistanceForLeftTrack_Arc>:

uint16_t calculateDistanceForLeftTrack_Arc(unsigned int iRadius, int direction) //Als Referenzwert fÃ¼r die gefahrene Distanz wird die Distanz der linken Kette ermittelt
{
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	28 97       	sbiw	r28, 0x08	; 8
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	9c 83       	std	Y+4, r25	; 0x04
     63e:	8b 83       	std	Y+3, r24	; 0x03
     640:	7e 83       	std	Y+6, r23	; 0x06
     642:	6d 83       	std	Y+5, r22	; 0x05
    uint16_t distance = 0;
     644:	1a 82       	std	Y+2, r1	; 0x02
     646:	19 82       	std	Y+1, r1	; 0x01

    switch(direction)               //Hier wird ebenfalls unterschieden ob es sich um eine linke oder rechte Kreisfahrt handelt
     648:	8d 81       	ldd	r24, Y+5	; 0x05
     64a:	9e 81       	ldd	r25, Y+6	; 0x06
     64c:	98 87       	std	Y+8, r25	; 0x08
     64e:	8f 83       	std	Y+7, r24	; 0x07
     650:	8f 81       	ldd	r24, Y+7	; 0x07
     652:	98 85       	ldd	r25, Y+8	; 0x08
     654:	00 97       	sbiw	r24, 0x00	; 0
     656:	31 f0       	breq	.+12     	; 0x664 <calculateDistanceForLeftTrack_Arc+0x3c>
     658:	8f 81       	ldd	r24, Y+7	; 0x07
     65a:	98 85       	ldd	r25, Y+8	; 0x08
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	91 05       	cpc	r25, r1
     660:	e9 f1       	breq	.+122    	; 0x6dc <calculateDistanceForLeftTrack_Arc+0xb4>
     662:	77 c0       	rjmp	.+238    	; 0x752 <calculateDistanceForLeftTrack_Arc+0x12a>
    {
    case left:
        distance = 2 * PI * (iRadius - HALBER_ACHSABSTAND)*3/4;
     664:	8b 81       	ldd	r24, Y+3	; 0x03
     666:	9c 81       	ldd	r25, Y+4	; 0x04
     668:	cc 01       	movw	r24, r24
     66a:	a0 e0       	ldi	r26, 0x00	; 0
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatunsisf>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	bc 01       	movw	r22, r24
     67c:	cd 01       	movw	r24, r26
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	4e e4       	ldi	r20, 0x4E	; 78
     684:	52 e4       	ldi	r21, 0x42	; 66
     686:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	bc 01       	movw	r22, r24
     690:	cd 01       	movw	r24, r26
     692:	27 e8       	ldi	r18, 0x87	; 135
     694:	36 e1       	ldi	r19, 0x16	; 22
     696:	49 ec       	ldi	r20, 0xC9	; 201
     698:	50 e4       	ldi	r21, 0x40	; 64
     69a:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
     69e:	dc 01       	movw	r26, r24
     6a0:	cb 01       	movw	r24, r22
     6a2:	bc 01       	movw	r22, r24
     6a4:	cd 01       	movw	r24, r26
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e4       	ldi	r20, 0x40	; 64
     6ac:	50 e4       	ldi	r21, 0x40	; 64
     6ae:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	cd 01       	movw	r24, r26
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	50 e4       	ldi	r21, 0x40	; 64
     6c2:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__divsf3>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__fixunssfsi>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	9a 83       	std	Y+2, r25	; 0x02
     6d8:	89 83       	std	Y+1, r24	; 0x01
     6da:	3b c0       	rjmp	.+118    	; 0x752 <calculateDistanceForLeftTrack_Arc+0x12a>
        break;

    case right:
        distance = 2 * PI * (iRadius + HALBER_ACHSABSTAND)*3/4;
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	cc 01       	movw	r24, r24
     6e2:	a0 e0       	ldi	r26, 0x00	; 0
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	bc 01       	movw	r22, r24
     6e8:	cd 01       	movw	r24, r26
     6ea:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatunsisf>
     6ee:	dc 01       	movw	r26, r24
     6f0:	cb 01       	movw	r24, r22
     6f2:	bc 01       	movw	r22, r24
     6f4:	cd 01       	movw	r24, r26
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	4e e4       	ldi	r20, 0x4E	; 78
     6fc:	52 e4       	ldi	r21, 0x42	; 66
     6fe:	0e 94 23 1a 	call	0x3446	; 0x3446 <__addsf3>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	bc 01       	movw	r22, r24
     708:	cd 01       	movw	r24, r26
     70a:	27 e8       	ldi	r18, 0x87	; 135
     70c:	36 e1       	ldi	r19, 0x16	; 22
     70e:	49 ec       	ldi	r20, 0xC9	; 201
     710:	50 e4       	ldi	r21, 0x40	; 64
     712:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	bc 01       	movw	r22, r24
     71c:	cd 01       	movw	r24, r26
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e4       	ldi	r20, 0x40	; 64
     724:	50 e4       	ldi	r21, 0x40	; 64
     726:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <__mulsf3>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	bc 01       	movw	r22, r24
     730:	cd 01       	movw	r24, r26
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e8       	ldi	r20, 0x80	; 128
     738:	50 e4       	ldi	r21, 0x40	; 64
     73a:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__divsf3>
     73e:	dc 01       	movw	r26, r24
     740:	cb 01       	movw	r24, r22
     742:	bc 01       	movw	r22, r24
     744:	cd 01       	movw	r24, r26
     746:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__fixunssfsi>
     74a:	dc 01       	movw	r26, r24
     74c:	cb 01       	movw	r24, r22
     74e:	9a 83       	std	Y+2, r25	; 0x02
     750:	89 83       	std	Y+1, r24	; 0x01
        break;
    }

    return distance;
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	9a 81       	ldd	r25, Y+2	; 0x02
}
     756:	28 96       	adiw	r28, 0x08	; 8
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	08 95       	ret

00000768 <moveCircle>:

void moveCircle(uint8_t iLeftSpeed, uint8_t iRightSpeed) //Ãœbergabe der Geschwindigkeiten der Ketten an die Motorsteuerung
{
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	00 d0       	rcall	.+0      	; 0x76e <moveCircle+0x6>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	6a 83       	std	Y+2, r22	; 0x02
	if(iLeftSpeed > 200) iLeftSpeed = 200;
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	89 3c       	cpi	r24, 0xC9	; 201
     77a:	10 f0       	brcs	.+4      	; 0x780 <moveCircle+0x18>
     77c:	88 ec       	ldi	r24, 0xC8	; 200
     77e:	89 83       	std	Y+1, r24	; 0x01
	if(iRightSpeed > 200) iRightSpeed = 200;
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	89 3c       	cpi	r24, 0xC9	; 201
     784:	10 f0       	brcs	.+4      	; 0x78a <moveCircle+0x22>
     786:	88 ec       	ldi	r24, 0xC8	; 200
     788:	8a 83       	std	Y+2, r24	; 0x02
	mleft_des_speed = iLeftSpeed;
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	88 2f       	mov	r24, r24
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	90 93 aa 01 	sts	0x01AA, r25
     794:	80 93 a9 01 	sts	0x01A9, r24
	mright_des_speed = iRightSpeed;
     798:	8a 81       	ldd	r24, Y+2	; 0x02
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	90 93 a8 01 	sts	0x01A8, r25
     7a2:	80 93 a7 01 	sts	0x01A7, r24
}
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	08 95       	ret

000007b0 <main>:

int main(void)
{
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62


    iSpeed = 80;
     7b8:	80 e5       	ldi	r24, 0x50	; 80
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	90 93 61 00 	sts	0x0061, r25
     7c0:	80 93 60 00 	sts	0x0060, r24
    radius_eins = 400;
     7c4:	80 e9       	ldi	r24, 0x90	; 144
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	90 93 a3 01 	sts	0x01A3, r25
     7cc:	80 93 a2 01 	sts	0x01A2, r24
    radius_zwei = 500;
     7d0:	84 ef       	ldi	r24, 0xF4	; 244
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	90 93 a0 01 	sts	0x01A0, r25
     7d8:	80 93 9f 01 	sts	0x019F, r24
    radius_drei = 600;
     7dc:	88 e5       	ldi	r24, 0x58	; 88
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	90 93 9e 01 	sts	0x019E, r25
     7e4:	80 93 9d 01 	sts	0x019D, r24
    radius_vier = 700;
     7e8:	8c eb       	ldi	r24, 0xBC	; 188
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	90 93 9a 01 	sts	0x019A, r25
     7f0:	80 93 99 01 	sts	0x0199, r24
    mleft_dist = 0;
     7f4:	10 92 00 02 	sts	0x0200, r1
     7f8:	10 92 ff 01 	sts	0x01FF, r1
    mright_dist = 0;
     7fc:	10 92 f2 01 	sts	0x01F2, r1
     800:	10 92 f1 01 	sts	0x01F1, r1
    iLeftSpeed = 80;
     804:	80 e5       	ldi	r24, 0x50	; 80
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	90 93 98 01 	sts	0x0198, r25
     80c:	80 93 97 01 	sts	0x0197, r24
    iRightSpeed = 80;
     810:	80 e5       	ldi	r24, 0x50	; 80
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	90 93 93 01 	sts	0x0193, r25
     818:	80 93 92 01 	sts	0x0192, r24
    initRobotBase();
     81c:	0e 94 01 15 	call	0x2a02	; 0x2a02 <initRobotBase>
    mSleep(1500);
     820:	8c ed       	ldi	r24, 0xDC	; 220
     822:	95 e0       	ldi	r25, 0x05	; 5
     824:	0e 94 88 14 	call	0x2910	; 0x2910 <mSleep>

    powerON(); // Encoder und Motorstromsensoren anschalten!
     828:	0e 94 87 11 	call	0x230e	; 0x230e <powerON>

	//inital value
	state = r1;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	90 93 9c 01 	sts	0x019C, r25
     834:	80 93 9b 01 	sts	0x019B, r24


    while(true)
    {
        Zustand();
     838:	0e 94 28 01 	call	0x250	; 0x250 <Zustand>
        task_motionControl();
     83c:	0e 94 6e 07 	call	0xedc	; 0xedc <task_motionControl>
		task_RP6System();
     840:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <task_RP6System>
     844:	f9 cf       	rjmp	.-14     	; 0x838 <main+0x88>

00000846 <enablePowerOnWarning>:
	 * no active LEDs. This is to ensure that you don't forget
	 * to turn of the Robot if your program does not use
	 * any LEDs for a long time! 
	 */
	void enablePowerOnWarning(void) 
	{ 
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
		if(leds_on > 3)
     84e:	80 91 b8 01 	lds	r24, 0x01B8
     852:	84 30       	cpi	r24, 0x04	; 4
     854:	10 f0       	brcs	.+4      	; 0x85a <enablePowerOnWarning+0x14>
			leds_on = 0; 
     856:	10 92 b8 01 	sts	0x01B8, r1
	}
     85a:	cf 91       	pop	r28
     85c:	df 91       	pop	r29
     85e:	08 95       	ret

00000860 <disablePowerOnWarning>:
	/**
	 * This disables the power on warning. 
	 * also see RP6Config.h for #define POWER_ON_WARNING
	 */
	void disablePowerOnWarning(void) 
	{ 
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
		leds_on = 4; 
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	80 93 b8 01 	sts	0x01B8, r24
	}
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	08 95       	ret

00000874 <updateStatusLEDs>:
 *			statusLEDs.LED2=true;
 *			updateStatusLEDs();
 *			// This sets LED2 and does not affect any other LED!
 */
void updateStatusLEDs(void)
{
     874:	df 93       	push	r29
     876:	cf 93       	push	r28
     878:	00 d0       	rcall	.+0      	; 0x87a <updateStatusLEDs+0x6>
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
	DDRB &= ~0x83;
     87e:	a7 e3       	ldi	r26, 0x37	; 55
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	e7 e3       	ldi	r30, 0x37	; 55
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	8c 77       	andi	r24, 0x7C	; 124
     88a:	8c 93       	st	X, r24
	PORTB &= ~0x83;
     88c:	a8 e3       	ldi	r26, 0x38	; 56
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	e8 e3       	ldi	r30, 0x38	; 56
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	8c 77       	andi	r24, 0x7C	; 124
     898:	8c 93       	st	X, r24
	if(statusLEDs.LED4){ DDRB |= SL4; PORTB |= SL4; }
     89a:	80 91 a1 01 	lds	r24, 0x01A1
     89e:	88 70       	andi	r24, 0x08	; 8
     8a0:	88 23       	and	r24, r24
     8a2:	71 f0       	breq	.+28     	; 0x8c0 <updateStatusLEDs+0x4c>
     8a4:	a7 e3       	ldi	r26, 0x37	; 55
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e7 e3       	ldi	r30, 0x37	; 55
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	80 68       	ori	r24, 0x80	; 128
     8b0:	8c 93       	st	X, r24
     8b2:	a8 e3       	ldi	r26, 0x38	; 56
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	e8 e3       	ldi	r30, 0x38	; 56
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	80 68       	ori	r24, 0x80	; 128
     8be:	8c 93       	st	X, r24
	if(statusLEDs.LED5){ DDRB |= SL5; PORTB |= SL5; }
     8c0:	80 91 a1 01 	lds	r24, 0x01A1
     8c4:	80 71       	andi	r24, 0x10	; 16
     8c6:	88 23       	and	r24, r24
     8c8:	71 f0       	breq	.+28     	; 0x8e6 <updateStatusLEDs+0x72>
     8ca:	a7 e3       	ldi	r26, 0x37	; 55
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	e7 e3       	ldi	r30, 0x37	; 55
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	82 60       	ori	r24, 0x02	; 2
     8d6:	8c 93       	st	X, r24
     8d8:	a8 e3       	ldi	r26, 0x38	; 56
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	e8 e3       	ldi	r30, 0x38	; 56
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 81       	ld	r24, Z
     8e2:	82 60       	ori	r24, 0x02	; 2
     8e4:	8c 93       	st	X, r24
	if(statusLEDs.LED6){ DDRB |= SL6; PORTB |= SL6; }
     8e6:	80 91 a1 01 	lds	r24, 0x01A1
     8ea:	80 72       	andi	r24, 0x20	; 32
     8ec:	88 23       	and	r24, r24
     8ee:	71 f0       	breq	.+28     	; 0x90c <updateStatusLEDs+0x98>
     8f0:	a7 e3       	ldi	r26, 0x37	; 55
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	e7 e3       	ldi	r30, 0x37	; 55
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	81 60       	ori	r24, 0x01	; 1
     8fc:	8c 93       	st	X, r24
     8fe:	a8 e3       	ldi	r26, 0x38	; 56
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	e8 e3       	ldi	r30, 0x38	; 56
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	81 60       	ori	r24, 0x01	; 1
     90a:	8c 93       	st	X, r24
	DDRC &= ~0x70;
     90c:	a4 e3       	ldi	r26, 0x34	; 52
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	e4 e3       	ldi	r30, 0x34	; 52
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	8f 78       	andi	r24, 0x8F	; 143
     918:	8c 93       	st	X, r24
	PORTC &= ~0x70;
     91a:	a5 e3       	ldi	r26, 0x35	; 53
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	e5 e3       	ldi	r30, 0x35	; 53
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	8f 78       	andi	r24, 0x8F	; 143
     926:	8c 93       	st	X, r24
	DDRC |= ((statusLEDs.byte << 4) & 0x70);
     928:	a4 e3       	ldi	r26, 0x34	; 52
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	e4 e3       	ldi	r30, 0x34	; 52
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	28 2f       	mov	r18, r24
     934:	80 91 a1 01 	lds	r24, 0x01A1
     938:	88 2f       	mov	r24, r24
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	82 95       	swap	r24
     93e:	92 95       	swap	r25
     940:	90 7f       	andi	r25, 0xF0	; 240
     942:	98 27       	eor	r25, r24
     944:	80 7f       	andi	r24, 0xF0	; 240
     946:	98 27       	eor	r25, r24
     948:	80 77       	andi	r24, 0x70	; 112
     94a:	82 2b       	or	r24, r18
     94c:	8c 93       	st	X, r24
	PORTC |= ((statusLEDs.byte << 4) & 0x70);
     94e:	a5 e3       	ldi	r26, 0x35	; 53
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	e5 e3       	ldi	r30, 0x35	; 53
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	28 2f       	mov	r18, r24
     95a:	80 91 a1 01 	lds	r24, 0x01A1
     95e:	88 2f       	mov	r24, r24
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	82 95       	swap	r24
     964:	92 95       	swap	r25
     966:	90 7f       	andi	r25, 0xF0	; 240
     968:	98 27       	eor	r25, r24
     96a:	80 7f       	andi	r24, 0xF0	; 240
     96c:	98 27       	eor	r25, r24
     96e:	80 77       	andi	r24, 0x70	; 112
     970:	82 2b       	or	r24, r18
     972:	8c 93       	st	X, r24
	#ifdef POWER_ON_WARNING
		leds_on = (leds_on ? leds_on : (statusLEDs.byte && 1));
     974:	80 91 b8 01 	lds	r24, 0x01B8
     978:	88 23       	and	r24, r24
     97a:	59 f4       	brne	.+22     	; 0x992 <updateStatusLEDs+0x11e>
     97c:	80 91 a1 01 	lds	r24, 0x01A1
     980:	8a 83       	std	Y+2, r24	; 0x02
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	88 23       	and	r24, r24
     986:	11 f0       	breq	.+4      	; 0x98c <updateStatusLEDs+0x118>
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	8a 83       	std	Y+2, r24	; 0x02
     98c:	8a 81       	ldd	r24, Y+2	; 0x02
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	03 c0       	rjmp	.+6      	; 0x998 <updateStatusLEDs+0x124>
     992:	80 91 b8 01 	lds	r24, 0x01B8
     996:	89 83       	std	Y+1, r24	; 0x01
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	80 93 b8 01 	sts	0x01B8, r24
	#endif
}
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	cf 91       	pop	r28
     9a4:	df 91       	pop	r29
     9a6:	08 95       	ret

000009a8 <setLEDs>:
 *			setLEDs(0b101001);
 *			// this clears all LEDs and sets the LEDs STATUS1,
 *			// STATUS6 and STATUS4!
 */
void setLEDs(uint8_t leds)
{
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	0f 92       	push	r0
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	89 83       	std	Y+1, r24	; 0x01
	statusLEDs.byte = leds;
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	80 93 a1 01 	sts	0x01A1, r24
	updateStatusLEDs();
     9ba:	0e 94 3a 04 	call	0x874	; 0x874 <updateStatusLEDs>
}
     9be:	0f 90       	pop	r0
     9c0:	cf 91       	pop	r28
     9c2:	df 91       	pop	r29
     9c4:	08 95       	ret

000009c6 <getBumperLeft>:
 *
 *		if(getBumperLeft())
 *			// do something
 */
uint8_t getBumperLeft(void)
{ 
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	0f 92       	push	r0
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~SL6;
     9d0:	a8 e3       	ldi	r26, 0x38	; 56
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	e8 e3       	ldi	r30, 0x38	; 56
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	80 81       	ld	r24, Z
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	8c 93       	st	X, r24
	DDRB &= ~SL6; 
     9de:	a7 e3       	ldi	r26, 0x37	; 55
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e7 e3       	ldi	r30, 0x37	; 55
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	8e 7f       	andi	r24, 0xFE	; 254
     9ea:	8c 93       	st	X, r24
	nop();
     9ec:	00 00       	nop
	uint8_t tmp = PINB & SL6;
     9ee:	e6 e3       	ldi	r30, 0x36	; 54
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	81 70       	andi	r24, 0x01	; 1
     9f6:	89 83       	std	Y+1, r24	; 0x01
	if(statusLEDs.LED6) { 
     9f8:	80 91 a1 01 	lds	r24, 0x01A1
     9fc:	80 72       	andi	r24, 0x20	; 32
     9fe:	88 23       	and	r24, r24
     a00:	71 f0       	breq	.+28     	; 0xa1e <getBumperLeft+0x58>
		DDRB |= SL6; 
     a02:	a7 e3       	ldi	r26, 0x37	; 55
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e7 e3       	ldi	r30, 0x37	; 55
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	81 60       	ori	r24, 0x01	; 1
     a0e:	8c 93       	st	X, r24
		PORTB |= SL6; 
     a10:	a8 e3       	ldi	r26, 0x38	; 56
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e3       	ldi	r30, 0x38	; 56
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	81 60       	ori	r24, 0x01	; 1
     a1c:	8c 93       	st	X, r24
	}
	return tmp;
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     a20:	0f 90       	pop	r0
     a22:	cf 91       	pop	r28
     a24:	df 91       	pop	r29
     a26:	08 95       	ret

00000a28 <getBumperRight>:
 *
 *		if(getBumperRight())
 *			// do something
 */
uint8_t getBumperRight(void)
{
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	0f 92       	push	r0
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~SL3;
     a32:	a5 e3       	ldi	r26, 0x35	; 53
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	e5 e3       	ldi	r30, 0x35	; 53
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	8f 7b       	andi	r24, 0xBF	; 191
     a3e:	8c 93       	st	X, r24
	DDRC &= ~SL3; 
     a40:	a4 e3       	ldi	r26, 0x34	; 52
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	e4 e3       	ldi	r30, 0x34	; 52
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	8f 7b       	andi	r24, 0xBF	; 191
     a4c:	8c 93       	st	X, r24
	nop();
     a4e:	00 00       	nop
	uint8_t tmp = PINC & SL3;
     a50:	e3 e3       	ldi	r30, 0x33	; 51
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	80 74       	andi	r24, 0x40	; 64
     a58:	89 83       	std	Y+1, r24	; 0x01
	if(statusLEDs.LED3) { 
     a5a:	80 91 a1 01 	lds	r24, 0x01A1
     a5e:	84 70       	andi	r24, 0x04	; 4
     a60:	88 23       	and	r24, r24
     a62:	71 f0       	breq	.+28     	; 0xa80 <getBumperRight+0x58>
		DDRC |= SL3; 
     a64:	a4 e3       	ldi	r26, 0x34	; 52
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e4 e3       	ldi	r30, 0x34	; 52
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	80 64       	ori	r24, 0x40	; 64
     a70:	8c 93       	st	X, r24
		PORTC |= SL3; 
     a72:	a5 e3       	ldi	r26, 0x35	; 53
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	e5 e3       	ldi	r30, 0x35	; 53
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	80 64       	ori	r24, 0x40	; 64
     a7e:	8c 93       	st	X, r24
	}
	return tmp;
     a80:	89 81       	ldd	r24, Y+1	; 0x01
}
     a82:	0f 90       	pop	r0
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	08 95       	ret

00000a8a <BUMPERS_stateChanged_DUMMY>:

// -------------------------------
// Bumpers State changed handler:

void BUMPERS_stateChanged_DUMMY(void){}
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	cf 91       	pop	r28
     a94:	df 91       	pop	r29
     a96:	08 95       	ret

00000a98 <BUMPERS_setStateChangedHandler>:
/**
 * Use this function to set the Bumpers state change handler. 
 * 
 */
void BUMPERS_setStateChangedHandler(void (*bumperHandler)(void)) 
{
     a98:	df 93       	push	r29
     a9a:	cf 93       	push	r28
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <BUMPERS_setStateChangedHandler+0x6>
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	9a 83       	std	Y+2, r25	; 0x02
     aa4:	89 83       	std	Y+1, r24	; 0x01
	BUMPERS_stateChangedHandler = bumperHandler;
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	90 93 63 00 	sts	0x0063, r25
     aae:	80 93 62 00 	sts	0x0062, r24
}
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	cf 91       	pop	r28
     ab8:	df 91       	pop	r29
     aba:	08 95       	ret

00000abc <task_Bumpers>:
 * variables are updated automatically every 50ms and can be used everywhere
 * in your program. It can also call an event handler routine, that you
 * need to register with BUMPERS_setStateChangedHandler before.
 */
void task_Bumpers(void)
{
     abc:	df 93       	push	r29
     abe:	cf 93       	push	r28
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <task_Bumpers+0x6>
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
	if(bumper_timer > 50) { // 50ms
     ac6:	80 91 f0 01 	lds	r24, 0x01F0
     aca:	83 33       	cpi	r24, 0x33	; 51
     acc:	e8 f0       	brcs	.+58     	; 0xb08 <task_Bumpers+0x4c>
		uint8_t left = getBumperLeft();
     ace:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <getBumperLeft>
     ad2:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t right = getBumperRight();
     ad4:	0e 94 14 05 	call	0xa28	; 0xa28 <getBumperRight>
     ad8:	89 83       	std	Y+1, r24	; 0x01
		if(bumper_left != left || bumper_right != right) {
     ada:	90 91 a4 01 	lds	r25, 0x01A4
     ade:	8a 81       	ldd	r24, Y+2	; 0x02
     ae0:	98 17       	cp	r25, r24
     ae2:	29 f4       	brne	.+10     	; 0xaee <task_Bumpers+0x32>
     ae4:	90 91 01 02 	lds	r25, 0x0201
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	98 17       	cp	r25, r24
     aec:	59 f0       	breq	.+22     	; 0xb04 <task_Bumpers+0x48>
			bumper_left = left;
     aee:	8a 81       	ldd	r24, Y+2	; 0x02
     af0:	80 93 a4 01 	sts	0x01A4, r24
			bumper_right = right;
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	80 93 01 02 	sts	0x0201, r24
			BUMPERS_stateChangedHandler();
     afa:	e0 91 62 00 	lds	r30, 0x0062
     afe:	f0 91 63 00 	lds	r31, 0x0063
     b02:	09 95       	icall
		}
		bumper_timer = 0;
     b04:	10 92 f0 01 	sts	0x01F0, r1
	}
}
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	08 95       	ret

00000b12 <readADC>:
 *			if(uBat < 600)
 *				writeString("WARNING: BAT IS LOW!\n");
 *
 */
uint16_t readADC(uint8_t channel)
{
     b12:	df 93       	push	r29
     b14:	cf 93       	push	r28
     b16:	00 d0       	rcall	.+0      	; 0xb18 <readADC+0x6>
     b18:	0f 92       	push	r0
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	89 83       	std	Y+1, r24	; 0x01
	if((ADCSRA & (1<<ADSC))) return 0; // check if ADC is buisy...
     b20:	e6 e2       	ldi	r30, 0x26	; 38
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	88 2f       	mov	r24, r24
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	80 74       	andi	r24, 0x40	; 64
     b2c:	90 70       	andi	r25, 0x00	; 0
     b2e:	00 97       	sbiw	r24, 0x00	; 0
     b30:	19 f0       	breq	.+6      	; 0xb38 <readADC+0x26>
     b32:	1b 82       	std	Y+3, r1	; 0x03
     b34:	1a 82       	std	Y+2, r1	; 0x02
     b36:	1f c0       	rjmp	.+62     	; 0xb76 <readADC+0x64>
	ADMUX = (1<<REFS0) | (0<<REFS1) | (channel<<MUX0);
     b38:	e7 e2       	ldi	r30, 0x27	; 39
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	80 64       	ori	r24, 0x40	; 64
     b40:	80 83       	st	Z, r24
	ADCSRA = (0<<ADIE) | (1<<ADSC) | (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADIF);
     b42:	e6 e2       	ldi	r30, 0x26	; 38
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	86 ed       	ldi	r24, 0xD6	; 214
     b48:	80 83       	st	Z, r24
	while ((ADCSRA & (1<<ADSC))); 
     b4a:	e6 e2       	ldi	r30, 0x26	; 38
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	80 74       	andi	r24, 0x40	; 64
     b56:	90 70       	andi	r25, 0x00	; 0
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	b9 f7       	brne	.-18     	; 0xb4a <readADC+0x38>
	ADCSRA |= (1<<ADIF);
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 61       	ori	r24, 0x10	; 16
     b68:	8c 93       	st	X, r24
	return ADC;
     b6a:	e4 e2       	ldi	r30, 0x24	; 36
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	9b 83       	std	Y+3, r25	; 0x03
     b74:	8a 83       	std	Y+2, r24	; 0x02
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	9b 81       	ldd	r25, Y+3	; 0x03
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <startADC>:
 * read value! You need to poll if the conversion is complete somewhere
 * else and then read it from the ADC result register.
 * (s. task_ADC function below)
 */
void startADC(uint8_t channel)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (1<<REFS0) | (0<<REFS1) | (channel<<MUX0);
     b92:	e7 e2       	ldi	r30, 0x27	; 39
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	80 64       	ori	r24, 0x40	; 64
     b9a:	80 83       	st	Z, r24
	ADCSRA = (0<<ADIE) | (1<<ADSC) | (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADIF);
     b9c:	e6 e2       	ldi	r30, 0x26	; 38
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	86 ed       	ldi	r24, 0xD6	; 214
     ba2:	80 83       	st	Z, r24
}
     ba4:	0f 90       	pop	r0
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <task_ADC>:
 *
 * Instead you can use the seven global variables you see above to
 * get the ADC values!
 */
void task_ADC(void)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <task_ADC+0x6>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	static uint8_t current_adc_channel = 0;
	if(!(ADCSRA & (1<<ADSC))) {
     bb6:	e6 e2       	ldi	r30, 0x26	; 38
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	80 74       	andi	r24, 0x40	; 64
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	09 f0       	breq	.+2      	; 0xbca <task_ADC+0x1e>
     bc8:	91 c0       	rjmp	.+290    	; 0xcec <task_ADC+0x140>
	//	ADCSRA |= (1<<ADIF);
		switch(current_adc_channel) {
     bca:	80 91 79 01 	lds	r24, 0x0179
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	3a 83       	std	Y+2, r19	; 0x02
     bd4:	29 83       	std	Y+1, r18	; 0x01
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	83 30       	cpi	r24, 0x03	; 3
     bdc:	91 05       	cpc	r25, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <task_ADC+0x36>
     be0:	4a c0       	rjmp	.+148    	; 0xc76 <task_ADC+0xca>
     be2:	29 81       	ldd	r18, Y+1	; 0x01
     be4:	3a 81       	ldd	r19, Y+2	; 0x02
     be6:	24 30       	cpi	r18, 0x04	; 4
     be8:	31 05       	cpc	r19, r1
     bea:	7c f4       	brge	.+30     	; 0xc0a <task_ADC+0x5e>
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	91 05       	cpc	r25, r1
     bf4:	41 f1       	breq	.+80     	; 0xc46 <task_ADC+0x9a>
     bf6:	29 81       	ldd	r18, Y+1	; 0x01
     bf8:	3a 81       	ldd	r19, Y+2	; 0x02
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	31 05       	cpc	r19, r1
     bfe:	7c f5       	brge	.+94     	; 0xc5e <task_ADC+0xb2>
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	99 f0       	breq	.+38     	; 0xc2e <task_ADC+0x82>
     c08:	65 c0       	rjmp	.+202    	; 0xcd4 <task_ADC+0x128>
     c0a:	29 81       	ldd	r18, Y+1	; 0x01
     c0c:	3a 81       	ldd	r19, Y+2	; 0x02
     c0e:	25 30       	cpi	r18, 0x05	; 5
     c10:	31 05       	cpc	r19, r1
     c12:	09 f4       	brne	.+2      	; 0xc16 <task_ADC+0x6a>
     c14:	48 c0       	rjmp	.+144    	; 0xca6 <task_ADC+0xfa>
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	9a 81       	ldd	r25, Y+2	; 0x02
     c1a:	85 30       	cpi	r24, 0x05	; 5
     c1c:	91 05       	cpc	r25, r1
     c1e:	bc f1       	brlt	.+110    	; 0xc8e <task_ADC+0xe2>
     c20:	29 81       	ldd	r18, Y+1	; 0x01
     c22:	3a 81       	ldd	r19, Y+2	; 0x02
     c24:	26 30       	cpi	r18, 0x06	; 6
     c26:	31 05       	cpc	r19, r1
     c28:	09 f4       	brne	.+2      	; 0xc2c <task_ADC+0x80>
     c2a:	49 c0       	rjmp	.+146    	; 0xcbe <task_ADC+0x112>
     c2c:	53 c0       	rjmp	.+166    	; 0xcd4 <task_ADC+0x128>
			case 0: adcBat = ADC; startADC(ADC_MCURRENT_L); break;
     c2e:	e4 e2       	ldi	r30, 0x24	; 36
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	90 93 05 02 	sts	0x0205, r25
     c3a:	80 93 04 02 	sts	0x0204, r24
     c3e:	86 e0       	ldi	r24, 0x06	; 6
     c40:	0e 94 c3 05 	call	0xb86	; 0xb86 <startADC>
     c44:	47 c0       	rjmp	.+142    	; 0xcd4 <task_ADC+0x128>
			case 1: adcMotorCurrentLeft = ADC; startADC(ADC_MCURRENT_R); break;
     c46:	e4 e2       	ldi	r30, 0x24	; 36
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	90 93 0a 02 	sts	0x020A, r25
     c52:	80 93 09 02 	sts	0x0209, r24
     c56:	85 e0       	ldi	r24, 0x05	; 5
     c58:	0e 94 c3 05 	call	0xb86	; 0xb86 <startADC>
     c5c:	3b c0       	rjmp	.+118    	; 0xcd4 <task_ADC+0x128>
			case 2: adcMotorCurrentRight = ADC; startADC(ADC_LS_L); break;
     c5e:	e4 e2       	ldi	r30, 0x24	; 36
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	91 81       	ldd	r25, Z+1	; 0x01
     c66:	90 93 fb 01 	sts	0x01FB, r25
     c6a:	80 93 fa 01 	sts	0x01FA, r24
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	0e 94 c3 05 	call	0xb86	; 0xb86 <startADC>
     c74:	2f c0       	rjmp	.+94     	; 0xcd4 <task_ADC+0x128>
			case 3: adcLSL = ADC; startADC(ADC_LS_R); break;
     c76:	e4 e2       	ldi	r30, 0x24	; 36
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	90 93 c4 01 	sts	0x01C4, r25
     c82:	80 93 c3 01 	sts	0x01C3, r24
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	0e 94 c3 05 	call	0xb86	; 0xb86 <startADC>
     c8c:	23 c0       	rjmp	.+70     	; 0xcd4 <task_ADC+0x128>
			case 4: adcLSR = ADC; startADC(ADC_ADC0); break;
     c8e:	e4 e2       	ldi	r30, 0x24	; 36
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	90 93 ea 01 	sts	0x01EA, r25
     c9a:	80 93 e9 01 	sts	0x01E9, r24
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	0e 94 c3 05 	call	0xb86	; 0xb86 <startADC>
     ca4:	17 c0       	rjmp	.+46     	; 0xcd4 <task_ADC+0x128>
			case 5: adc0 = ADC; startADC(ADC_ADC1); break;
     ca6:	e4 e2       	ldi	r30, 0x24	; 36
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	91 81       	ldd	r25, Z+1	; 0x01
     cae:	90 93 f8 01 	sts	0x01F8, r25
     cb2:	80 93 f7 01 	sts	0x01F7, r24
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	0e 94 c3 05 	call	0xb86	; 0xb86 <startADC>
     cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <task_ADC+0x128>
			case 6: adc1 = ADC; startADC(ADC_BAT); break;
     cbe:	e4 e2       	ldi	r30, 0x24	; 36
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	90 93 c2 01 	sts	0x01C2, r25
     cca:	80 93 c1 01 	sts	0x01C1, r24
     cce:	87 e0       	ldi	r24, 0x07	; 7
     cd0:	0e 94 c3 05 	call	0xb86	; 0xb86 <startADC>
		}
		if(current_adc_channel == 6)
     cd4:	80 91 79 01 	lds	r24, 0x0179
     cd8:	86 30       	cpi	r24, 0x06	; 6
     cda:	19 f4       	brne	.+6      	; 0xce2 <task_ADC+0x136>
			current_adc_channel = 0;
     cdc:	10 92 79 01 	sts	0x0179, r1
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <task_ADC+0x140>
		else
			current_adc_channel++;
     ce2:	80 91 79 01 	lds	r24, 0x0179
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	80 93 79 01 	sts	0x0179, r24
	}
}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <__vector_1>:
 * External Interrupt 0 ISR
 * (ENCL)
 *
 */
ISR (INT0_vect)
{
     cf6:	1f 92       	push	r1
     cf8:	0f 92       	push	r0
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	0f 92       	push	r0
     cfe:	11 24       	eor	r1, r1
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	mleft_dist++;
     d0c:	80 91 ff 01 	lds	r24, 0x01FF
     d10:	90 91 00 02 	lds	r25, 0x0200
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	90 93 00 02 	sts	0x0200, r25
     d1a:	80 93 ff 01 	sts	0x01FF, r24
	mleft_counter++;	
     d1e:	80 91 f5 01 	lds	r24, 0x01F5
     d22:	90 91 f6 01 	lds	r25, 0x01F6
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	90 93 f6 01 	sts	0x01F6, r25
     d2c:	80 93 f5 01 	sts	0x01F5, r24
		else {
			cycle_h_l = cycle_h_l_tmp;
			cycle_h_l_tmp = 0;
		}
	#endif
}
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <__vector_2>:
 * External Interrupt 1 ISR
 * (ENCR)
 *
 */
ISR (INT1_vect)
{
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	mright_dist++;
     d58:	80 91 f1 01 	lds	r24, 0x01F1
     d5c:	90 91 f2 01 	lds	r25, 0x01F2
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	90 93 f2 01 	sts	0x01F2, r25
     d66:	80 93 f1 01 	sts	0x01F1, r24
	mright_counter++;
     d6a:	80 91 cb 01 	lds	r24, 0x01CB
     d6e:	90 91 cc 01 	lds	r25, 0x01CC
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	90 93 cc 01 	sts	0x01CC, r25
     d78:	80 93 cb 01 	sts	0x01CB, r24
			cycle_h_r += cycle_h_r_tmp;
			cycle_h_r >>=1;
			cycle_h_r_tmp = 0;
		}
	#endif
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	9f 91       	pop	r25
     d82:	8f 91       	pop	r24
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <MOTIONCONTROL_stateChanged_DUMMY>:


// -------------------------------
// MotionControl state changed handler:

void MOTIONCONTROL_stateChanged_DUMMY(void){}
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <MOTIONCONTROL_setStateChangedHandler>:
/**
 * Use this function to set the Motion Control state change handler. 
 * 
 */
void MOTIONCONTROL_setStateChangedHandler(void (*motionControlHandler)(void)) 
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	00 d0       	rcall	.+0      	; 0xda2 <MOTIONCONTROL_setStateChangedHandler+0x6>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
	MOTIONCONTROL_stateChangedHandler = motionControlHandler;
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	90 93 65 00 	sts	0x0065, r25
     db2:	80 93 64 00 	sts	0x0064, r24
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <emergencyShutdown>:
 * called from task_motionControl (s. below) and outputs an error message and then stops
 * all operations to save the robot from damages that may occur if it continues
 * to drive around. 
 */
void emergencyShutdown(uint8_t why)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <emergencyShutdown+0x6>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	8a 83       	std	Y+2, r24	; 0x02
	cli();
     dcc:	f8 94       	cli
	IRCOMM_OFF();
     dce:	a2 e3       	ldi	r26, 0x32	; 50
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e2 e3       	ldi	r30, 0x32	; 50
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	8f 77       	andi	r24, 0x7F	; 127
     dda:	8c 93       	st	X, r24
	setACSPwrOff();
     ddc:	0e 94 ed 10 	call	0x21da	; 0x21da <setACSPwrOff>
	mleft_power = 0;
     de0:	10 92 ba 01 	sts	0x01BA, r1
     de4:	10 92 b9 01 	sts	0x01B9, r1
	mright_power = 0;
     de8:	10 92 ca 01 	sts	0x01CA, r1
     dec:	10 92 c9 01 	sts	0x01C9, r1
	left_i = 0;
     df0:	10 92 b4 01 	sts	0x01B4, r1
     df4:	10 92 b3 01 	sts	0x01B3, r1
	right_i = 0;
     df8:	10 92 ef 01 	sts	0x01EF, r1
     dfc:	10 92 ee 01 	sts	0x01EE, r1
	mleft_ptmp = 0;
     e00:	10 92 08 02 	sts	0x0208, r1
	mright_ptmp = 0;
     e04:	10 92 e6 01 	sts	0x01E6, r1
	OCR1AL = 0;
     e08:	ea e4       	ldi	r30, 0x4A	; 74
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	10 82       	st	Z, r1
	OCR1BL = 0;
     e0e:	e8 e4       	ldi	r30, 0x48	; 72
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	10 82       	st	Z, r1
	TCCR1A = 0;
     e14:	ef e4       	ldi	r30, 0x4F	; 79
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	10 82       	st	Z, r1
	powerOFF();
     e1a:	0e 94 9c 11 	call	0x2338	; 0x2338 <powerOFF>
#ifdef ENABLE_OC_ERROR_MESSAGE
	writeString_P("\n\n##### EMERGENCY SHUTDOWN #####\n");
     e1e:	80 ef       	ldi	r24, 0xF0	; 240
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
	writeString_P("##### ALL OPERATIONS STOPPED TO PREVENT ANY DAMAGE! #####\n");
     e26:	85 eb       	ldi	r24, 0xB5	; 181
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
	if(why == ENCODER_MALFUNCTION_LEFT || why == ENCODER_MALFUNCTION_RIGHT) {
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	19 f0       	breq	.+6      	; 0xe3a <emergencyShutdown+0x7a>
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	e9 f4       	brne	.+58     	; 0xe74 <emergencyShutdown+0xb4>
		
		writeString_P("\n### ENCODER (OR MOTOR) MALFUNCTION! ###\n");
     e3a:	8b e8       	ldi	r24, 0x8B	; 139
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
		writeString_P("Affected channel:"); 	
     e42:	89 e7       	ldi	r24, 0x79	; 121
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
		if(why == ENCODER_MALFUNCTION_LEFT)
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	29 f4       	brne	.+10     	; 0xe5a <emergencyShutdown+0x9a>
			writeString_P("LEFT");
     e50:	84 e7       	ldi	r24, 0x74	; 116
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <emergencyShutdown+0xa2>
		else
			writeString_P("RIGHT");
     e5a:	8e e6       	ldi	r24, 0x6E	; 110
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
		writeString_P("!\n\n(s. task_motorControl() function in RP6Lib!)\n");
     e62:	8d e3       	ldi	r24, 0x3D	; 61
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
		writeString_P("You need to check Encoder/Motor assembly (or your software).\n\n");
     e6a:	8e ef       	ldi	r24, 0xFE	; 254
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
     e72:	0f c0       	rjmp	.+30     	; 0xe92 <emergencyShutdown+0xd2>
	}
	else if(why == OVERCURRENT)
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	83 30       	cpi	r24, 0x03	; 3
     e78:	61 f4       	brne	.+24     	; 0xe92 <emergencyShutdown+0xd2>
	{
		writeString_P("\n\n### MOTOR OVERCURRENT ###\n");
     e7a:	81 ee       	ldi	r24, 0xE1	; 225
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
		writeString_P("\n\n(s. task_motorControl() function in RP6Lib!)\n");
     e82:	81 eb       	ldi	r24, 0xB1	; 177
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
		writeString_P("You need to check Motor assembly (or your software).\n\n");
     e8a:	8a e7       	ldi	r24, 0x7A	; 122
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
	}
	writeString_P("The Robot needs to be resetted now.\n\n");
     e92:	84 e5       	ldi	r24, 0x54	; 84
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <writeNStringP>
#endif
	while(true) // Rest In Peace
	{
		setLEDs(0b110110);
     e9a:	86 e3       	ldi	r24, 0x36	; 54
     e9c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <setLEDs>
		uint8_t dly;
		for(dly = 10; dly; dly--)
     ea0:	8a e0       	ldi	r24, 0x0A	; 10
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <emergencyShutdown+0xf4>
			delayCycles(32768);
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e8       	ldi	r25, 0x80	; 128
     eaa:	0e 94 a9 14 	call	0x2952	; 0x2952 <delayCycles>
#endif
	while(true) // Rest In Peace
	{
		setLEDs(0b110110);
		uint8_t dly;
		for(dly = 10; dly; dly--)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	81 50       	subi	r24, 0x01	; 1
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	88 23       	and	r24, r24
     eb8:	b1 f7       	brne	.-20     	; 0xea6 <emergencyShutdown+0xe6>
			delayCycles(32768);
		setLEDs(0b000000);
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <setLEDs>
		for(dly = 10; dly; dly--)
     ec0:	8a e0       	ldi	r24, 0x0A	; 10
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <emergencyShutdown+0x114>
			delayCycles(65535);
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	9f ef       	ldi	r25, 0xFF	; 255
     eca:	0e 94 a9 14 	call	0x2952	; 0x2952 <delayCycles>
		setLEDs(0b110110);
		uint8_t dly;
		for(dly = 10; dly; dly--)
			delayCycles(32768);
		setLEDs(0b000000);
		for(dly = 10; dly; dly--)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	81 50       	subi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	88 23       	and	r24, r24
     ed8:	b1 f7       	brne	.-20     	; 0xec6 <emergencyShutdown+0x106>
     eda:	df cf       	rjmp	.-66     	; 0xe9a <emergencyShutdown+0xda>

00000edc <task_motionControl>:
 *
 * You need to consider this Soft-PWM when changing/tuning this function!
 *
 */
void task_motionControl(void)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	28 97       	sbiw	r28, 0x08	; 8
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
	// Automatic motor overcurrent shutdown:
	if(overcurrent_timer >= 50) { // every 5ms
     ef0:	80 91 e5 01 	lds	r24, 0x01E5
     ef4:	82 33       	cpi	r24, 0x32	; 50
     ef6:	08 f4       	brcc	.+2      	; 0xefa <task_motionControl+0x1e>
     ef8:	7e c0       	rjmp	.+252    	; 0xff6 <task_motionControl+0x11a>
		overcurrent_timer = 0;
     efa:	10 92 e5 01 	sts	0x01E5, r1
		if(!overcurrent_timeout) {
     efe:	80 91 e2 01 	lds	r24, 0x01E2
     f02:	88 23       	and	r24, r24
     f04:	09 f0       	breq	.+2      	; 0xf08 <task_motionControl+0x2c>
     f06:	43 c0       	rjmp	.+134    	; 0xf8e <task_motionControl+0xb2>
			if((adcMotorCurrentLeft > 770) || (adcMotorCurrentRight > 770)) {
     f08:	80 91 09 02 	lds	r24, 0x0209
     f0c:	90 91 0a 02 	lds	r25, 0x020A
     f10:	23 e0       	ldi	r18, 0x03	; 3
     f12:	83 30       	cpi	r24, 0x03	; 3
     f14:	92 07       	cpc	r25, r18
     f16:	40 f4       	brcc	.+16     	; 0xf28 <task_motionControl+0x4c>
     f18:	80 91 fa 01 	lds	r24, 0x01FA
     f1c:	90 91 fb 01 	lds	r25, 0x01FB
     f20:	43 e0       	ldi	r20, 0x03	; 3
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	94 07       	cpc	r25, r20
     f26:	f0 f0       	brcs	.+60     	; 0xf64 <task_motionControl+0x88>
				overcurrent_errors++;
     f28:	80 91 e4 01 	lds	r24, 0x01E4
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	80 93 e4 01 	sts	0x01E4, r24
				overcurrent_timeout = 10; 
     f32:	8a e0       	ldi	r24, 0x0A	; 10
     f34:	80 93 e2 01 	sts	0x01E2, r24
				mleft_power = 0;
     f38:	10 92 ba 01 	sts	0x01BA, r1
     f3c:	10 92 b9 01 	sts	0x01B9, r1
				mright_power = 0;				
     f40:	10 92 ca 01 	sts	0x01CA, r1
     f44:	10 92 c9 01 	sts	0x01C9, r1
				left_i = 0;
     f48:	10 92 b4 01 	sts	0x01B4, r1
     f4c:	10 92 b3 01 	sts	0x01B3, r1
				right_i = 0;
     f50:	10 92 ef 01 	sts	0x01EF, r1
     f54:	10 92 ee 01 	sts	0x01EE, r1
				motion_status.overcurrent = true;
     f58:	80 91 96 01 	lds	r24, 0x0196
     f5c:	84 60       	ori	r24, 0x04	; 4
     f5e:	80 93 96 01 	sts	0x0196, r24
     f62:	59 c2       	rjmp	.+1202   	; 0x1416 <task_motionControl+0x53a>
				return;
			}
			else
				motion_status.overcurrent = false;
     f64:	80 91 96 01 	lds	r24, 0x0196
     f68:	8b 7f       	andi	r24, 0xFB	; 251
     f6a:	80 93 96 01 	sts	0x0196, r24
			
			// Emergency shutdown if there are too many (default: 3) overcurrent
			// events within ~20 seconds (100 * 200ms).
			if(overcurrent_error_clear > 100) {
     f6e:	80 91 af 01 	lds	r24, 0x01AF
     f72:	85 36       	cpi	r24, 0x65	; 101
     f74:	28 f0       	brcs	.+10     	; 0xf80 <task_motionControl+0xa4>
				overcurrent_errors = 0;
     f76:	10 92 e4 01 	sts	0x01E4, r1
				overcurrent_error_clear = 0;
     f7a:	10 92 af 01 	sts	0x01AF, r1
     f7e:	07 c0       	rjmp	.+14     	; 0xf8e <task_motionControl+0xb2>
			}
			else if(overcurrent_errors > 2)
     f80:	80 91 e4 01 	lds	r24, 0x01E4
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	18 f0       	brcs	.+6      	; 0xf8e <task_motionControl+0xb2>
				emergencyShutdown(OVERCURRENT);
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <emergencyShutdown>
		}
		
		// Detect if one of the encoders or motors does not work properly and stop 
		// all operations immediately if this is the case! 
		if((adcMotorCurrentLeft < 150) && (mleft_speed == 0) 
     f8e:	80 91 09 02 	lds	r24, 0x0209
     f92:	90 91 0a 02 	lds	r25, 0x020A
     f96:	86 39       	cpi	r24, 0x96	; 150
     f98:	91 05       	cpc	r25, r1
     f9a:	98 f4       	brcc	.+38     	; 0xfc2 <task_motionControl+0xe6>
     f9c:	80 91 bb 01 	lds	r24, 0x01BB
     fa0:	90 91 bc 01 	lds	r25, 0x01BC
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	69 f4       	brne	.+26     	; 0xfc2 <task_motionControl+0xe6>
     fa8:	80 91 a9 01 	lds	r24, 0x01A9
     fac:	90 91 aa 01 	lds	r25, 0x01AA
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	39 f0       	breq	.+14     	; 0xfc2 <task_motionControl+0xe6>
     fb4:	80 91 08 02 	lds	r24, 0x0208
     fb8:	87 39       	cpi	r24, 0x97	; 151
     fba:	18 f0       	brcs	.+6      	; 0xfc2 <task_motionControl+0xe6>
		  && (mleft_des_speed != 0) &&  (mleft_ptmp > 150))
			emergencyShutdown(ENCODER_MALFUNCTION_LEFT);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <emergencyShutdown>
		if((adcMotorCurrentRight < 150) && (mright_speed == 0) 
     fc2:	80 91 fa 01 	lds	r24, 0x01FA
     fc6:	90 91 fb 01 	lds	r25, 0x01FB
     fca:	86 39       	cpi	r24, 0x96	; 150
     fcc:	91 05       	cpc	r25, r1
     fce:	98 f4       	brcc	.+38     	; 0xff6 <task_motionControl+0x11a>
     fd0:	80 91 fd 01 	lds	r24, 0x01FD
     fd4:	90 91 fe 01 	lds	r25, 0x01FE
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	69 f4       	brne	.+26     	; 0xff6 <task_motionControl+0x11a>
     fdc:	80 91 a7 01 	lds	r24, 0x01A7
     fe0:	90 91 a8 01 	lds	r25, 0x01A8
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	39 f0       	breq	.+14     	; 0xff6 <task_motionControl+0x11a>
     fe8:	80 91 e6 01 	lds	r24, 0x01E6
     fec:	87 39       	cpi	r24, 0x97	; 151
     fee:	18 f0       	brcs	.+6      	; 0xff6 <task_motionControl+0x11a>
		  && (mright_des_speed != 0) && (mright_ptmp > 150))
			emergencyShutdown(ENCODER_MALFUNCTION_RIGHT);
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <emergencyShutdown>
	}
	
	// Motor Control
	if(motor_control) { // Everytime after the speed has been measured. (default: 200ms)
     ff6:	80 91 b7 01 	lds	r24, 0x01B7
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <task_motionControl+0x124>
     ffe:	fc c1       	rjmp	.+1016   	; 0x13f8 <task_motionControl+0x51c>
		if(!overcurrent_timeout) { // No overcurrent timeout? (default is to wait 2 seconds before new try)
    1000:	80 91 e2 01 	lds	r24, 0x01E2
    1004:	88 23       	and	r24, r24
    1006:	09 f0       	breq	.+2      	; 0x100a <task_motionControl+0x12e>
    1008:	f0 c1       	rjmp	.+992    	; 0x13ea <task_motionControl+0x50e>
			if(overcurrent_errors) // Overcurrent errors?
    100a:	80 91 e4 01 	lds	r24, 0x01E4
    100e:	88 23       	and	r24, r24
    1010:	31 f0       	breq	.+12     	; 0x101e <task_motionControl+0x142>
				overcurrent_error_clear++; // Yes, Timeout to clear all error events.
    1012:	80 91 af 01 	lds	r24, 0x01AF
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	80 93 af 01 	sts	0x01AF, r24
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <task_motionControl+0x146>
			else
				overcurrent_error_clear=0; // No, we set the timeout to zero.
    101e:	10 92 af 01 	sts	0x01AF, r1
				
			// Move Distance left:
			if(motion_status.move_R) {
    1022:	80 91 96 01 	lds	r24, 0x0196
    1026:	82 70       	andi	r24, 0x02	; 2
    1028:	88 23       	and	r24, r24
    102a:	09 f4       	brne	.+2      	; 0x102e <task_motionControl+0x152>
    102c:	3f c0       	rjmp	.+126    	; 0x10ac <task_motionControl+0x1d0>
				if(mleft_dist >= preStop_R) { // Stop a bit before the desired distance for ..
    102e:	20 91 ff 01 	lds	r18, 0x01FF
    1032:	30 91 00 02 	lds	r19, 0x0200
    1036:	80 91 a5 01 	lds	r24, 0x01A5
    103a:	90 91 a6 01 	lds	r25, 0x01A6
    103e:	28 17       	cp	r18, r24
    1040:	39 07       	cpc	r19, r25
    1042:	90 f0       	brcs	.+36     	; 0x1068 <task_motionControl+0x18c>
					mleft_des_speed = 0;      // ... better accurancy.
    1044:	10 92 aa 01 	sts	0x01AA, r1
    1048:	10 92 a9 01 	sts	0x01A9, r1
					left_i = 0;
    104c:	10 92 b4 01 	sts	0x01B4, r1
    1050:	10 92 b3 01 	sts	0x01B3, r1
					mleft_power = 0;		
    1054:	10 92 ba 01 	sts	0x01BA, r1
    1058:	10 92 b9 01 	sts	0x01B9, r1
					motion_status.move_R = false;
    105c:	80 91 96 01 	lds	r24, 0x0196
    1060:	8d 7f       	andi	r24, 0xFD	; 253
    1062:	80 93 96 01 	sts	0x0196, r24
    1066:	22 c0       	rjmp	.+68     	; 0x10ac <task_motionControl+0x1d0>
				}
				else if(mleft_dist >= preDecelerate_R) { // Start to decelerate?
    1068:	20 91 ff 01 	lds	r18, 0x01FF
    106c:	30 91 00 02 	lds	r19, 0x0200
    1070:	80 91 bd 01 	lds	r24, 0x01BD
    1074:	90 91 be 01 	lds	r25, 0x01BE
    1078:	28 17       	cp	r18, r24
    107a:	39 07       	cpc	r19, r25
    107c:	b8 f0       	brcs	.+46     	; 0x10ac <task_motionControl+0x1d0>
					mleft_des_speed /= 2;
    107e:	80 91 a9 01 	lds	r24, 0x01A9
    1082:	90 91 aa 01 	lds	r25, 0x01AA
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	90 93 aa 01 	sts	0x01AA, r25
    108e:	80 93 a9 01 	sts	0x01A9, r24
					if(mleft_des_speed < 22) mleft_des_speed = 22;
    1092:	80 91 a9 01 	lds	r24, 0x01A9
    1096:	90 91 aa 01 	lds	r25, 0x01AA
    109a:	86 31       	cpi	r24, 0x16	; 22
    109c:	91 05       	cpc	r25, r1
    109e:	30 f4       	brcc	.+12     	; 0x10ac <task_motionControl+0x1d0>
    10a0:	86 e1       	ldi	r24, 0x16	; 22
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	90 93 aa 01 	sts	0x01AA, r25
    10a8:	80 93 a9 01 	sts	0x01A9, r24
				}	
			}
			
			// Move Distance right:
			if(motion_status.move_L) {
    10ac:	80 91 96 01 	lds	r24, 0x0196
    10b0:	81 70       	andi	r24, 0x01	; 1
    10b2:	88 23       	and	r24, r24
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <task_motionControl+0x1dc>
    10b6:	3f c0       	rjmp	.+126    	; 0x1136 <task_motionControl+0x25a>
				if(mright_dist >= preStop_L) { // Stop a bit before the desired distance for ..
    10b8:	20 91 f1 01 	lds	r18, 0x01F1
    10bc:	30 91 f2 01 	lds	r19, 0x01F2
    10c0:	80 91 c7 01 	lds	r24, 0x01C7
    10c4:	90 91 c8 01 	lds	r25, 0x01C8
    10c8:	28 17       	cp	r18, r24
    10ca:	39 07       	cpc	r19, r25
    10cc:	90 f0       	brcs	.+36     	; 0x10f2 <task_motionControl+0x216>
					mright_des_speed = 0;      // ... better accurancy.
    10ce:	10 92 a8 01 	sts	0x01A8, r1
    10d2:	10 92 a7 01 	sts	0x01A7, r1
					right_i = 0;
    10d6:	10 92 ef 01 	sts	0x01EF, r1
    10da:	10 92 ee 01 	sts	0x01EE, r1
					mright_power = 0;
    10de:	10 92 ca 01 	sts	0x01CA, r1
    10e2:	10 92 c9 01 	sts	0x01C9, r1
					motion_status.move_L = false;
    10e6:	80 91 96 01 	lds	r24, 0x0196
    10ea:	8e 7f       	andi	r24, 0xFE	; 254
    10ec:	80 93 96 01 	sts	0x0196, r24
    10f0:	22 c0       	rjmp	.+68     	; 0x1136 <task_motionControl+0x25a>
				}
				else if(mright_dist >= preDecelerate_L) { // Start to decelerate?
    10f2:	20 91 f1 01 	lds	r18, 0x01F1
    10f6:	30 91 f2 01 	lds	r19, 0x01F2
    10fa:	80 91 f3 01 	lds	r24, 0x01F3
    10fe:	90 91 f4 01 	lds	r25, 0x01F4
    1102:	28 17       	cp	r18, r24
    1104:	39 07       	cpc	r19, r25
    1106:	b8 f0       	brcs	.+46     	; 0x1136 <task_motionControl+0x25a>
					mright_des_speed /= 2;
    1108:	80 91 a7 01 	lds	r24, 0x01A7
    110c:	90 91 a8 01 	lds	r25, 0x01A8
    1110:	96 95       	lsr	r25
    1112:	87 95       	ror	r24
    1114:	90 93 a8 01 	sts	0x01A8, r25
    1118:	80 93 a7 01 	sts	0x01A7, r24
					if(mright_des_speed < 22) mright_des_speed = 22;
    111c:	80 91 a7 01 	lds	r24, 0x01A7
    1120:	90 91 a8 01 	lds	r25, 0x01A8
    1124:	86 31       	cpi	r24, 0x16	; 22
    1126:	91 05       	cpc	r25, r1
    1128:	30 f4       	brcc	.+12     	; 0x1136 <task_motionControl+0x25a>
    112a:	86 e1       	ldi	r24, 0x16	; 22
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	90 93 a8 01 	sts	0x01A8, r25
    1132:	80 93 a7 01 	sts	0x01A7, r24
#else 
#ifdef CHANGE_DIRECTION_MEDIUM
			// Change direction -- Medium Version.
      // This stops before changing the motor direction but is a bit faster
      // than the original version. 
			if(mleft_des_dir != mleft_dir || mright_des_dir != mright_dir) {
    1136:	90 91 74 01 	lds	r25, 0x0174
    113a:	80 91 76 01 	lds	r24, 0x0176
    113e:	98 17       	cp	r25, r24
    1140:	39 f4       	brne	.+14     	; 0x1150 <task_motionControl+0x274>
    1142:	90 91 75 01 	lds	r25, 0x0175
    1146:	80 91 77 01 	lds	r24, 0x0177
    114a:	98 17       	cp	r25, r24
    114c:	09 f4       	brne	.+2      	; 0x1150 <task_motionControl+0x274>
    114e:	64 c0       	rjmp	.+200    	; 0x1218 <task_motionControl+0x33c>
				if(mleft_des_speed || mright_des_speed) {
    1150:	80 91 a9 01 	lds	r24, 0x01A9
    1154:	90 91 aa 01 	lds	r25, 0x01AA
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	31 f4       	brne	.+12     	; 0x1168 <task_motionControl+0x28c>
    115c:	80 91 a7 01 	lds	r24, 0x01A7
    1160:	90 91 a8 01 	lds	r25, 0x01A8
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	41 f1       	breq	.+80     	; 0x11b8 <task_motionControl+0x2dc>
					mleft_des_speed_tmp = mleft_des_speed; // store current speed
    1168:	80 91 a9 01 	lds	r24, 0x01A9
    116c:	90 91 aa 01 	lds	r25, 0x01AA
    1170:	90 93 ac 01 	sts	0x01AC, r25
    1174:	80 93 ab 01 	sts	0x01AB, r24
					mright_des_speed_tmp = mright_des_speed; 
    1178:	80 91 a7 01 	lds	r24, 0x01A7
    117c:	90 91 a8 01 	lds	r25, 0x01A8
    1180:	90 93 c0 01 	sts	0x01C0, r25
    1184:	80 93 bf 01 	sts	0x01BF, r24
					mleft_des_speed = 0;			
    1188:	10 92 aa 01 	sts	0x01AA, r1
    118c:	10 92 a9 01 	sts	0x01A9, r1
					mright_des_speed = 0;
    1190:	10 92 a8 01 	sts	0x01A8, r1
    1194:	10 92 a7 01 	sts	0x01A7, r1
					mright_power=0; // Soft PWM adjust to 0
    1198:	10 92 ca 01 	sts	0x01CA, r1
    119c:	10 92 c9 01 	sts	0x01C9, r1
					mleft_power=0;
    11a0:	10 92 ba 01 	sts	0x01BA, r1
    11a4:	10 92 b9 01 	sts	0x01B9, r1
					left_i = 0;
    11a8:	10 92 b4 01 	sts	0x01B4, r1
    11ac:	10 92 b3 01 	sts	0x01B3, r1
					right_i = 0;
    11b0:	10 92 ef 01 	sts	0x01EF, r1
    11b4:	10 92 ee 01 	sts	0x01EE, r1
				}
				if(!TCCR1A) {
    11b8:	ef e4       	ldi	r30, 0x4F	; 79
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	88 23       	and	r24, r24
    11c0:	59 f5       	brne	.+86     	; 0x1218 <task_motionControl+0x33c>
					setMotorDir(mleft_des_dir,mright_des_dir);
    11c2:	80 91 74 01 	lds	r24, 0x0174
    11c6:	90 91 75 01 	lds	r25, 0x0175
    11ca:	69 2f       	mov	r22, r25
    11cc:	0e 94 91 0c 	call	0x1922	; 0x1922 <setMotorDir>
					mleft_des_speed = mleft_des_speed_tmp;
    11d0:	80 91 ab 01 	lds	r24, 0x01AB
    11d4:	90 91 ac 01 	lds	r25, 0x01AC
    11d8:	90 93 aa 01 	sts	0x01AA, r25
    11dc:	80 93 a9 01 	sts	0x01A9, r24
					mright_des_speed = mright_des_speed_tmp;
    11e0:	80 91 bf 01 	lds	r24, 0x01BF
    11e4:	90 91 c0 01 	lds	r25, 0x01C0
    11e8:	90 93 a8 01 	sts	0x01A8, r25
    11ec:	80 93 a7 01 	sts	0x01A7, r24
					left_i = mleft_des_speed / 2;
    11f0:	80 91 a9 01 	lds	r24, 0x01A9
    11f4:	90 91 aa 01 	lds	r25, 0x01AA
    11f8:	96 95       	lsr	r25
    11fa:	87 95       	ror	r24
    11fc:	90 93 b4 01 	sts	0x01B4, r25
    1200:	80 93 b3 01 	sts	0x01B3, r24
					right_i = mright_des_speed / 2;
    1204:	80 91 a7 01 	lds	r24, 0x01A7
    1208:	90 91 a8 01 	lds	r25, 0x01A8
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	90 93 ef 01 	sts	0x01EF, r25
    1214:	80 93 ee 01 	sts	0x01EE, r24
#endif
#endif


			// Left motor speed control:
			int16_t error_left = mleft_des_speed - mleft_speed;
    1218:	20 91 a9 01 	lds	r18, 0x01A9
    121c:	30 91 aa 01 	lds	r19, 0x01AA
    1220:	80 91 bb 01 	lds	r24, 0x01BB
    1224:	90 91 bc 01 	lds	r25, 0x01BC
    1228:	a9 01       	movw	r20, r18
    122a:	48 1b       	sub	r20, r24
    122c:	59 0b       	sbc	r21, r25
    122e:	ca 01       	movw	r24, r20
    1230:	9c 83       	std	Y+4, r25	; 0x04
    1232:	8b 83       	std	Y+3, r24	; 0x03
			left_i = left_i + error_left;
    1234:	20 91 b3 01 	lds	r18, 0x01B3
    1238:	30 91 b4 01 	lds	r19, 0x01B4
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	82 0f       	add	r24, r18
    1242:	93 1f       	adc	r25, r19
    1244:	90 93 b4 01 	sts	0x01B4, r25
    1248:	80 93 b3 01 	sts	0x01B3, r24
			if(left_i > MC_LEFT_IMAX) left_i = MC_LEFT_IMAX;
    124c:	80 91 b3 01 	lds	r24, 0x01B3
    1250:	90 91 b4 01 	lds	r25, 0x01B4
    1254:	51 e0       	ldi	r21, 0x01	; 1
    1256:	85 3a       	cpi	r24, 0xA5	; 165
    1258:	95 07       	cpc	r25, r21
    125a:	34 f0       	brlt	.+12     	; 0x1268 <task_motionControl+0x38c>
    125c:	84 ea       	ldi	r24, 0xA4	; 164
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	90 93 b4 01 	sts	0x01B4, r25
    1264:	80 93 b3 01 	sts	0x01B3, r24
			if(left_i < MC_LEFT_IMIN) left_i = MC_LEFT_IMIN;
    1268:	80 91 b3 01 	lds	r24, 0x01B3
    126c:	90 91 b4 01 	lds	r25, 0x01B4
    1270:	2e ef       	ldi	r18, 0xFE	; 254
    1272:	8c 35       	cpi	r24, 0x5C	; 92
    1274:	92 07       	cpc	r25, r18
    1276:	34 f4       	brge	.+12     	; 0x1284 <task_motionControl+0x3a8>
    1278:	8c e5       	ldi	r24, 0x5C	; 92
    127a:	9e ef       	ldi	r25, 0xFE	; 254
    127c:	90 93 b4 01 	sts	0x01B4, r25
    1280:	80 93 b3 01 	sts	0x01B3, r24
			if(mleft_speed == 0 && mleft_des_speed == 0)
    1284:	80 91 bb 01 	lds	r24, 0x01BB
    1288:	90 91 bc 01 	lds	r25, 0x01BC
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	51 f4       	brne	.+20     	; 0x12a4 <task_motionControl+0x3c8>
    1290:	80 91 a9 01 	lds	r24, 0x01A9
    1294:	90 91 aa 01 	lds	r25, 0x01AA
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	21 f4       	brne	.+8      	; 0x12a4 <task_motionControl+0x3c8>
				left_i = 0;
    129c:	10 92 b4 01 	sts	0x01B4, r1
    12a0:	10 92 b3 01 	sts	0x01B3, r1
			mleft_power = left_i / 2; 
    12a4:	80 91 b3 01 	lds	r24, 0x01B3
    12a8:	90 91 b4 01 	lds	r25, 0x01B4
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	4d 81       	ldd	r20, Y+5	; 0x05
    12b2:	5e 81       	ldd	r21, Y+6	; 0x06
    12b4:	55 23       	and	r21, r21
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <task_motionControl+0x3e6>
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	8d 81       	ldd	r24, Y+5	; 0x05
    12c4:	9e 81       	ldd	r25, Y+6	; 0x06
    12c6:	95 95       	asr	r25
    12c8:	87 95       	ror	r24
    12ca:	90 93 ba 01 	sts	0x01BA, r25
    12ce:	80 93 b9 01 	sts	0x01B9, r24
			if(mleft_power > 210) mleft_power = 210;
    12d2:	80 91 b9 01 	lds	r24, 0x01B9
    12d6:	90 91 ba 01 	lds	r25, 0x01BA
    12da:	83 3d       	cpi	r24, 0xD3	; 211
    12dc:	91 05       	cpc	r25, r1
    12de:	34 f0       	brlt	.+12     	; 0x12ec <task_motionControl+0x410>
    12e0:	82 ed       	ldi	r24, 0xD2	; 210
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	90 93 ba 01 	sts	0x01BA, r25
    12e8:	80 93 b9 01 	sts	0x01B9, r24
			if(mleft_power < 0) mleft_power = 0;
    12ec:	80 91 b9 01 	lds	r24, 0x01B9
    12f0:	90 91 ba 01 	lds	r25, 0x01BA
    12f4:	99 23       	and	r25, r25
    12f6:	24 f4       	brge	.+8      	; 0x1300 <task_motionControl+0x424>
    12f8:	10 92 ba 01 	sts	0x01BA, r1
    12fc:	10 92 b9 01 	sts	0x01B9, r1
			
			// Right motor speed control:
			int16_t error_right = mright_des_speed - mright_speed;
    1300:	20 91 a7 01 	lds	r18, 0x01A7
    1304:	30 91 a8 01 	lds	r19, 0x01A8
    1308:	80 91 fd 01 	lds	r24, 0x01FD
    130c:	90 91 fe 01 	lds	r25, 0x01FE
    1310:	a9 01       	movw	r20, r18
    1312:	48 1b       	sub	r20, r24
    1314:	59 0b       	sbc	r21, r25
    1316:	ca 01       	movw	r24, r20
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
			right_i = right_i + error_right;
    131c:	20 91 ee 01 	lds	r18, 0x01EE
    1320:	30 91 ef 01 	lds	r19, 0x01EF
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	90 93 ef 01 	sts	0x01EF, r25
    1330:	80 93 ee 01 	sts	0x01EE, r24
			if(right_i > MC_RIGHT_IMAX) right_i = MC_RIGHT_IMAX;
    1334:	80 91 ee 01 	lds	r24, 0x01EE
    1338:	90 91 ef 01 	lds	r25, 0x01EF
    133c:	51 e0       	ldi	r21, 0x01	; 1
    133e:	85 3a       	cpi	r24, 0xA5	; 165
    1340:	95 07       	cpc	r25, r21
    1342:	34 f0       	brlt	.+12     	; 0x1350 <task_motionControl+0x474>
    1344:	84 ea       	ldi	r24, 0xA4	; 164
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	90 93 ef 01 	sts	0x01EF, r25
    134c:	80 93 ee 01 	sts	0x01EE, r24
			if(right_i < MC_RIGHT_IMIN) right_i = MC_RIGHT_IMIN;
    1350:	80 91 ee 01 	lds	r24, 0x01EE
    1354:	90 91 ef 01 	lds	r25, 0x01EF
    1358:	2e ef       	ldi	r18, 0xFE	; 254
    135a:	8c 35       	cpi	r24, 0x5C	; 92
    135c:	92 07       	cpc	r25, r18
    135e:	34 f4       	brge	.+12     	; 0x136c <task_motionControl+0x490>
    1360:	8c e5       	ldi	r24, 0x5C	; 92
    1362:	9e ef       	ldi	r25, 0xFE	; 254
    1364:	90 93 ef 01 	sts	0x01EF, r25
    1368:	80 93 ee 01 	sts	0x01EE, r24
			if(mright_speed == 0 && mright_des_speed == 0)
    136c:	80 91 fd 01 	lds	r24, 0x01FD
    1370:	90 91 fe 01 	lds	r25, 0x01FE
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	51 f4       	brne	.+20     	; 0x138c <task_motionControl+0x4b0>
    1378:	80 91 a7 01 	lds	r24, 0x01A7
    137c:	90 91 a8 01 	lds	r25, 0x01A8
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	21 f4       	brne	.+8      	; 0x138c <task_motionControl+0x4b0>
				right_i = 0;
    1384:	10 92 ef 01 	sts	0x01EF, r1
    1388:	10 92 ee 01 	sts	0x01EE, r1
			mright_power = right_i / 2;
    138c:	80 91 ee 01 	lds	r24, 0x01EE
    1390:	90 91 ef 01 	lds	r25, 0x01EF
    1394:	98 87       	std	Y+8, r25	; 0x08
    1396:	8f 83       	std	Y+7, r24	; 0x07
    1398:	4f 81       	ldd	r20, Y+7	; 0x07
    139a:	58 85       	ldd	r21, Y+8	; 0x08
    139c:	55 23       	and	r21, r21
    139e:	2c f4       	brge	.+10     	; 0x13aa <task_motionControl+0x4ce>
    13a0:	8f 81       	ldd	r24, Y+7	; 0x07
    13a2:	98 85       	ldd	r25, Y+8	; 0x08
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	98 87       	std	Y+8, r25	; 0x08
    13a8:	8f 83       	std	Y+7, r24	; 0x07
    13aa:	8f 81       	ldd	r24, Y+7	; 0x07
    13ac:	98 85       	ldd	r25, Y+8	; 0x08
    13ae:	95 95       	asr	r25
    13b0:	87 95       	ror	r24
    13b2:	90 93 ca 01 	sts	0x01CA, r25
    13b6:	80 93 c9 01 	sts	0x01C9, r24
			if(mright_power > 210) mright_power = 210;
    13ba:	80 91 c9 01 	lds	r24, 0x01C9
    13be:	90 91 ca 01 	lds	r25, 0x01CA
    13c2:	83 3d       	cpi	r24, 0xD3	; 211
    13c4:	91 05       	cpc	r25, r1
    13c6:	34 f0       	brlt	.+12     	; 0x13d4 <task_motionControl+0x4f8>
    13c8:	82 ed       	ldi	r24, 0xD2	; 210
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	90 93 ca 01 	sts	0x01CA, r25
    13d0:	80 93 c9 01 	sts	0x01C9, r24
			if(mright_power < 0) mright_power = 0;
    13d4:	80 91 c9 01 	lds	r24, 0x01C9
    13d8:	90 91 ca 01 	lds	r25, 0x01CA
    13dc:	99 23       	and	r25, r25
    13de:	54 f4       	brge	.+20     	; 0x13f4 <task_motionControl+0x518>
    13e0:	10 92 ca 01 	sts	0x01CA, r1
    13e4:	10 92 c9 01 	sts	0x01C9, r1
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <task_motionControl+0x518>
		}
		else
			overcurrent_timeout--;
    13ea:	80 91 e2 01 	lds	r24, 0x01E2
    13ee:	81 50       	subi	r24, 0x01	; 1
    13f0:	80 93 e2 01 	sts	0x01E2, r24
		motor_control = false;
    13f4:	10 92 b7 01 	sts	0x01B7, r1
	}
	
	// Call event handlers if necessary:
	if(motion_status_tmp != motion_status.byte)
    13f8:	90 91 96 01 	lds	r25, 0x0196
    13fc:	80 91 03 02 	lds	r24, 0x0203
    1400:	98 17       	cp	r25, r24
    1402:	49 f0       	breq	.+18     	; 0x1416 <task_motionControl+0x53a>
	{
		motion_status_tmp = motion_status.byte;
    1404:	80 91 96 01 	lds	r24, 0x0196
    1408:	80 93 03 02 	sts	0x0203, r24
		MOTIONCONTROL_stateChangedHandler();
    140c:	e0 91 64 00 	lds	r30, 0x0064
    1410:	f0 91 65 00 	lds	r31, 0x0065
    1414:	09 95       	icall
	}
}
    1416:	28 96       	adiw	r28, 0x08	; 8
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <moveAtSpeed>:
 * Also 200 leaves a bit room to the maximum possible PWM value when you 
 * put additional load onto the Robot or drive up a ramp etc.  
 *
 */
void moveAtSpeed(uint8_t desired_speed_left, uint8_t desired_speed_right)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <moveAtSpeed+0x6>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	6a 83       	std	Y+2, r22	; 0x02
	if(desired_speed_left > 200) desired_speed_left = 200; 
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	89 3c       	cpi	r24, 0xC9	; 201
    143a:	10 f0       	brcs	.+4      	; 0x1440 <moveAtSpeed+0x18>
    143c:	88 ec       	ldi	r24, 0xC8	; 200
    143e:	89 83       	std	Y+1, r24	; 0x01
	if(desired_speed_right > 200) desired_speed_right = 200;
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	89 3c       	cpi	r24, 0xC9	; 201
    1444:	10 f0       	brcs	.+4      	; 0x144a <moveAtSpeed+0x22>
    1446:	88 ec       	ldi	r24, 0xC8	; 200
    1448:	8a 83       	std	Y+2, r24	; 0x02
	mleft_des_speed = desired_speed_left;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	90 93 aa 01 	sts	0x01AA, r25
    1454:	80 93 a9 01 	sts	0x01A9, r24
	mright_des_speed = desired_speed_right;
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	90 93 a8 01 	sts	0x01A8, r25
    1462:	80 93 a7 01 	sts	0x01A7, r24
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <changeDirection>:
 * to the previours speed (if the robot was driving... ).  
 * This is done to increase motors and gears lifetime and to avoid hard cut changes.
 *
 */
void changeDirection(uint8_t dir)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <changeDirection+0x6>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <changeDirection+0x8>
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	89 83       	std	Y+1, r24	; 0x01
	drive_dir = dir;
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	80 93 78 01 	sts	0x0178, r24
	mleft_des_dir = (dir == BWD || dir == LEFT);
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	19 f0       	breq	.+6      	; 0x1492 <changeDirection+0x22>
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	29 f4       	brne	.+10     	; 0x149c <changeDirection+0x2c>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9d 83       	std	Y+5, r25	; 0x05
    1498:	8c 83       	std	Y+4, r24	; 0x04
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <changeDirection+0x30>
    149c:	1d 82       	std	Y+5, r1	; 0x05
    149e:	1c 82       	std	Y+4, r1	; 0x04
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	80 93 74 01 	sts	0x0174, r24
	mright_des_dir = (dir == BWD || dir == RIGHT);
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <changeDirection+0x42>
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	29 f4       	brne	.+10     	; 0x14bc <changeDirection+0x4c>
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	9b 83       	std	Y+3, r25	; 0x03
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <changeDirection+0x50>
    14bc:	1b 82       	std	Y+3, r1	; 0x03
    14be:	1a 82       	std	Y+2, r1	; 0x02
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	80 93 75 01 	sts	0x0175, r24
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <moveAtSpeedDirection>:

/**
 *
 */
void moveAtSpeedDirection(int16_t desired_speed_left, int16_t desired_speed_right)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	2a 97       	sbiw	r28, 0x0a	; 10
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	7e 83       	std	Y+6, r23	; 0x06
    14f0:	6d 83       	std	Y+5, r22	; 0x05
	mleft_des_dir = desired_speed_left < 0;
    14f2:	1a 86       	std	Y+10, r1	; 0x0a
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	99 23       	and	r25, r25
    14fa:	14 f4       	brge	.+4      	; 0x1500 <moveAtSpeedDirection+0x2a>
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	8a 87       	std	Y+10, r24	; 0x0a
    1500:	8a 85       	ldd	r24, Y+10	; 0x0a
    1502:	80 93 74 01 	sts	0x0174, r24
	mright_des_dir = desired_speed_right < 0;
    1506:	19 86       	std	Y+9, r1	; 0x09
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	99 23       	and	r25, r25
    150e:	14 f4       	brge	.+4      	; 0x1514 <moveAtSpeedDirection+0x3e>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	89 87       	std	Y+9, r24	; 0x09
    1514:	89 85       	ldd	r24, Y+9	; 0x09
    1516:	80 93 75 01 	sts	0x0175, r24
  
  //drive_dir = ;  muss ich mir noch überlegen ist aber auch unwichtig TODO
  
  uint8_t speed_l_abs = desired_speed_left > 0 ? (uint8_t)desired_speed_left : (uint8_t)(-desired_speed_left);
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	18 16       	cp	r1, r24
    1520:	19 06       	cpc	r1, r25
    1522:	1c f4       	brge	.+6      	; 0x152a <moveAtSpeedDirection+0x54>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	88 87       	std	Y+8, r24	; 0x08
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <moveAtSpeedDirection+0x5a>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	81 95       	neg	r24
    152e:	88 87       	std	Y+8, r24	; 0x08
    1530:	88 85       	ldd	r24, Y+8	; 0x08
    1532:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t speed_r_abs = desired_speed_left > 0 ? (uint8_t)desired_speed_right : (uint8_t)(-desired_speed_right);
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	18 16       	cp	r1, r24
    153a:	19 06       	cpc	r1, r25
    153c:	1c f4       	brge	.+6      	; 0x1544 <moveAtSpeedDirection+0x6e>
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	8f 83       	std	Y+7, r24	; 0x07
    1542:	03 c0       	rjmp	.+6      	; 0x154a <moveAtSpeedDirection+0x74>
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	81 95       	neg	r24
    1548:	8f 83       	std	Y+7, r24	; 0x07
    154a:	8f 81       	ldd	r24, Y+7	; 0x07
    154c:	89 83       	std	Y+1, r24	; 0x01
  moveAtSpeed(speed_l_abs, speed_r_abs);
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	69 81       	ldd	r22, Y+1	; 0x01
    1552:	0e 94 14 0a 	call	0x1428	; 0x1428 <moveAtSpeed>
}
    1556:	2a 96       	adiw	r28, 0x0a	; 10
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <isMovementComplete>:
/**
 * You can use this function to check if there is any movement going on or if
 * every operation like moving a specific distance or rotating has been finished. 
 */
uint8_t isMovementComplete(void)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <isMovementComplete+0x6>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
	return !(motion_status.move_L || motion_status.move_R);
    1572:	80 91 96 01 	lds	r24, 0x0196
    1576:	81 70       	andi	r24, 0x01	; 1
    1578:	88 23       	and	r24, r24
    157a:	51 f4       	brne	.+20     	; 0x1590 <isMovementComplete+0x28>
    157c:	80 91 96 01 	lds	r24, 0x0196
    1580:	82 70       	andi	r24, 0x02	; 2
    1582:	88 23       	and	r24, r24
    1584:	29 f4       	brne	.+10     	; 0x1590 <isMovementComplete+0x28>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <isMovementComplete+0x2c>
    1590:	1a 82       	std	Y+2, r1	; 0x02
    1592:	19 82       	std	Y+1, r1	; 0x01
    1594:	89 81       	ldd	r24, Y+1	; 0x01
}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <stop>:
 * any motion at all, you can stop the robot with this function. 
 * This can be used for example if the Bumpers detected and obstacle during
 * movement...
 */
void stop(void)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	mleft_des_speed = 0;
    15a8:	10 92 aa 01 	sts	0x01AA, r1
    15ac:	10 92 a9 01 	sts	0x01A9, r1
	mright_des_speed = 0;
    15b0:	10 92 a8 01 	sts	0x01A8, r1
    15b4:	10 92 a7 01 	sts	0x01A7, r1
	left_i = 0;
    15b8:	10 92 b4 01 	sts	0x01B4, r1
    15bc:	10 92 b3 01 	sts	0x01B3, r1
	right_i = 0;
    15c0:	10 92 ef 01 	sts	0x01EF, r1
    15c4:	10 92 ee 01 	sts	0x01EE, r1
	motion_status.move_L = false;
    15c8:	80 91 96 01 	lds	r24, 0x0196
    15cc:	8e 7f       	andi	r24, 0xFE	; 254
    15ce:	80 93 96 01 	sts	0x0196, r24
	motion_status.move_R = false;
    15d2:	80 91 96 01 	lds	r24, 0x0196
    15d6:	8d 7f       	andi	r24, 0xFD	; 253
    15d8:	80 93 96 01 	sts	0x0196, r24
	motion_status_tmp = motion_status.byte;
    15dc:	80 91 96 01 	lds	r24, 0x0196
    15e0:	80 93 03 02 	sts	0x0203, r24
	MOTIONCONTROL_stateChangedHandler();
    15e4:	e0 91 64 00 	lds	r30, 0x0064
    15e8:	f0 91 65 00 	lds	r31, 0x0065
    15ec:	09 95       	icall
}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <move>:
 * If you need faster reaction rather than precision then you should implement 
 * your own routine and set the distance a bit lower... 
 *
 */
void move(uint8_t desired_speed, uint8_t dir, uint16_t distance, uint8_t blocking)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <move+0x6>
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <move+0x8>
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	6a 83       	std	Y+2, r22	; 0x02
    1606:	5c 83       	std	Y+4, r21	; 0x04
    1608:	4b 83       	std	Y+3, r20	; 0x03
    160a:	2d 83       	std	Y+5, r18	; 0x05
	motion_status.move_L = true;
    160c:	80 91 96 01 	lds	r24, 0x0196
    1610:	81 60       	ori	r24, 0x01	; 1
    1612:	80 93 96 01 	sts	0x0196, r24
	motion_status.move_R = true;
    1616:	80 91 96 01 	lds	r24, 0x0196
    161a:	82 60       	ori	r24, 0x02	; 2
    161c:	80 93 96 01 	sts	0x0196, r24
	preDecelerate_L = 0;
    1620:	10 92 f4 01 	sts	0x01F4, r1
    1624:	10 92 f3 01 	sts	0x01F3, r1
	preDecelerate_R = 0;
    1628:	10 92 be 01 	sts	0x01BE, r1
    162c:	10 92 bd 01 	sts	0x01BD, r1
	if(desired_speed > 22) {
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	87 31       	cpi	r24, 0x17	; 23
    1634:	d0 f0       	brcs	.+52     	; 0x166a <move+0x76>
		preDecelerate_L = distance - (20+(desired_speed*2));
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	86 ef       	ldi	r24, 0xF6	; 246
    163e:	9f ef       	ldi	r25, 0xFF	; 255
    1640:	82 1b       	sub	r24, r18
    1642:	93 0b       	sbc	r25, r19
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	9c 01       	movw	r18, r24
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	82 0f       	add	r24, r18
    1650:	93 1f       	adc	r25, r19
    1652:	90 93 f4 01 	sts	0x01F4, r25
    1656:	80 93 f3 01 	sts	0x01F3, r24
		preDecelerate_R = preDecelerate_L;
    165a:	80 91 f3 01 	lds	r24, 0x01F3
    165e:	90 91 f4 01 	lds	r25, 0x01F4
    1662:	90 93 be 01 	sts	0x01BE, r25
    1666:	80 93 bd 01 	sts	0x01BD, r24
	}
	preStop_L = distance - 2;
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	02 97       	sbiw	r24, 0x02	; 2
    1670:	90 93 c8 01 	sts	0x01C8, r25
    1674:	80 93 c7 01 	sts	0x01C7, r24
	preStop_R = preStop_L;
    1678:	80 91 c7 01 	lds	r24, 0x01C7
    167c:	90 91 c8 01 	lds	r25, 0x01C8
    1680:	90 93 a6 01 	sts	0x01A6, r25
    1684:	80 93 a5 01 	sts	0x01A5, r24
	if(distance < 40) {
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	88 32       	cpi	r24, 0x28	; 40
    168e:	91 05       	cpc	r25, r1
    1690:	00 f5       	brcc	.+64     	; 0x16d2 <move+0xde>
		distance = 40; 
    1692:	88 e2       	ldi	r24, 0x28	; 40
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
		preStop_L = 20;
    169a:	84 e1       	ldi	r24, 0x14	; 20
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	90 93 c8 01 	sts	0x01C8, r25
    16a2:	80 93 c7 01 	sts	0x01C7, r24
		preStop_R = preStop_L;
    16a6:	80 91 c7 01 	lds	r24, 0x01C7
    16aa:	90 91 c8 01 	lds	r25, 0x01C8
    16ae:	90 93 a6 01 	sts	0x01A6, r25
    16b2:	80 93 a5 01 	sts	0x01A5, r24
		preDecelerate_L = 10;
    16b6:	8a e0       	ldi	r24, 0x0A	; 10
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	90 93 f4 01 	sts	0x01F4, r25
    16be:	80 93 f3 01 	sts	0x01F3, r24
		preDecelerate_R = preDecelerate_L;
    16c2:	80 91 f3 01 	lds	r24, 0x01F3
    16c6:	90 91 f4 01 	lds	r25, 0x01F4
    16ca:	90 93 be 01 	sts	0x01BE, r25
    16ce:	80 93 bd 01 	sts	0x01BD, r24
	}
	if(distance < 400 && desired_speed > 40) {
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	21 e0       	ldi	r18, 0x01	; 1
    16d8:	80 39       	cpi	r24, 0x90	; 144
    16da:	92 07       	cpc	r25, r18
    16dc:	e0 f4       	brcc	.+56     	; 0x1716 <move+0x122>
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	89 32       	cpi	r24, 0x29	; 41
    16e2:	c8 f0       	brcs	.+50     	; 0x1716 <move+0x122>
		desired_speed = 40; 
    16e4:	88 e2       	ldi	r24, 0x28	; 40
    16e6:	89 83       	std	Y+1, r24	; 0x01
		preDecelerate_L = distance - (distance/4);
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	9c 01       	movw	r18, r24
    16ee:	36 95       	lsr	r19
    16f0:	27 95       	ror	r18
    16f2:	36 95       	lsr	r19
    16f4:	27 95       	ror	r18
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	82 1b       	sub	r24, r18
    16fc:	93 0b       	sbc	r25, r19
    16fe:	90 93 f4 01 	sts	0x01F4, r25
    1702:	80 93 f3 01 	sts	0x01F3, r24
		preDecelerate_R = preDecelerate_L;
    1706:	80 91 f3 01 	lds	r24, 0x01F3
    170a:	90 91 f4 01 	lds	r25, 0x01F4
    170e:	90 93 be 01 	sts	0x01BE, r25
    1712:	80 93 bd 01 	sts	0x01BD, r24
	}
    mleft_dist = 0; 
    1716:	10 92 00 02 	sts	0x0200, r1
    171a:	10 92 ff 01 	sts	0x01FF, r1
	mright_dist = 0;
    171e:	10 92 f2 01 	sts	0x01F2, r1
    1722:	10 92 f1 01 	sts	0x01F1, r1
	moveAtSpeed(desired_speed,desired_speed);
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	69 81       	ldd	r22, Y+1	; 0x01
    172a:	0e 94 14 0a 	call	0x1428	; 0x1428 <moveAtSpeed>
	changeDirection(dir);
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	0e 94 38 0a 	call	0x1470	; 0x1470 <changeDirection>
	
	distanceToMove_L = distance;
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	9c 81       	ldd	r25, Y+4	; 0x04
    1738:	90 93 d0 01 	sts	0x01D0, r25
    173c:	80 93 cf 01 	sts	0x01CF, r24
	distanceToMove_R = distance;
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	90 93 b1 01 	sts	0x01B1, r25
    1748:	80 93 b0 01 	sts	0x01B0, r24

	motion_status_tmp = motion_status.byte;
    174c:	80 91 96 01 	lds	r24, 0x0196
    1750:	80 93 03 02 	sts	0x0203, r24
	
	motion_status_tmp = motion_status.byte;
    1754:	80 91 96 01 	lds	r24, 0x0196
    1758:	80 93 03 02 	sts	0x0203, r24
	MOTIONCONTROL_stateChangedHandler();
    175c:	e0 91 64 00 	lds	r30, 0x0064
    1760:	f0 91 65 00 	lds	r31, 0x0065
    1764:	09 95       	icall
	
	if(blocking)
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	88 23       	and	r24, r24
    176a:	39 f0       	breq	.+14     	; 0x177a <move+0x186>
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <move+0x17e>
		while(!isMovementComplete())
			task_RP6System();
    176e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <task_RP6System>
	
	motion_status_tmp = motion_status.byte;
	MOTIONCONTROL_stateChangedHandler();
	
	if(blocking)
		while(!isMovementComplete())
    1772:	0e 94 b4 0a 	call	0x1568	; 0x1568 <isMovementComplete>
    1776:	88 23       	and	r24, r24
    1778:	d1 f3       	breq	.-12     	; 0x176e <move+0x17a>
			task_RP6System();
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <rotate>:
 * This means that you can use external sensors for rotation in order to make it
 * more accurate. For example an electronic compass. 
 * 
 */
void rotate(uint8_t desired_speed, uint8_t dir, uint16_t angle, uint8_t blocking)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	27 97       	sbiw	r28, 0x07	; 7
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	8b 83       	std	Y+3, r24	; 0x03
    17a0:	6c 83       	std	Y+4, r22	; 0x04
    17a2:	5e 83       	std	Y+6, r21	; 0x06
    17a4:	4d 83       	std	Y+5, r20	; 0x05
    17a6:	2f 83       	std	Y+7, r18	; 0x07
	motion_status.move_L = true;
    17a8:	80 91 96 01 	lds	r24, 0x0196
    17ac:	81 60       	ori	r24, 0x01	; 1
    17ae:	80 93 96 01 	sts	0x0196, r24
	motion_status.move_R = true;
    17b2:	80 91 96 01 	lds	r24, 0x0196
    17b6:	82 60       	ori	r24, 0x02	; 2
    17b8:	80 93 96 01 	sts	0x0196, r24
	uint16_t distance = (uint16_t) (((uint32_t)(ROTATION_FACTOR) * (uint16_t)angle)/100);
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	cc 01       	movw	r24, r24
    17c2:	a0 e0       	ldi	r26, 0x00	; 0
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	20 eb       	ldi	r18, 0xB0	; 176
    17c8:	32 e0       	ldi	r19, 0x02	; 2
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__mulsi3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	24 e6       	ldi	r18, 0x64	; 100
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__udivmodsi4>
    17ea:	da 01       	movw	r26, r20
    17ec:	c9 01       	movw	r24, r18
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
	preDecelerate_L = distance - 100;
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
    17f6:	84 56       	subi	r24, 0x64	; 100
    17f8:	90 40       	sbci	r25, 0x00	; 0
    17fa:	90 93 f4 01 	sts	0x01F4, r25
    17fe:	80 93 f3 01 	sts	0x01F3, r24
	preDecelerate_R = distance - 100;
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	84 56       	subi	r24, 0x64	; 100
    1808:	90 40       	sbci	r25, 0x00	; 0
    180a:	90 93 be 01 	sts	0x01BE, r25
    180e:	80 93 bd 01 	sts	0x01BD, r24
	preStop_L = distance;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	90 93 c8 01 	sts	0x01C8, r25
    181a:	80 93 c7 01 	sts	0x01C7, r24
	preStop_R = distance;
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	90 93 a6 01 	sts	0x01A6, r25
    1826:	80 93 a5 01 	sts	0x01A5, r24
	if(distance < 40) {
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	88 32       	cpi	r24, 0x28	; 40
    1830:	91 05       	cpc	r25, r1
    1832:	e0 f4       	brcc	.+56     	; 0x186c <rotate+0xe2>
		distance = 40; 
    1834:	88 e2       	ldi	r24, 0x28	; 40
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
		preStop_L = 20;
    183c:	84 e1       	ldi	r24, 0x14	; 20
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	90 93 c8 01 	sts	0x01C8, r25
    1844:	80 93 c7 01 	sts	0x01C7, r24
		preStop_R = 20;
    1848:	84 e1       	ldi	r24, 0x14	; 20
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	90 93 a6 01 	sts	0x01A6, r25
    1850:	80 93 a5 01 	sts	0x01A5, r24
		preDecelerate_L = 10;
    1854:	8a e0       	ldi	r24, 0x0A	; 10
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	90 93 f4 01 	sts	0x01F4, r25
    185c:	80 93 f3 01 	sts	0x01F3, r24
		preDecelerate_R = 10;
    1860:	8a e0       	ldi	r24, 0x0A	; 10
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	90 93 be 01 	sts	0x01BE, r25
    1868:	80 93 bd 01 	sts	0x01BD, r24
	}
	moveAtSpeed(desired_speed,desired_speed);
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	6b 81       	ldd	r22, Y+3	; 0x03
    1870:	0e 94 14 0a 	call	0x1428	; 0x1428 <moveAtSpeed>
	changeDirection(dir);
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	0e 94 38 0a 	call	0x1470	; 0x1470 <changeDirection>
	
    mleft_dist = 0; 
    187a:	10 92 00 02 	sts	0x0200, r1
    187e:	10 92 ff 01 	sts	0x01FF, r1
	mright_dist = 0;
    1882:	10 92 f2 01 	sts	0x01F2, r1
    1886:	10 92 f1 01 	sts	0x01F1, r1
	distanceToMove_L = distance;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	90 93 d0 01 	sts	0x01D0, r25
    1892:	80 93 cf 01 	sts	0x01CF, r24
	distanceToMove_R = distance;
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	90 93 b1 01 	sts	0x01B1, r25
    189e:	80 93 b0 01 	sts	0x01B0, r24
	
	motion_status_tmp = motion_status.byte;
    18a2:	80 91 96 01 	lds	r24, 0x0196
    18a6:	80 93 03 02 	sts	0x0203, r24
	MOTIONCONTROL_stateChangedHandler();
    18aa:	e0 91 64 00 	lds	r30, 0x0064
    18ae:	f0 91 65 00 	lds	r31, 0x0065
    18b2:	09 95       	icall
	if(blocking)
    18b4:	8f 81       	ldd	r24, Y+7	; 0x07
    18b6:	88 23       	and	r24, r24
    18b8:	39 f0       	breq	.+14     	; 0x18c8 <rotate+0x13e>
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <rotate+0x136>
		while(!isMovementComplete())
			task_RP6System();
    18bc:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <task_RP6System>
	distanceToMove_R = distance;
	
	motion_status_tmp = motion_status.byte;
	MOTIONCONTROL_stateChangedHandler();
	if(blocking)
		while(!isMovementComplete())
    18c0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <isMovementComplete>
    18c4:	88 23       	and	r24, r24
    18c6:	d1 f3       	breq	.-12     	; 0x18bc <rotate+0x132>
			task_RP6System();
}
    18c8:	27 96       	adiw	r28, 0x07	; 7
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <setMotorPower>:
 * task_motionControl!  This will not work!
 * -------------------------------------------------------------
 *
 */
void setMotorPower(uint8_t left_power, uint8_t right_power)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <setMotorPower+0x6>
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	6a 83       	std	Y+2, r22	; 0x02
	if(left_power > 210) left_power = 210;
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	83 3d       	cpi	r24, 0xD3	; 211
    18ec:	10 f0       	brcs	.+4      	; 0x18f2 <setMotorPower+0x18>
    18ee:	82 ed       	ldi	r24, 0xD2	; 210
    18f0:	89 83       	std	Y+1, r24	; 0x01
	if(right_power > 210) right_power = 210;
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	83 3d       	cpi	r24, 0xD3	; 211
    18f6:	10 f0       	brcs	.+4      	; 0x18fc <setMotorPower+0x22>
    18f8:	82 ed       	ldi	r24, 0xD2	; 210
    18fa:	8a 83       	std	Y+2, r24	; 0x02
	mright_power = right_power;
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	90 93 ca 01 	sts	0x01CA, r25
    1906:	80 93 c9 01 	sts	0x01C9, r24
	mleft_power = left_power;
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	90 93 ba 01 	sts	0x01BA, r25
    1914:	80 93 b9 01 	sts	0x01B9, r24
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <setMotorDir>:
 *			setMotorDir(FWD,BWD); // Rotate left
 *			setMotorDir(BWD,BWD); // Move backwards
 *
 */
void setMotorDir(uint8_t left_dir, uint8_t right_dir)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <setMotorDir+0x6>
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	6a 83       	std	Y+2, r22	; 0x02
	mleft_dir = left_dir;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	80 93 76 01 	sts	0x0176, r24
	mright_dir = right_dir;
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	80 93 77 01 	sts	0x0177, r24
	mleft_des_dir = left_dir;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	80 93 74 01 	sts	0x0174, r24
	mright_des_dir = right_dir;
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	80 93 75 01 	sts	0x0175, r24
	if(left_dir)
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	88 23       	and	r24, r24
    194c:	41 f0       	breq	.+16     	; 0x195e <setMotorDir+0x3c>
		PORTC |= DIR_L;
    194e:	a5 e3       	ldi	r26, 0x35	; 53
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e5 e3       	ldi	r30, 0x35	; 53
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	84 60       	ori	r24, 0x04	; 4
    195a:	8c 93       	st	X, r24
    195c:	07 c0       	rjmp	.+14     	; 0x196c <setMotorDir+0x4a>
	else
		PORTC &= ~DIR_L;
    195e:	a5 e3       	ldi	r26, 0x35	; 53
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e5 e3       	ldi	r30, 0x35	; 53
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8b 7f       	andi	r24, 0xFB	; 251
    196a:	8c 93       	st	X, r24
	if(right_dir)
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	88 23       	and	r24, r24
    1970:	41 f0       	breq	.+16     	; 0x1982 <setMotorDir+0x60>
		PORTC |= DIR_R;
    1972:	a5 e3       	ldi	r26, 0x35	; 53
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e5 e3       	ldi	r30, 0x35	; 53
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	88 60       	ori	r24, 0x08	; 8
    197e:	8c 93       	st	X, r24
    1980:	07 c0       	rjmp	.+14     	; 0x1990 <setMotorDir+0x6e>
	else
		PORTC &= ~DIR_R;
    1982:	a5 e3       	ldi	r26, 0x35	; 53
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	87 7f       	andi	r24, 0xF7	; 247
    198e:	8c 93       	st	X, r24
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <IRCOMM_sendRC5>:
 *  // This is another transmission with device address 30 and 60 as data
 *  // with togglebit NOT set.
 *  
 */
void IRCOMM_sendRC5(uint8_t adr, uint8_t data)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <IRCOMM_sendRC5+0x6>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <IRCOMM_sendRC5+0x1e>
	while(ircomm_send){TIMSK |= (1 << OCIE2);}
    19aa:	a9 e5       	ldi	r26, 0x59	; 89
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e9 e5       	ldi	r30, 0x59	; 89
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	80 68       	ori	r24, 0x80	; 128
    19b6:	8c 93       	st	X, r24
    19b8:	80 91 ae 01 	lds	r24, 0x01AE
    19bc:	88 23       	and	r24, r24
    19be:	a9 f7       	brne	.-22     	; 0x19aa <IRCOMM_sendRC5+0x10>
	// Here we create the RC5 data packet:
	ircomm_data_tmp = 0x3000 | (((uint16_t)(adr & 0x3F)) << 6) | (((uint16_t)(data & 0x3F)));
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	8f 73       	andi	r24, 0x3F	; 63
    19c8:	90 70       	andi	r25, 0x00	; 0
    19ca:	9c 01       	movw	r18, r24
    19cc:	00 24       	eor	r0, r0
    19ce:	36 95       	lsr	r19
    19d0:	27 95       	ror	r18
    19d2:	07 94       	ror	r0
    19d4:	36 95       	lsr	r19
    19d6:	27 95       	ror	r18
    19d8:	07 94       	ror	r0
    19da:	32 2f       	mov	r19, r18
    19dc:	20 2d       	mov	r18, r0
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	88 2f       	mov	r24, r24
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	8f 73       	andi	r24, 0x3F	; 63
    19e6:	90 70       	andi	r25, 0x00	; 0
    19e8:	82 2b       	or	r24, r18
    19ea:	93 2b       	or	r25, r19
    19ec:	90 63       	ori	r25, 0x30	; 48
    19ee:	90 93 ce 01 	sts	0x01CE, r25
    19f2:	80 93 cd 01 	sts	0x01CD, r24
	sysStatACS.ircomm_transmit = true;
    19f6:	80 91 ad 01 	lds	r24, 0x01AD
    19fa:	80 64       	ori	r24, 0x40	; 64
    19fc:	80 93 ad 01 	sts	0x01AD, r24
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <__vector_4>:
 * NEVER try to control the IRCOMM by your own routines if you do not
 * know what you are doing!
 *
 */
ISR (TIMER2_COMP_vect)
{
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	8f 93       	push	r24
    1a16:	9f 93       	push	r25
    1a18:	af 93       	push	r26
    1a1a:	bf 93       	push	r27
    1a1c:	ef 93       	push	r30
    1a1e:	ff 93       	push	r31
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	static uint8_t ircomm_pulse;
	if(acs_state < 2) { // If ACS is not active, perform IRCOMM transmissions
    1a28:	80 91 66 00 	lds	r24, 0x0066
    1a2c:	82 30       	cpi	r24, 0x02	; 2
    1a2e:	08 f0       	brcs	.+2      	; 0x1a32 <__vector_4+0x28>
    1a30:	65 c0       	rjmp	.+202    	; 0x1afc <__vector_4+0xf2>
		if(ircomm_pulse) { // Do we have IR pulses to send?
    1a32:	80 91 7a 01 	lds	r24, 0x017A
    1a36:	88 23       	and	r24, r24
    1a38:	d9 f1       	breq	.+118    	; 0x1ab0 <__vector_4+0xa6>
			if(ircomm_pulse < 60) { // Bi-Phase encoding...
    1a3a:	80 91 7a 01 	lds	r24, 0x017A
    1a3e:	8c 33       	cpi	r24, 0x3C	; 60
    1a40:	c8 f4       	brcc	.+50     	; 0x1a74 <__vector_4+0x6a>
				if(ircomm_data & 0x4000) // check current bit
    1a42:	80 91 e7 01 	lds	r24, 0x01E7
    1a46:	90 91 e8 01 	lds	r25, 0x01E8
    1a4a:	80 70       	andi	r24, 0x00	; 0
    1a4c:	90 74       	andi	r25, 0x40	; 64
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	49 f0       	breq	.+18     	; 0x1a64 <__vector_4+0x5a>
					PORTD ^= (1<<PIND7); // Toggle IRCOMM port
    1a52:	a2 e3       	ldi	r26, 0x32	; 50
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e2 e3       	ldi	r30, 0x32	; 50
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	90 81       	ld	r25, Z
    1a5c:	80 e8       	ldi	r24, 0x80	; 128
    1a5e:	89 27       	eor	r24, r25
    1a60:	8c 93       	st	X, r24
    1a62:	20 c0       	rjmp	.+64     	; 0x1aa4 <__vector_4+0x9a>
				else
					PORTD &= ~(1<<PIND7); // deactivate IRCOMM port
    1a64:	a2 e3       	ldi	r26, 0x32	; 50
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e2 e3       	ldi	r30, 0x32	; 50
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8f 77       	andi	r24, 0x7F	; 127
    1a70:	8c 93       	st	X, r24
    1a72:	18 c0       	rjmp	.+48     	; 0x1aa4 <__vector_4+0x9a>
			}
			else if(ircomm_data & 0x4000) // The same as above, but the other way round:
    1a74:	80 91 e7 01 	lds	r24, 0x01E7
    1a78:	90 91 e8 01 	lds	r25, 0x01E8
    1a7c:	80 70       	andi	r24, 0x00	; 0
    1a7e:	90 74       	andi	r25, 0x40	; 64
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	41 f0       	breq	.+16     	; 0x1a94 <__vector_4+0x8a>
				PORTD &= ~(1<<PIND7); // deactivate IRCOMM port
    1a84:	a2 e3       	ldi	r26, 0x32	; 50
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e2 e3       	ldi	r30, 0x32	; 50
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8f 77       	andi	r24, 0x7F	; 127
    1a90:	8c 93       	st	X, r24
    1a92:	08 c0       	rjmp	.+16     	; 0x1aa4 <__vector_4+0x9a>
			else
				PORTD ^= (1<<PIND7); // Toggle IRCOMM port
    1a94:	a2 e3       	ldi	r26, 0x32	; 50
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e2 e3       	ldi	r30, 0x32	; 50
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	90 81       	ld	r25, Z
    1a9e:	80 e8       	ldi	r24, 0x80	; 128
    1aa0:	89 27       	eor	r24, r25
    1aa2:	8c 93       	st	X, r24
			ircomm_pulse--;
    1aa4:	80 91 7a 01 	lds	r24, 0x017A
    1aa8:	81 50       	subi	r24, 0x01	; 1
    1aaa:	80 93 7a 01 	sts	0x017A, r24
    1aae:	54 c0       	rjmp	.+168    	; 0x1b58 <__vector_4+0x14e>
		}
		else if(ircomm_send) { // Do we still have data?
    1ab0:	80 91 ae 01 	lds	r24, 0x01AE
    1ab4:	88 23       	and	r24, r24
    1ab6:	d1 f0       	breq	.+52     	; 0x1aec <__vector_4+0xe2>
			PORTD &= ~(1<<PIND7);
    1ab8:	a2 e3       	ldi	r26, 0x32	; 50
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e2 e3       	ldi	r30, 0x32	; 50
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8f 77       	andi	r24, 0x7F	; 127
    1ac4:	8c 93       	st	X, r24
			ircomm_data <<= 1; // Next Bit!
    1ac6:	80 91 e7 01 	lds	r24, 0x01E7
    1aca:	90 91 e8 01 	lds	r25, 0x01E8
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	90 93 e8 01 	sts	0x01E8, r25
    1ad6:	80 93 e7 01 	sts	0x01E7, r24
			ircomm_pulse = 120;
    1ada:	88 e7       	ldi	r24, 0x78	; 120
    1adc:	80 93 7a 01 	sts	0x017A, r24
			ircomm_send--;
    1ae0:	80 91 ae 01 	lds	r24, 0x01AE
    1ae4:	81 50       	subi	r24, 0x01	; 1
    1ae6:	80 93 ae 01 	sts	0x01AE, r24
    1aea:	36 c0       	rjmp	.+108    	; 0x1b58 <__vector_4+0x14e>
		}
		else 
			PORTD &= ~(1<<PIND7); // no more pulses - IR LEDs off!
    1aec:	a2 e3       	ldi	r26, 0x32	; 50
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e2 e3       	ldi	r30, 0x32	; 50
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8f 77       	andi	r24, 0x7F	; 127
    1af8:	8c 93       	st	X, r24
    1afa:	2e c0       	rjmp	.+92     	; 0x1b58 <__vector_4+0x14e>
	}
	else if(acs_pulse) { // Send ACS IR pulses?
    1afc:	80 91 b2 01 	lds	r24, 0x01B2
    1b00:	88 23       	and	r24, r24
    1b02:	e1 f0       	breq	.+56     	; 0x1b3c <__vector_4+0x132>
		if(sysStatACS.channel == ACS_CHANNEL_LEFT) // which channel?
    1b04:	80 91 ad 01 	lds	r24, 0x01AD
    1b08:	81 70       	andi	r24, 0x01	; 1
    1b0a:	88 23       	and	r24, r24
    1b0c:	49 f4       	brne	.+18     	; 0x1b20 <__vector_4+0x116>
			PORTB ^= ACS_L; 
    1b0e:	a8 e3       	ldi	r26, 0x38	; 56
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e8 e3       	ldi	r30, 0x38	; 56
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	90 81       	ld	r25, Z
    1b18:	80 e4       	ldi	r24, 0x40	; 64
    1b1a:	89 27       	eor	r24, r25
    1b1c:	8c 93       	st	X, r24
    1b1e:	08 c0       	rjmp	.+16     	; 0x1b30 <__vector_4+0x126>
		else 			
			PORTC ^= ACS_R; 
    1b20:	a5 e3       	ldi	r26, 0x35	; 53
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e5 e3       	ldi	r30, 0x35	; 53
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	90 81       	ld	r25, Z
    1b2a:	80 e8       	ldi	r24, 0x80	; 128
    1b2c:	89 27       	eor	r24, r25
    1b2e:	8c 93       	st	X, r24
		acs_pulse--;
    1b30:	80 91 b2 01 	lds	r24, 0x01B2
    1b34:	81 50       	subi	r24, 0x01	; 1
    1b36:	80 93 b2 01 	sts	0x01B2, r24
    1b3a:	0e c0       	rjmp	.+28     	; 0x1b58 <__vector_4+0x14e>
	}
	else { // no more pulses - IR LEDs off!
		PORTB |= ACS_L;
    1b3c:	a8 e3       	ldi	r26, 0x38	; 56
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e8 e3       	ldi	r30, 0x38	; 56
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	80 64       	ori	r24, 0x40	; 64
    1b48:	8c 93       	st	X, r24
		PORTC |= ACS_R;
    1b4a:	a5 e3       	ldi	r26, 0x35	; 53
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e5 e3       	ldi	r30, 0x35	; 53
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	80 68       	ori	r24, 0x80	; 128
    1b56:	8c 93       	st	X, r24
	}
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	ff 91       	pop	r31
    1b5e:	ef 91       	pop	r30
    1b60:	bf 91       	pop	r27
    1b62:	af 91       	pop	r26
    1b64:	9f 91       	pop	r25
    1b66:	8f 91       	pop	r24
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	0f 90       	pop	r0
    1b6e:	1f 90       	pop	r1
    1b70:	18 95       	reti

00001b72 <__vector_3>:
/**
 * External Interrupt 2 ISR (ACS)
 * Detects ACS Events.
 */
ISR (INT2_vect)
{
    1b72:	1f 92       	push	r1
    1b74:	0f 92       	push	r0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	8f 93       	push	r24
    1b7e:	9f 93       	push	r25
    1b80:	ef 93       	push	r30
    1b82:	ff 93       	push	r31
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	0f 92       	push	r0
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
	if(acs_state == ACS_STATE_WAIT_LEFT || acs_state == ACS_STATE_WAIT_RIGHT)
    1b8e:	80 91 66 00 	lds	r24, 0x0066
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <__vector_3+0x2c>
    1b96:	80 91 66 00 	lds	r24, 0x0066
    1b9a:	86 30       	cpi	r24, 0x06	; 6
    1b9c:	c1 f4       	brne	.+48     	; 0x1bce <__vector_3+0x5c>
		if(!sysStatACS.detect_rc5 && sysStatACS.acs_go && !(PINB & ACS))
    1b9e:	80 91 ad 01 	lds	r24, 0x01AD
    1ba2:	80 71       	andi	r24, 0x10	; 16
    1ba4:	88 23       	and	r24, r24
    1ba6:	99 f4       	brne	.+38     	; 0x1bce <__vector_3+0x5c>
    1ba8:	80 91 ad 01 	lds	r24, 0x01AD
    1bac:	80 72       	andi	r24, 0x20	; 32
    1bae:	88 23       	and	r24, r24
    1bb0:	71 f0       	breq	.+28     	; 0x1bce <__vector_3+0x5c>
    1bb2:	e6 e3       	ldi	r30, 0x36	; 54
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	84 70       	andi	r24, 0x04	; 4
    1bbe:	90 70       	andi	r25, 0x00	; 0
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	29 f4       	brne	.+10     	; 0x1bce <__vector_3+0x5c>
			acs_event_counter++;
    1bc4:	80 91 02 02 	lds	r24, 0x0202
    1bc8:	8f 5f       	subi	r24, 0xFF	; 255
    1bca:	80 93 02 02 	sts	0x0202, r24
	sysStatACS.pin = (PINB & ACS);
    1bce:	e6 e3       	ldi	r30, 0x36	; 54
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 91 ad 01 	lds	r24, 0x01AD
    1bd8:	8d 7f       	andi	r24, 0xFD	; 253
    1bda:	80 93 ad 01 	sts	0x01AD, r24
}
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	ff 91       	pop	r31
    1be6:	ef 91       	pop	r30
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	0f 90       	pop	r0
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	0f 90       	pop	r0
    1bf2:	1f 90       	pop	r1
    1bf4:	18 95       	reti

00001bf6 <IRCOMM_RC5dataReady_DUMMY>:

// -------------------------------
// RC5 Data reception Handler:

void IRCOMM_RC5dataReady_DUMMY(RC5data_t rc5data){}
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <IRCOMM_RC5dataReady_DUMMY+0x6>
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <IRCOMM_setRC5DataReadyHandler>:
 * With this setup, the function receiveRC5Data would be called everytime
 * the IRCOMM receives a RC5 Data packet.
 * 
 */
void IRCOMM_setRC5DataReadyHandler(void (*rc5Handler)(RC5data_t rc5data)) 
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <IRCOMM_setRC5DataReadyHandler+0x6>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	IRCOMM_RC5dataReadyHandler = rc5Handler;
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	90 93 68 00 	sts	0x0068, r25
    1c24:	80 93 67 00 	sts	0x0067, r24
}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <ACS_stateChanged_DUMMY>:


// -------------------------------
// ACS State changed handler:

void ACS_stateChanged_DUMMY(void){}
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <ACS_setStateChangedHandler>:
 * has different status - e.g. if it suddenly detects and obstacle
 * OR if the obstacle moves out of the line of sight and ACS
 * reports "Way is free" again.
 */
void ACS_setStateChangedHandler(void (*acsHandler)(void)) 
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <ACS_setStateChangedHandler+0x6>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	ACS_stateChangedHandler = acsHandler;
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	90 93 6a 00 	sts	0x006A, r25
    1c56:	80 93 69 00 	sts	0x0069, r24
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <task_ACS>:
 *
 */
 

void task_ACS(void)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
 	static uint8_t acs_counter;
	static uint16_t acs_detect_timeout;
	if(acs_timer >= ACS_UPDATE_INTERVAL) { 
    1c78:	80 91 c5 01 	lds	r24, 0x01C5
    1c7c:	90 91 c6 01 	lds	r25, 0x01C6
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	91 05       	cpc	r25, r1
    1c84:	08 f4       	brcc	.+2      	; 0x1c88 <task_ACS+0x24>
    1c86:	4d c2       	rjmp	.+1178   	; 0x2122 <task_ACS+0x4be>
		if(!sysStatACS.detect_rc5) {    // Any RC5 reception detected?
    1c88:	80 91 ad 01 	lds	r24, 0x01AD
    1c8c:	80 71       	andi	r24, 0x10	; 16
    1c8e:	88 23       	and	r24, r24
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <task_ACS+0x30>
    1c92:	24 c2       	rjmp	.+1096   	; 0x20dc <task_ACS+0x478>
			switch(acs_state) {       // No - perform IR Transmission and ACS tasks...
    1c94:	80 91 66 00 	lds	r24, 0x0066
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	3e 87       	std	Y+14, r19	; 0x0e
    1c9e:	2d 87       	std	Y+13, r18	; 0x0d
    1ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca4:	82 30       	cpi	r24, 0x02	; 2
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <task_ACS+0x48>
    1caa:	b9 c0       	rjmp	.+370    	; 0x1e1e <task_ACS+0x1ba>
    1cac:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cae:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cb0:	23 30       	cpi	r18, 0x03	; 3
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	54 f4       	brge	.+20     	; 0x1cca <task_ACS+0x66>
    1cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	c9 f0       	breq	.+50     	; 0x1cf0 <task_ACS+0x8c>
    1cbe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cc0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cc2:	21 30       	cpi	r18, 0x01	; 1
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	89 f1       	breq	.+98     	; 0x1d2a <task_ACS+0xc6>
    1cc8:	0f c2       	rjmp	.+1054   	; 0x20e8 <task_ACS+0x484>
    1cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cce:	85 30       	cpi	r24, 0x05	; 5
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <task_ACS+0x72>
    1cd4:	54 c1       	rjmp	.+680    	; 0x1f7e <task_ACS+0x31a>
    1cd6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cd8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cda:	26 30       	cpi	r18, 0x06	; 6
    1cdc:	31 05       	cpc	r19, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <task_ACS+0x7e>
    1ce0:	83 c1       	rjmp	.+774    	; 0x1fe8 <task_ACS+0x384>
    1ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce6:	83 30       	cpi	r24, 0x03	; 3
    1ce8:	91 05       	cpc	r25, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <task_ACS+0x8a>
    1cec:	cd c0       	rjmp	.+410    	; 0x1e88 <task_ACS+0x224>
    1cee:	fc c1       	rjmp	.+1016   	; 0x20e8 <task_ACS+0x484>
				case ACS_STATE_IDLE: // Disable Timer2 interrupt to save processing time:
					TIMSK &= ~(1 << OCIE2);
    1cf0:	a9 e5       	ldi	r26, 0x59	; 89
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e9 e5       	ldi	r30, 0x59	; 89
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8f 77       	andi	r24, 0x7F	; 127
    1cfc:	8c 93       	st	X, r24
					IRCOMM_OFF();
    1cfe:	a2 e3       	ldi	r26, 0x32	; 50
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e2 e3       	ldi	r30, 0x32	; 50
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	8f 77       	andi	r24, 0x7F	; 127
    1d0a:	8c 93       	st	X, r24
					PORTB |= ACS_L;
    1d0c:	a8 e3       	ldi	r26, 0x38	; 56
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e8 e3       	ldi	r30, 0x38	; 56
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	80 64       	ori	r24, 0x40	; 64
    1d18:	8c 93       	st	X, r24
					PORTC |= ACS_R;
    1d1a:	a5 e3       	ldi	r26, 0x35	; 53
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e5 e3       	ldi	r30, 0x35	; 53
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	80 68       	ori	r24, 0x80	; 128
    1d26:	8c 93       	st	X, r24
    1d28:	df c1       	rjmp	.+958    	; 0x20e8 <task_ACS+0x484>
				break;
				case ACS_STATE_IRCOMM_DELAY: // Check for IRCOMM transmit data:
					if(!ircomm_send) {  // Transmission finished?
    1d2a:	80 91 ae 01 	lds	r24, 0x01AE
    1d2e:	88 23       	and	r24, r24
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <task_ACS+0xd0>
    1d32:	4d c0       	rjmp	.+154    	; 0x1dce <task_ACS+0x16a>
						if(sysStatACS.ircomm_transmit) { // New transmission?
    1d34:	80 91 ad 01 	lds	r24, 0x01AD
    1d38:	80 74       	andi	r24, 0x40	; 64
    1d3a:	88 23       	and	r24, r24
    1d3c:	c1 f0       	breq	.+48     	; 0x1d6e <task_ACS+0x10a>
							ircomm_data = ircomm_data_tmp;
    1d3e:	80 91 cd 01 	lds	r24, 0x01CD
    1d42:	90 91 ce 01 	lds	r25, 0x01CE
    1d46:	90 93 e8 01 	sts	0x01E8, r25
    1d4a:	80 93 e7 01 	sts	0x01E7, r24
							ircomm_send = 14;
    1d4e:	8e e0       	ldi	r24, 0x0E	; 14
    1d50:	80 93 ae 01 	sts	0x01AE, r24
							sysStatACS.ircomm_transmit = false;
    1d54:	80 91 ad 01 	lds	r24, 0x01AD
    1d58:	8f 7b       	andi	r24, 0xBF	; 191
    1d5a:	80 93 ad 01 	sts	0x01AD, r24
							TIMSK |= (1 << OCIE2);
    1d5e:	a9 e5       	ldi	r26, 0x59	; 89
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e9 e5       	ldi	r30, 0x59	; 89
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 68       	ori	r24, 0x80	; 128
    1d6a:	8c 93       	st	X, r24
    1d6c:	1c c0       	rjmp	.+56     	; 0x1da6 <task_ACS+0x142>
						}
						else {
							TIMSK &= ~(1 << OCIE2);
    1d6e:	a9 e5       	ldi	r26, 0x59	; 89
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e9 e5       	ldi	r30, 0x59	; 89
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	8f 77       	andi	r24, 0x7F	; 127
    1d7a:	8c 93       	st	X, r24
							IRCOMM_OFF();
    1d7c:	a2 e3       	ldi	r26, 0x32	; 50
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e2 e3       	ldi	r30, 0x32	; 50
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 77       	andi	r24, 0x7F	; 127
    1d88:	8c 93       	st	X, r24
							PORTB |= ACS_L;
    1d8a:	a8 e3       	ldi	r26, 0x38	; 56
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e8 e3       	ldi	r30, 0x38	; 56
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	80 64       	ori	r24, 0x40	; 64
    1d96:	8c 93       	st	X, r24
							PORTC |= ACS_R;
    1d98:	a5 e3       	ldi	r26, 0x35	; 53
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e5 e3       	ldi	r30, 0x35	; 53
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 68       	ori	r24, 0x80	; 128
    1da4:	8c 93       	st	X, r24
						}
						if(acs_counter++ >= ACS_IRCOMM_WAIT_TIME) // Delay 
    1da6:	90 91 7f 01 	lds	r25, 0x017F
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	1b 86       	std	Y+11, r1	; 0x0b
    1dae:	2c 85       	ldd	r18, Y+12	; 0x0c
    1db0:	24 31       	cpi	r18, 0x14	; 20
    1db2:	10 f0       	brcs	.+4      	; 0x1db8 <task_ACS+0x154>
    1db4:	31 e0       	ldi	r19, 0x01	; 1
    1db6:	3b 87       	std	Y+11, r19	; 0x0b
    1db8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dba:	8f 5f       	subi	r24, 0xFF	; 255
    1dbc:	80 93 7f 01 	sts	0x017F, r24
    1dc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dc2:	88 23       	and	r24, r24
    1dc4:	59 f0       	breq	.+22     	; 0x1ddc <task_ACS+0x178>
							acs_state=ACS_STATE_SEND_LEFT;
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	80 93 66 00 	sts	0x0066, r24
    1dcc:	07 c0       	rjmp	.+14     	; 0x1ddc <task_ACS+0x178>
					}
					else
						TIMSK |= (1 << OCIE2);
    1dce:	a9 e5       	ldi	r26, 0x59	; 89
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e9 e5       	ldi	r30, 0x59	; 89
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	80 68       	ori	r24, 0x80	; 128
    1dda:	8c 93       	st	X, r24
					if(sysStatACS.rc5_data_received) { // RC5 data received? 
    1ddc:	80 91 ad 01 	lds	r24, 0x01AD
    1de0:	88 70       	andi	r24, 0x08	; 8
    1de2:	88 23       	and	r24, r24
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <task_ACS+0x184>
    1de6:	80 c1       	rjmp	.+768    	; 0x20e8 <task_ACS+0x484>
						IRCOMM_RC5dataReadyHandler(IRCOMM_RC5_data_ok); // Call handler
    1de8:	e0 91 67 00 	lds	r30, 0x0067
    1dec:	f0 91 68 00 	lds	r31, 0x0068
    1df0:	80 91 06 02 	lds	r24, 0x0206
    1df4:	90 91 07 02 	lds	r25, 0x0207
    1df8:	09 95       	icall
						IRCOMM_RC5_data	= IRCOMM_RC5_data_ok;
    1dfa:	80 91 06 02 	lds	r24, 0x0206
    1dfe:	90 91 07 02 	lds	r25, 0x0207
    1e02:	90 93 b6 01 	sts	0x01B6, r25
    1e06:	80 93 b5 01 	sts	0x01B5, r24
						IRCOMM_RC5_data_ok.data = 0;
    1e0a:	10 92 07 02 	sts	0x0207, r1
    1e0e:	10 92 06 02 	sts	0x0206, r1
						sysStatACS.rc5_data_received = false;
    1e12:	80 91 ad 01 	lds	r24, 0x01AD
    1e16:	87 7f       	andi	r24, 0xF7	; 247
    1e18:	80 93 ad 01 	sts	0x01AD, r24
    1e1c:	65 c1       	rjmp	.+714    	; 0x20e8 <task_ACS+0x484>
					}
				break;
				case ACS_STATE_SEND_LEFT:  // Prepare left channel:
					TIMSK &= ~(1 << OCIE2);
    1e1e:	a9 e5       	ldi	r26, 0x59	; 89
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e9 e5       	ldi	r30, 0x59	; 89
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	8f 77       	andi	r24, 0x7F	; 127
    1e2a:	8c 93       	st	X, r24
					IRCOMM_OFF();
    1e2c:	a2 e3       	ldi	r26, 0x32	; 50
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8f 77       	andi	r24, 0x7F	; 127
    1e38:	8c 93       	st	X, r24
					PORTB |= ACS_L;
    1e3a:	a8 e3       	ldi	r26, 0x38	; 56
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e8 e3       	ldi	r30, 0x38	; 56
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	80 64       	ori	r24, 0x40	; 64
    1e46:	8c 93       	st	X, r24
					PORTC |= ACS_R;
    1e48:	a5 e3       	ldi	r26, 0x35	; 53
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e5 e3       	ldi	r30, 0x35	; 53
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	80 68       	ori	r24, 0x80	; 128
    1e54:	8c 93       	st	X, r24
					acs_pulse = 0;
    1e56:	10 92 b2 01 	sts	0x01B2, r1
					acs_event_counter = 0;
    1e5a:	10 92 02 02 	sts	0x0202, r1
					acs_detect_timeout = 0;
    1e5e:	10 92 7e 01 	sts	0x017E, r1
    1e62:	10 92 7d 01 	sts	0x017D, r1
					sysStatACS.channel = ACS_CHANNEL_LEFT;
    1e66:	80 91 ad 01 	lds	r24, 0x01AD
    1e6a:	8e 7f       	andi	r24, 0xFE	; 254
    1e6c:	80 93 ad 01 	sts	0x01AD, r24
					sysStatACS.acs_go = true;
    1e70:	80 91 ad 01 	lds	r24, 0x01AD
    1e74:	80 62       	ori	r24, 0x20	; 32
    1e76:	80 93 ad 01 	sts	0x01AD, r24
					acs_counter = 3; 
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	80 93 7f 01 	sts	0x017F, r24
					acs_state = ACS_STATE_WAIT_LEFT;
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	80 93 66 00 	sts	0x0066, r24
    1e86:	30 c1       	rjmp	.+608    	; 0x20e8 <task_ACS+0x484>
				break;
				case ACS_STATE_WAIT_LEFT: // Wait for reception of IR pulses from Left channel
					if(!acs_pulse && acs_counter++ > 2) { 
    1e88:	80 91 b2 01 	lds	r24, 0x01B2
    1e8c:	88 23       	and	r24, r24
    1e8e:	e1 f4       	brne	.+56     	; 0x1ec8 <task_ACS+0x264>
    1e90:	90 91 7f 01 	lds	r25, 0x017F
    1e94:	9a 87       	std	Y+10, r25	; 0x0a
    1e96:	19 86       	std	Y+9, r1	; 0x09
    1e98:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e9a:	23 30       	cpi	r18, 0x03	; 3
    1e9c:	10 f0       	brcs	.+4      	; 0x1ea2 <task_ACS+0x23e>
    1e9e:	31 e0       	ldi	r19, 0x01	; 1
    1ea0:	39 87       	std	Y+9, r19	; 0x09
    1ea2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea4:	8f 5f       	subi	r24, 0xFF	; 255
    1ea6:	80 93 7f 01 	sts	0x017F, r24
    1eaa:	89 85       	ldd	r24, Y+9	; 0x09
    1eac:	88 23       	and	r24, r24
    1eae:	61 f0       	breq	.+24     	; 0x1ec8 <task_ACS+0x264>
						TIMSK |= (1 << OCIE2); 
    1eb0:	a9 e5       	ldi	r26, 0x59	; 89
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e9 e5       	ldi	r30, 0x59	; 89
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	80 68       	ori	r24, 0x80	; 128
    1ebc:	8c 93       	st	X, r24
						acs_pulse = ACS_SEND_PULSES_LEFT;  // Send pulses! 
    1ebe:	88 e2       	ldi	r24, 0x28	; 40
    1ec0:	80 93 b2 01 	sts	0x01B2, r24
						acs_counter = 0;
    1ec4:	10 92 7f 01 	sts	0x017F, r1
					}
					if(obstacle_left && acs_event_counter >= ACS_REC_PULSES_LEFT_THRESHOLD) {
    1ec8:	80 91 e3 01 	lds	r24, 0x01E3
    1ecc:	88 23       	and	r24, r24
    1ece:	69 f0       	breq	.+26     	; 0x1eea <task_ACS+0x286>
    1ed0:	80 91 02 02 	lds	r24, 0x0202
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	48 f0       	brcs	.+18     	; 0x1eea <task_ACS+0x286>
						acs_event_counter = 0;
    1ed8:	10 92 02 02 	sts	0x0202, r1
						obstacle_left = true;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	80 93 e3 01 	sts	0x01E3, r24
						acs_state = ACS_STATE_SEND_RIGHT;
    1ee2:	85 e0       	ldi	r24, 0x05	; 5
    1ee4:	80 93 66 00 	sts	0x0066, r24
    1ee8:	ff c0       	rjmp	.+510    	; 0x20e8 <task_ACS+0x484>
					}
					else if(acs_event_counter >= ACS_REC_PULSES_LEFT) { // receive min. ACS_REC_PULSES_LEFT pulses  
    1eea:	80 91 02 02 	lds	r24, 0x0202
    1eee:	86 30       	cpi	r24, 0x06	; 6
    1ef0:	48 f0       	brcs	.+18     	; 0x1f04 <task_ACS+0x2a0>
						acs_event_counter = 0;
    1ef2:	10 92 02 02 	sts	0x0202, r1
						obstacle_left = true;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 93 e3 01 	sts	0x01E3, r24
						acs_state = ACS_STATE_SEND_RIGHT;
    1efc:	85 e0       	ldi	r24, 0x05	; 5
    1efe:	80 93 66 00 	sts	0x0066, r24
    1f02:	f2 c0       	rjmp	.+484    	; 0x20e8 <task_ACS+0x484>
					}
					else if(acs_detect_timeout++ >= ACS_TIMEOUT_LEFT) { // Timeout?
    1f04:	20 91 7d 01 	lds	r18, 0x017D
    1f08:	30 91 7e 01 	lds	r19, 0x017E
    1f0c:	38 87       	std	Y+8, r19	; 0x08
    1f0e:	2f 83       	std	Y+7, r18	; 0x07
    1f10:	1e 82       	std	Y+6, r1	; 0x06
    1f12:	8f 81       	ldd	r24, Y+7	; 0x07
    1f14:	98 85       	ldd	r25, Y+8	; 0x08
    1f16:	8e 30       	cpi	r24, 0x0E	; 14
    1f18:	91 05       	cpc	r25, r1
    1f1a:	10 f0       	brcs	.+4      	; 0x1f20 <task_ACS+0x2bc>
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8f 81       	ldd	r24, Y+7	; 0x07
    1f22:	98 85       	ldd	r25, Y+8	; 0x08
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	90 93 7e 01 	sts	0x017E, r25
    1f2a:	80 93 7d 01 	sts	0x017D, r24
    1f2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f30:	22 23       	and	r18, r18
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <task_ACS+0x2d2>
    1f34:	d9 c0       	rjmp	.+434    	; 0x20e8 <task_ACS+0x484>
						obstacle_left = false;
    1f36:	10 92 e3 01 	sts	0x01E3, r1
						acs_state = ACS_STATE_SEND_RIGHT;
    1f3a:	85 e0       	ldi	r24, 0x05	; 5
    1f3c:	80 93 66 00 	sts	0x0066, r24
						TIMSK &= ~(1 << OCIE2);
    1f40:	a9 e5       	ldi	r26, 0x59	; 89
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e9 e5       	ldi	r30, 0x59	; 89
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 77       	andi	r24, 0x7F	; 127
    1f4c:	8c 93       	st	X, r24
						IRCOMM_OFF();
    1f4e:	a2 e3       	ldi	r26, 0x32	; 50
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e2 e3       	ldi	r30, 0x32	; 50
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8f 77       	andi	r24, 0x7F	; 127
    1f5a:	8c 93       	st	X, r24
						PORTB |= ACS_L;
    1f5c:	a8 e3       	ldi	r26, 0x38	; 56
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e8 e3       	ldi	r30, 0x38	; 56
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	80 64       	ori	r24, 0x40	; 64
    1f68:	8c 93       	st	X, r24
						PORTC |= ACS_R;
    1f6a:	a5 e3       	ldi	r26, 0x35	; 53
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e5 e3       	ldi	r30, 0x35	; 53
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	80 68       	ori	r24, 0x80	; 128
    1f76:	8c 93       	st	X, r24
						acs_pulse = 0;
    1f78:	10 92 b2 01 	sts	0x01B2, r1
    1f7c:	b5 c0       	rjmp	.+362    	; 0x20e8 <task_ACS+0x484>
					}
				break;
				case ACS_STATE_SEND_RIGHT:   // Prepare right channel:
					TIMSK &= ~(1 << OCIE2);
    1f7e:	a9 e5       	ldi	r26, 0x59	; 89
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e9 e5       	ldi	r30, 0x59	; 89
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8f 77       	andi	r24, 0x7F	; 127
    1f8a:	8c 93       	st	X, r24
					IRCOMM_OFF();
    1f8c:	a2 e3       	ldi	r26, 0x32	; 50
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e2 e3       	ldi	r30, 0x32	; 50
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	8f 77       	andi	r24, 0x7F	; 127
    1f98:	8c 93       	st	X, r24
					PORTB |= ACS_L;
    1f9a:	a8 e3       	ldi	r26, 0x38	; 56
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e8 e3       	ldi	r30, 0x38	; 56
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	80 64       	ori	r24, 0x40	; 64
    1fa6:	8c 93       	st	X, r24
					PORTC |= ACS_R;
    1fa8:	a5 e3       	ldi	r26, 0x35	; 53
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e5 e3       	ldi	r30, 0x35	; 53
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 68       	ori	r24, 0x80	; 128
    1fb4:	8c 93       	st	X, r24
					acs_pulse = 0;
    1fb6:	10 92 b2 01 	sts	0x01B2, r1
					acs_event_counter = 0;
    1fba:	10 92 02 02 	sts	0x0202, r1
					acs_detect_timeout = 0;
    1fbe:	10 92 7e 01 	sts	0x017E, r1
    1fc2:	10 92 7d 01 	sts	0x017D, r1
					sysStatACS.channel = ACS_CHANNEL_RIGHT;
    1fc6:	80 91 ad 01 	lds	r24, 0x01AD
    1fca:	81 60       	ori	r24, 0x01	; 1
    1fcc:	80 93 ad 01 	sts	0x01AD, r24
					sysStatACS.acs_go = true;
    1fd0:	80 91 ad 01 	lds	r24, 0x01AD
    1fd4:	80 62       	ori	r24, 0x20	; 32
    1fd6:	80 93 ad 01 	sts	0x01AD, r24
					acs_counter = 3;
    1fda:	83 e0       	ldi	r24, 0x03	; 3
    1fdc:	80 93 7f 01 	sts	0x017F, r24
					acs_state = ACS_STATE_WAIT_RIGHT;
    1fe0:	86 e0       	ldi	r24, 0x06	; 6
    1fe2:	80 93 66 00 	sts	0x0066, r24
    1fe6:	80 c0       	rjmp	.+256    	; 0x20e8 <task_ACS+0x484>
				break;
				case ACS_STATE_WAIT_RIGHT:  // Wait for reception of IR pulses
					if(!acs_pulse && acs_counter++ > 2) { 
    1fe8:	80 91 b2 01 	lds	r24, 0x01B2
    1fec:	88 23       	and	r24, r24
    1fee:	e1 f4       	brne	.+56     	; 0x2028 <task_ACS+0x3c4>
    1ff0:	30 91 7f 01 	lds	r19, 0x017F
    1ff4:	3d 83       	std	Y+5, r19	; 0x05
    1ff6:	1c 82       	std	Y+4, r1	; 0x04
    1ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffa:	83 30       	cpi	r24, 0x03	; 3
    1ffc:	10 f0       	brcs	.+4      	; 0x2002 <task_ACS+0x39e>
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	80 93 7f 01 	sts	0x017F, r24
    200a:	2c 81       	ldd	r18, Y+4	; 0x04
    200c:	22 23       	and	r18, r18
    200e:	61 f0       	breq	.+24     	; 0x2028 <task_ACS+0x3c4>
						TIMSK |= (1 << OCIE2);
    2010:	a9 e5       	ldi	r26, 0x59	; 89
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e9 e5       	ldi	r30, 0x59	; 89
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	80 68       	ori	r24, 0x80	; 128
    201c:	8c 93       	st	X, r24
						acs_pulse = ACS_SEND_PULSES_RIGHT; 	// Send pulses!
    201e:	88 e2       	ldi	r24, 0x28	; 40
    2020:	80 93 b2 01 	sts	0x01B2, r24
						acs_counter = 0;
    2024:	10 92 7f 01 	sts	0x017F, r1
					}
					if(obstacle_right && acs_event_counter >= ACS_REC_PULSES_RIGHT_THRESHOLD) {
    2028:	80 91 ec 01 	lds	r24, 0x01EC
    202c:	88 23       	and	r24, r24
    202e:	69 f0       	breq	.+26     	; 0x204a <task_ACS+0x3e6>
    2030:	80 91 02 02 	lds	r24, 0x0202
    2034:	82 30       	cpi	r24, 0x02	; 2
    2036:	48 f0       	brcs	.+18     	; 0x204a <task_ACS+0x3e6>
						acs_event_counter = 0;
    2038:	10 92 02 02 	sts	0x0202, r1
						obstacle_right = true;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	80 93 ec 01 	sts	0x01EC, r24
						acs_state = ACS_STATE_IRCOMM_DELAY;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	80 93 66 00 	sts	0x0066, r24
    2048:	4f c0       	rjmp	.+158    	; 0x20e8 <task_ACS+0x484>
					}
					else if(acs_event_counter >= ACS_REC_PULSES_RIGHT) { // receive min. ACS_REC_PULSES_RIGHT pulses
    204a:	80 91 02 02 	lds	r24, 0x0202
    204e:	86 30       	cpi	r24, 0x06	; 6
    2050:	48 f0       	brcs	.+18     	; 0x2064 <task_ACS+0x400>
						acs_event_counter = 0;
    2052:	10 92 02 02 	sts	0x0202, r1
						obstacle_right = true;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	80 93 ec 01 	sts	0x01EC, r24
						acs_state = ACS_STATE_IRCOMM_DELAY;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	80 93 66 00 	sts	0x0066, r24
    2062:	42 c0       	rjmp	.+132    	; 0x20e8 <task_ACS+0x484>
					}
					else if(acs_detect_timeout++ >= ACS_TIMEOUT_RIGHT) { // Timeout?
    2064:	80 91 7d 01 	lds	r24, 0x017D
    2068:	90 91 7e 01 	lds	r25, 0x017E
    206c:	9b 83       	std	Y+3, r25	; 0x03
    206e:	8a 83       	std	Y+2, r24	; 0x02
    2070:	19 82       	std	Y+1, r1	; 0x01
    2072:	2a 81       	ldd	r18, Y+2	; 0x02
    2074:	3b 81       	ldd	r19, Y+3	; 0x03
    2076:	2e 30       	cpi	r18, 0x0E	; 14
    2078:	31 05       	cpc	r19, r1
    207a:	10 f0       	brcs	.+4      	; 0x2080 <task_ACS+0x41c>
    207c:	31 e0       	ldi	r19, 0x01	; 1
    207e:	39 83       	std	Y+1, r19	; 0x01
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	90 93 7e 01 	sts	0x017E, r25
    208a:	80 93 7d 01 	sts	0x017D, r24
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	88 23       	and	r24, r24
    2092:	51 f1       	breq	.+84     	; 0x20e8 <task_ACS+0x484>
						obstacle_right = false;
    2094:	10 92 ec 01 	sts	0x01EC, r1
						acs_state = ACS_STATE_IRCOMM_DELAY;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	80 93 66 00 	sts	0x0066, r24
						TIMSK &= ~(1 << OCIE2);
    209e:	a9 e5       	ldi	r26, 0x59	; 89
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e9 e5       	ldi	r30, 0x59	; 89
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8f 77       	andi	r24, 0x7F	; 127
    20aa:	8c 93       	st	X, r24
						IRCOMM_OFF();
    20ac:	a2 e3       	ldi	r26, 0x32	; 50
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e2 e3       	ldi	r30, 0x32	; 50
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8f 77       	andi	r24, 0x7F	; 127
    20b8:	8c 93       	st	X, r24
						PORTB |= ACS_L;
    20ba:	a8 e3       	ldi	r26, 0x38	; 56
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e8 e3       	ldi	r30, 0x38	; 56
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	80 64       	ori	r24, 0x40	; 64
    20c6:	8c 93       	st	X, r24
						PORTC |= ACS_R;
    20c8:	a5 e3       	ldi	r26, 0x35	; 53
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e3       	ldi	r30, 0x35	; 53
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	80 68       	ori	r24, 0x80	; 128
    20d4:	8c 93       	st	X, r24
						acs_pulse = 0;
    20d6:	10 92 b2 01 	sts	0x01B2, r1
    20da:	06 c0       	rjmp	.+12     	; 0x20e8 <task_ACS+0x484>
					}
				break;
			}
		}
		else { // RC5 reception detected...
			acs_detect_timeout = 0;
    20dc:	10 92 7e 01 	sts	0x017E, r1
    20e0:	10 92 7d 01 	sts	0x017D, r1
			acs_counter = 0;
    20e4:	10 92 7f 01 	sts	0x017F, r1
		}
		
		// Check for changes and call event handler if necessary:
		static uint8_t acs_l_tmp;
		static uint8_t acs_r_tmp;
		if(acs_l_tmp != obstacle_left || acs_r_tmp != obstacle_right) { // Did the ACS Status change?
    20e8:	90 91 7c 01 	lds	r25, 0x017C
    20ec:	80 91 e3 01 	lds	r24, 0x01E3
    20f0:	98 17       	cp	r25, r24
    20f2:	31 f4       	brne	.+12     	; 0x2100 <task_ACS+0x49c>
    20f4:	90 91 7b 01 	lds	r25, 0x017B
    20f8:	80 91 ec 01 	lds	r24, 0x01EC
    20fc:	98 17       	cp	r25, r24
    20fe:	69 f0       	breq	.+26     	; 0x211a <task_ACS+0x4b6>
			acs_l_tmp = obstacle_left;   // Yes, update and call event handler...
    2100:	80 91 e3 01 	lds	r24, 0x01E3
    2104:	80 93 7c 01 	sts	0x017C, r24
			acs_r_tmp = obstacle_right;
    2108:	80 91 ec 01 	lds	r24, 0x01EC
    210c:	80 93 7b 01 	sts	0x017B, r24
			ACS_stateChangedHandler();
    2110:	e0 91 69 00 	lds	r30, 0x0069
    2114:	f0 91 6a 00 	lds	r31, 0x006A
    2118:	09 95       	icall
		}
		acs_timer = 0;
    211a:	10 92 c6 01 	sts	0x01C6, r1
    211e:	10 92 c5 01 	sts	0x01C5, r1
	}
}
    2122:	2e 96       	adiw	r28, 0x0e	; 14
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <disableACS>:
/**
 * Disables the ACS task.
 * ACS and IRCOMM Transmissions/Receptions will not work anymore.
 */
void disableACS(void)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
	acs_state = ACS_STATE_IDLE;
    213c:	10 92 66 00 	sts	0x0066, r1
	TIMSK &= ~(1 << OCIE2);
    2140:	a9 e5       	ldi	r26, 0x59	; 89
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e9 e5       	ldi	r30, 0x59	; 89
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8f 77       	andi	r24, 0x7F	; 127
    214c:	8c 93       	st	X, r24
	IRCOMM_OFF();
    214e:	a2 e3       	ldi	r26, 0x32	; 50
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e2 e3       	ldi	r30, 0x32	; 50
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8f 77       	andi	r24, 0x7F	; 127
    215a:	8c 93       	st	X, r24
	PORTB |= ACS_L;
    215c:	a8 e3       	ldi	r26, 0x38	; 56
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e8 e3       	ldi	r30, 0x38	; 56
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	80 64       	ori	r24, 0x40	; 64
    2168:	8c 93       	st	X, r24
	PORTC |= ACS_R;
    216a:	a5 e3       	ldi	r26, 0x35	; 53
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e5 e3       	ldi	r30, 0x35	; 53
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	80 68       	ori	r24, 0x80	; 128
    2176:	8c 93       	st	X, r24
	obstacle_right = false;
    2178:	10 92 ec 01 	sts	0x01EC, r1
	obstacle_left = false;
    217c:	10 92 e3 01 	sts	0x01E3, r1
}
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <enableACS>:

/**
 * Enables the ACS task.
 */
void enableACS(void)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1 << OCIE2);
    218e:	a9 e5       	ldi	r26, 0x59	; 89
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e9 e5       	ldi	r30, 0x59	; 89
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8f 77       	andi	r24, 0x7F	; 127
    219a:	8c 93       	st	X, r24
	IRCOMM_OFF();
    219c:	a2 e3       	ldi	r26, 0x32	; 50
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e2 e3       	ldi	r30, 0x32	; 50
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	8f 77       	andi	r24, 0x7F	; 127
    21a8:	8c 93       	st	X, r24
	PORTB |= ACS_L;
    21aa:	a8 e3       	ldi	r26, 0x38	; 56
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e8 e3       	ldi	r30, 0x38	; 56
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	80 64       	ori	r24, 0x40	; 64
    21b6:	8c 93       	st	X, r24
	PORTC |= ACS_R;
    21b8:	a5 e3       	ldi	r26, 0x35	; 53
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e5 e3       	ldi	r30, 0x35	; 53
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	80 68       	ori	r24, 0x80	; 128
    21c4:	8c 93       	st	X, r24
	obstacle_right = false;
    21c6:	10 92 ec 01 	sts	0x01EC, r1
	obstacle_left = false;
    21ca:	10 92 e3 01 	sts	0x01E3, r1
	acs_state = ACS_STATE_IRCOMM_DELAY;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	80 93 66 00 	sts	0x0066, r24
}
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <setACSPwrOff>:
 *
 *			setACSPwrOff();
 *
 */
void setACSPwrOff(void)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~ACS_PWR;
    21e2:	a1 e3       	ldi	r26, 0x31	; 49
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e1 e3       	ldi	r30, 0x31	; 49
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	8f 7b       	andi	r24, 0xBF	; 191
    21ee:	8c 93       	st	X, r24
	PORTD &= ~ACS_PWR;
    21f0:	a2 e3       	ldi	r26, 0x32	; 50
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e2 e3       	ldi	r30, 0x32	; 50
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8f 7b       	andi	r24, 0xBF	; 191
    21fc:	8c 93       	st	X, r24
	DDRB &= ~ACS_PWRH;
    21fe:	a7 e3       	ldi	r26, 0x37	; 55
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e7 e3       	ldi	r30, 0x37	; 55
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	87 7f       	andi	r24, 0xF7	; 247
    220a:	8c 93       	st	X, r24
	PORTB &= ~ACS_PWRH;
    220c:	a8 e3       	ldi	r26, 0x38	; 56
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e8 e3       	ldi	r30, 0x38	; 56
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	87 7f       	andi	r24, 0xF7	; 247
    2218:	8c 93       	st	X, r24
	PORTB &= ~ACS_L;
    221a:	a8 e3       	ldi	r26, 0x38	; 56
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e8 e3       	ldi	r30, 0x38	; 56
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	8f 7b       	andi	r24, 0xBF	; 191
    2226:	8c 93       	st	X, r24
	PORTC &= ~ACS_R;
    2228:	a5 e3       	ldi	r26, 0x35	; 53
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e5 e3       	ldi	r30, 0x35	; 53
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	8f 77       	andi	r24, 0x7F	; 127
    2234:	8c 93       	st	X, r24
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <setACSPwrLow>:
 *
 *			setACSPwrLow();
 *
 */
void setACSPwrLow(void)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
	DDRD |= ACS_PWR;
    2244:	a1 e3       	ldi	r26, 0x31	; 49
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e1 e3       	ldi	r30, 0x31	; 49
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	80 64       	ori	r24, 0x40	; 64
    2250:	8c 93       	st	X, r24
	PORTD |= ACS_PWR;
    2252:	a2 e3       	ldi	r26, 0x32	; 50
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e2 e3       	ldi	r30, 0x32	; 50
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	80 64       	ori	r24, 0x40	; 64
    225e:	8c 93       	st	X, r24
	DDRB &= ~ACS_PWRH;
    2260:	a7 e3       	ldi	r26, 0x37	; 55
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e7 e3       	ldi	r30, 0x37	; 55
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	87 7f       	andi	r24, 0xF7	; 247
    226c:	8c 93       	st	X, r24
	PORTB &= ~ACS_PWRH;
    226e:	a8 e3       	ldi	r26, 0x38	; 56
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e8 e3       	ldi	r30, 0x38	; 56
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	87 7f       	andi	r24, 0xF7	; 247
    227a:	8c 93       	st	X, r24
}
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <setACSPwrMed>:
 *
 *			setACSPwrMed();
 *
 */
void setACSPwrMed(void)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~ACS_PWR;
    228a:	a1 e3       	ldi	r26, 0x31	; 49
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e1 e3       	ldi	r30, 0x31	; 49
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	8f 7b       	andi	r24, 0xBF	; 191
    2296:	8c 93       	st	X, r24
	PORTD &= ~ACS_PWR;
    2298:	a2 e3       	ldi	r26, 0x32	; 50
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e2 e3       	ldi	r30, 0x32	; 50
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8f 7b       	andi	r24, 0xBF	; 191
    22a4:	8c 93       	st	X, r24
	DDRB |= ACS_PWRH;
    22a6:	a7 e3       	ldi	r26, 0x37	; 55
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e7 e3       	ldi	r30, 0x37	; 55
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	88 60       	ori	r24, 0x08	; 8
    22b2:	8c 93       	st	X, r24
	PORTB |= ACS_PWRH;
    22b4:	a8 e3       	ldi	r26, 0x38	; 56
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e8 e3       	ldi	r30, 0x38	; 56
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	88 60       	ori	r24, 0x08	; 8
    22c0:	8c 93       	st	X, r24
}
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <setACSPwrHigh>:
 *
 *			setACSPwrHigh();
 *
 */
void setACSPwrHigh(void)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
	DDRD |= ACS_PWR;
    22d0:	a1 e3       	ldi	r26, 0x31	; 49
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e1 e3       	ldi	r30, 0x31	; 49
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	80 64       	ori	r24, 0x40	; 64
    22dc:	8c 93       	st	X, r24
	PORTD |= ACS_PWR;
    22de:	a2 e3       	ldi	r26, 0x32	; 50
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e2 e3       	ldi	r30, 0x32	; 50
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	80 64       	ori	r24, 0x40	; 64
    22ea:	8c 93       	st	X, r24
	DDRB |= ACS_PWRH;
    22ec:	a7 e3       	ldi	r26, 0x37	; 55
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e7 e3       	ldi	r30, 0x37	; 55
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	88 60       	ori	r24, 0x08	; 8
    22f8:	8c 93       	st	X, r24
	PORTB |= ACS_PWRH;
    22fa:	a8 e3       	ldi	r26, 0x38	; 56
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e8 e3       	ldi	r30, 0x38	; 56
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	88 60       	ori	r24, 0x08	; 8
    2306:	8c 93       	st	X, r24
}
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	08 95       	ret

0000230e <powerON>:

/*****************************************************************************/
// 

void powerON(void) 
{ 
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
	PORTB |= PWRON;
    2316:	a8 e3       	ldi	r26, 0x38	; 56
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e8 e3       	ldi	r30, 0x38	; 56
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	80 61       	ori	r24, 0x10	; 16
    2322:	8c 93       	st	X, r24
	#ifdef POWER_ON_WARNING
		if(leds_on < 4)
    2324:	80 91 b8 01 	lds	r24, 0x01B8
    2328:	84 30       	cpi	r24, 0x04	; 4
    232a:	18 f4       	brcc	.+6      	; 0x2332 <powerON+0x24>
			leds_on = 3;
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	80 93 b8 01 	sts	0x01B8, r24
	#endif
}
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <powerOFF>:

void powerOFF(void)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <powerOFF+0x6>
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~PWRON;
    2342:	a8 e3       	ldi	r26, 0x38	; 56
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e8 e3       	ldi	r30, 0x38	; 56
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	8f 7e       	andi	r24, 0xEF	; 239
    234e:	8c 93       	st	X, r24
	#ifdef POWER_ON_WARNING
		if(leds_on < 4)
    2350:	80 91 b8 01 	lds	r24, 0x01B8
    2354:	84 30       	cpi	r24, 0x04	; 4
    2356:	90 f4       	brcc	.+36     	; 0x237c <powerOFF+0x44>
			leds_on = (leds_on ? 1 : (statusLEDs.byte && 1));
    2358:	80 91 b8 01 	lds	r24, 0x01B8
    235c:	88 23       	and	r24, r24
    235e:	21 f4       	brne	.+8      	; 0x2368 <powerOFF+0x30>
    2360:	80 91 a1 01 	lds	r24, 0x01A1
    2364:	88 23       	and	r24, r24
    2366:	29 f0       	breq	.+10     	; 0x2372 <powerOFF+0x3a>
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <powerOFF+0x3e>
    2372:	1a 82       	std	Y+2, r1	; 0x02
    2374:	19 82       	std	Y+1, r1	; 0x01
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	80 93 b8 01 	sts	0x01B8, r24
	#endif
}
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <__vector_10>:
 *
 * By default, it runs at 10kHz which means this ISR is called
 * every ~100µs! This is nice for all kinds of timing stuff!
 */
ISR (TIMER0_COMP_vect)
{
    2386:	1f 92       	push	r1
    2388:	0f 92       	push	r0
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	0f 92       	push	r0
    238e:	11 24       	eor	r1, r1
    2390:	2f 93       	push	r18
    2392:	3f 93       	push	r19
    2394:	5f 93       	push	r21
    2396:	6f 93       	push	r22
    2398:	7f 93       	push	r23
    239a:	8f 93       	push	r24
    239c:	9f 93       	push	r25
    239e:	af 93       	push	r26
    23a0:	bf 93       	push	r27
    23a2:	ef 93       	push	r30
    23a4:	ff 93       	push	r31
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	2b 97       	sbiw	r28, 0x0b	; 11
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	cd bf       	out	0x3d, r28	; 61
	#ifdef POWER_ON_WARNING
		static uint16_t leds_on_timer = 0;
	#endif
	
	// 16bit timer (100µs resolution)
	timer++;
    23b4:	80 91 94 01 	lds	r24, 0x0194
    23b8:	90 91 95 01 	lds	r25, 0x0195
    23bc:	01 96       	adiw	r24, 0x01	; 1
    23be:	90 93 95 01 	sts	0x0195, r25
    23c2:	80 93 94 01 	sts	0x0194, r24
	
	// Blocking delay (100µs):
	delay_timer++;
    23c6:	80 91 f9 01 	lds	r24, 0x01F9
    23ca:	8f 5f       	subi	r24, 0xFF	; 255
    23cc:	80 93 f9 01 	sts	0x01F9, r24
	
	// All 1ms based timing stuff
	if(ms_timer++ >= 9) { // 10 * 100µs = 1ms, >= 9 because 0..9 = 10 counts
    23d0:	20 91 fc 01 	lds	r18, 0x01FC
    23d4:	2b 87       	std	Y+11, r18	; 0x0b
    23d6:	1a 86       	std	Y+10, r1	; 0x0a
    23d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    23da:	89 30       	cpi	r24, 0x09	; 9
    23dc:	10 f0       	brcs	.+4      	; 0x23e2 <__vector_10+0x5c>
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	9a 87       	std	Y+10, r25	; 0x0a
    23e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	80 93 fc 01 	sts	0x01FC, r24
    23ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    23ec:	22 23       	and	r18, r18
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <__vector_10+0x6c>
    23f0:	ec c1       	rjmp	.+984    	; 0x27ca <__vector_10+0x444>
		// 16bit Stopwatches:
		if(stopwatches.watches & STOPWATCH1)
    23f2:	80 91 d1 01 	lds	r24, 0x01D1
    23f6:	88 2f       	mov	r24, r24
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	81 70       	andi	r24, 0x01	; 1
    23fc:	90 70       	andi	r25, 0x00	; 0
    23fe:	88 23       	and	r24, r24
    2400:	49 f0       	breq	.+18     	; 0x2414 <__vector_10+0x8e>
			stopwatches.watch1++;
    2402:	80 91 d2 01 	lds	r24, 0x01D2
    2406:	90 91 d3 01 	lds	r25, 0x01D3
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	90 93 d3 01 	sts	0x01D3, r25
    2410:	80 93 d2 01 	sts	0x01D2, r24
		if(stopwatches.watches & STOPWATCH2)
    2414:	80 91 d1 01 	lds	r24, 0x01D1
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	82 70       	andi	r24, 0x02	; 2
    241e:	90 70       	andi	r25, 0x00	; 0
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	49 f0       	breq	.+18     	; 0x2436 <__vector_10+0xb0>
			stopwatches.watch2++;
    2424:	80 91 d4 01 	lds	r24, 0x01D4
    2428:	90 91 d5 01 	lds	r25, 0x01D5
    242c:	01 96       	adiw	r24, 0x01	; 1
    242e:	90 93 d5 01 	sts	0x01D5, r25
    2432:	80 93 d4 01 	sts	0x01D4, r24
		if(stopwatches.watches & STOPWATCH3)
    2436:	80 91 d1 01 	lds	r24, 0x01D1
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	84 70       	andi	r24, 0x04	; 4
    2440:	90 70       	andi	r25, 0x00	; 0
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	49 f0       	breq	.+18     	; 0x2458 <__vector_10+0xd2>
			stopwatches.watch3++;
    2446:	80 91 d6 01 	lds	r24, 0x01D6
    244a:	90 91 d7 01 	lds	r25, 0x01D7
    244e:	01 96       	adiw	r24, 0x01	; 1
    2450:	90 93 d7 01 	sts	0x01D7, r25
    2454:	80 93 d6 01 	sts	0x01D6, r24
		if(stopwatches.watches & STOPWATCH4)
    2458:	80 91 d1 01 	lds	r24, 0x01D1
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	88 70       	andi	r24, 0x08	; 8
    2462:	90 70       	andi	r25, 0x00	; 0
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	49 f0       	breq	.+18     	; 0x247a <__vector_10+0xf4>
			stopwatches.watch4++;
    2468:	80 91 d8 01 	lds	r24, 0x01D8
    246c:	90 91 d9 01 	lds	r25, 0x01D9
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	90 93 d9 01 	sts	0x01D9, r25
    2476:	80 93 d8 01 	sts	0x01D8, r24
		if(stopwatches.watches & STOPWATCH5)
    247a:	80 91 d1 01 	lds	r24, 0x01D1
    247e:	88 2f       	mov	r24, r24
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	80 71       	andi	r24, 0x10	; 16
    2484:	90 70       	andi	r25, 0x00	; 0
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	49 f0       	breq	.+18     	; 0x249c <__vector_10+0x116>
			stopwatches.watch5++;
    248a:	80 91 da 01 	lds	r24, 0x01DA
    248e:	90 91 db 01 	lds	r25, 0x01DB
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	90 93 db 01 	sts	0x01DB, r25
    2498:	80 93 da 01 	sts	0x01DA, r24
		if(stopwatches.watches & STOPWATCH6)
    249c:	80 91 d1 01 	lds	r24, 0x01D1
    24a0:	88 2f       	mov	r24, r24
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	80 72       	andi	r24, 0x20	; 32
    24a6:	90 70       	andi	r25, 0x00	; 0
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	49 f0       	breq	.+18     	; 0x24be <__vector_10+0x138>
			stopwatches.watch6++;
    24ac:	80 91 dc 01 	lds	r24, 0x01DC
    24b0:	90 91 dd 01 	lds	r25, 0x01DD
    24b4:	01 96       	adiw	r24, 0x01	; 1
    24b6:	90 93 dd 01 	sts	0x01DD, r25
    24ba:	80 93 dc 01 	sts	0x01DC, r24
		if(stopwatches.watches & STOPWATCH7)
    24be:	80 91 d1 01 	lds	r24, 0x01D1
    24c2:	88 2f       	mov	r24, r24
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	80 74       	andi	r24, 0x40	; 64
    24c8:	90 70       	andi	r25, 0x00	; 0
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	49 f0       	breq	.+18     	; 0x24e0 <__vector_10+0x15a>
			stopwatches.watch7++;
    24ce:	80 91 de 01 	lds	r24, 0x01DE
    24d2:	90 91 df 01 	lds	r25, 0x01DF
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	90 93 df 01 	sts	0x01DF, r25
    24dc:	80 93 de 01 	sts	0x01DE, r24
		if(stopwatches.watches & STOPWATCH8)
    24e0:	80 91 d1 01 	lds	r24, 0x01D1
    24e4:	88 23       	and	r24, r24
    24e6:	4c f4       	brge	.+18     	; 0x24fa <__vector_10+0x174>
			stopwatches.watch8++;
    24e8:	80 91 e0 01 	lds	r24, 0x01E0
    24ec:	90 91 e1 01 	lds	r25, 0x01E1
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	90 93 e1 01 	sts	0x01E1, r25
    24f6:	80 93 e0 01 	sts	0x01E0, r24

		// Speed measurement timer
		if(speed_timer++ > SPEED_TIMER_BASE) {
    24fa:	80 91 ed 01 	lds	r24, 0x01ED
    24fe:	89 87       	std	Y+9, r24	; 0x09
    2500:	18 86       	std	Y+8, r1	; 0x08
    2502:	99 85       	ldd	r25, Y+9	; 0x09
    2504:	99 3c       	cpi	r25, 0xC9	; 201
    2506:	10 f0       	brcs	.+4      	; 0x250c <__vector_10+0x186>
    2508:	21 e0       	ldi	r18, 0x01	; 1
    250a:	28 87       	std	Y+8, r18	; 0x08
    250c:	89 85       	ldd	r24, Y+9	; 0x09
    250e:	8f 5f       	subi	r24, 0xFF	; 255
    2510:	80 93 ed 01 	sts	0x01ED, r24
    2514:	88 85       	ldd	r24, Y+8	; 0x08
    2516:	88 23       	and	r24, r24
    2518:	e9 f0       	breq	.+58     	; 0x2554 <__vector_10+0x1ce>
			mright_speed = mright_counter;
    251a:	80 91 cb 01 	lds	r24, 0x01CB
    251e:	90 91 cc 01 	lds	r25, 0x01CC
    2522:	90 93 fe 01 	sts	0x01FE, r25
    2526:	80 93 fd 01 	sts	0x01FD, r24
			mleft_speed = mleft_counter;
    252a:	80 91 f5 01 	lds	r24, 0x01F5
    252e:	90 91 f6 01 	lds	r25, 0x01F6
    2532:	90 93 bc 01 	sts	0x01BC, r25
    2536:	80 93 bb 01 	sts	0x01BB, r24
			mright_counter = 0;
    253a:	10 92 cc 01 	sts	0x01CC, r1
    253e:	10 92 cb 01 	sts	0x01CB, r1
			mleft_counter = 0;
    2542:	10 92 f6 01 	sts	0x01F6, r1
    2546:	10 92 f5 01 	sts	0x01F5, r1
			motor_control = true;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	80 93 b7 01 	sts	0x01B7, r24
			speed_timer = 0;
    2550:	10 92 ed 01 	sts	0x01ED, r1
		}
		
		// Power on LED flashing:
		#ifdef POWER_ON_WARNING
			if(leds_on < 3) {
    2554:	80 91 b8 01 	lds	r24, 0x01B8
    2558:	83 30       	cpi	r24, 0x03	; 3
    255a:	08 f0       	brcs	.+2      	; 0x255e <__vector_10+0x1d8>
    255c:	a3 c0       	rjmp	.+326    	; 0x26a4 <__vector_10+0x31e>
				if(leds_on == 2) {
    255e:	80 91 b8 01 	lds	r24, 0x01B8
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	09 f0       	breq	.+2      	; 0x2568 <__vector_10+0x1e2>
    2566:	6b c0       	rjmp	.+214    	; 0x263e <__vector_10+0x2b8>
					if(!statusLEDs.byte) {
    2568:	80 91 a1 01 	lds	r24, 0x01A1
    256c:	88 23       	and	r24, r24
    256e:	09 f0       	breq	.+2      	; 0x2572 <__vector_10+0x1ec>
    2570:	4b c0       	rjmp	.+150    	; 0x2608 <__vector_10+0x282>
						if(leds_on_timer++ % 200 == 0) {
    2572:	80 91 84 01 	lds	r24, 0x0184
    2576:	90 91 85 01 	lds	r25, 0x0185
    257a:	9f 83       	std	Y+7, r25	; 0x07
    257c:	8e 83       	std	Y+6, r24	; 0x06
    257e:	28 ec       	ldi	r18, 0xC8	; 200
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	8e 81       	ldd	r24, Y+6	; 0x06
    2584:	9f 81       	ldd	r25, Y+7	; 0x07
    2586:	b9 01       	movw	r22, r18
    2588:	0e 94 65 1f 	call	0x3eca	; 0x3eca <__udivmodhi4>
    258c:	1d 82       	std	Y+5, r1	; 0x05
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	11 f4       	brne	.+4      	; 0x2596 <__vector_10+0x210>
    2592:	91 e0       	ldi	r25, 0x01	; 1
    2594:	9d 83       	std	Y+5, r25	; 0x05
    2596:	8e 81       	ldd	r24, Y+6	; 0x06
    2598:	9f 81       	ldd	r25, Y+7	; 0x07
    259a:	01 96       	adiw	r24, 0x01	; 1
    259c:	90 93 85 01 	sts	0x0185, r25
    25a0:	80 93 84 01 	sts	0x0184, r24
    25a4:	2d 81       	ldd	r18, Y+5	; 0x05
    25a6:	22 23       	and	r18, r18
    25a8:	09 f4       	brne	.+2      	; 0x25ac <__vector_10+0x226>
    25aa:	7c c0       	rjmp	.+248    	; 0x26a4 <__vector_10+0x31e>
							if(leds_on_timer > POWER_ON_SHOW_TIME) {
    25ac:	80 91 84 01 	lds	r24, 0x0184
    25b0:	90 91 85 01 	lds	r25, 0x0185
    25b4:	2f e0       	ldi	r18, 0x0F	; 15
    25b6:	81 3a       	cpi	r24, 0xA1	; 161
    25b8:	92 07       	cpc	r25, r18
    25ba:	a8 f0       	brcs	.+42     	; 0x25e6 <__vector_10+0x260>
								DDRB &= ~SL5; 
    25bc:	a7 e3       	ldi	r26, 0x37	; 55
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e7 e3       	ldi	r30, 0x37	; 55
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	8d 7f       	andi	r24, 0xFD	; 253
    25c8:	8c 93       	st	X, r24
								PORTB &= ~SL5;
    25ca:	a8 e3       	ldi	r26, 0x38	; 56
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e8 e3       	ldi	r30, 0x38	; 56
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	8d 7f       	andi	r24, 0xFD	; 253
    25d6:	8c 93       	st	X, r24
								leds_on = 0;
    25d8:	10 92 b8 01 	sts	0x01B8, r1
								leds_on_timer = 0;
    25dc:	10 92 85 01 	sts	0x0185, r1
    25e0:	10 92 84 01 	sts	0x0184, r1
    25e4:	5f c0       	rjmp	.+190    	; 0x26a4 <__vector_10+0x31e>
							}
							else {
								DDRB ^= SL5; 
    25e6:	a7 e3       	ldi	r26, 0x37	; 55
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e7 e3       	ldi	r30, 0x37	; 55
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	90 81       	ld	r25, Z
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	89 27       	eor	r24, r25
    25f4:	8c 93       	st	X, r24
								PORTB ^= SL5;
    25f6:	a8 e3       	ldi	r26, 0x38	; 56
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e8 e3       	ldi	r30, 0x38	; 56
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	90 81       	ld	r25, Z
    2600:	82 e0       	ldi	r24, 0x02	; 2
    2602:	89 27       	eor	r24, r25
    2604:	8c 93       	st	X, r24
    2606:	4e c0       	rjmp	.+156    	; 0x26a4 <__vector_10+0x31e>
							}
						}
					}
					else {
						if(!statusLEDs.LED5) {
    2608:	80 91 a1 01 	lds	r24, 0x01A1
    260c:	80 71       	andi	r24, 0x10	; 16
    260e:	88 23       	and	r24, r24
    2610:	71 f4       	brne	.+28     	; 0x262e <__vector_10+0x2a8>
							DDRB &= ~SL5; 
    2612:	a7 e3       	ldi	r26, 0x37	; 55
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e7 e3       	ldi	r30, 0x37	; 55
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	8d 7f       	andi	r24, 0xFD	; 253
    261e:	8c 93       	st	X, r24
							PORTB &= ~SL5;
    2620:	a8 e3       	ldi	r26, 0x38	; 56
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e8 e3       	ldi	r30, 0x38	; 56
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	8d 7f       	andi	r24, 0xFD	; 253
    262c:	8c 93       	st	X, r24
						}
						leds_on_timer = 0;
    262e:	10 92 85 01 	sts	0x0185, r1
    2632:	10 92 84 01 	sts	0x0184, r1
						leds_on = 1;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	80 93 b8 01 	sts	0x01B8, r24
    263c:	33 c0       	rjmp	.+102    	; 0x26a4 <__vector_10+0x31e>
					}
				}
				else if(leds_on_timer > POWER_ON_WAIT_TIME) {
    263e:	80 91 84 01 	lds	r24, 0x0184
    2642:	90 91 85 01 	lds	r25, 0x0185
    2646:	2e e2       	ldi	r18, 0x2E	; 46
    2648:	81 3e       	cpi	r24, 0xE1	; 225
    264a:	92 07       	cpc	r25, r18
    264c:	10 f1       	brcs	.+68     	; 0x2692 <__vector_10+0x30c>
					if(leds_on == 1) {
    264e:	80 91 b8 01 	lds	r24, 0x01B8
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	b1 f4       	brne	.+44     	; 0x2682 <__vector_10+0x2fc>
						leds_on = 0;
    2656:	10 92 b8 01 	sts	0x01B8, r1
						if(!statusLEDs.LED5) {
    265a:	80 91 a1 01 	lds	r24, 0x01A1
    265e:	80 71       	andi	r24, 0x10	; 16
    2660:	88 23       	and	r24, r24
    2662:	91 f4       	brne	.+36     	; 0x2688 <__vector_10+0x302>
							DDRB &= ~SL5; 
    2664:	a7 e3       	ldi	r26, 0x37	; 55
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e7 e3       	ldi	r30, 0x37	; 55
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	8d 7f       	andi	r24, 0xFD	; 253
    2670:	8c 93       	st	X, r24
							PORTB &= ~SL5;
    2672:	a8 e3       	ldi	r26, 0x38	; 56
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e8 e3       	ldi	r30, 0x38	; 56
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8d 7f       	andi	r24, 0xFD	; 253
    267e:	8c 93       	st	X, r24
    2680:	03 c0       	rjmp	.+6      	; 0x2688 <__vector_10+0x302>
						}
					}
					else 
						leds_on = 2;
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	80 93 b8 01 	sts	0x01B8, r24
					leds_on_timer = 0;
    2688:	10 92 85 01 	sts	0x0185, r1
    268c:	10 92 84 01 	sts	0x0184, r1
    2690:	09 c0       	rjmp	.+18     	; 0x26a4 <__vector_10+0x31e>
				}
				else
					leds_on_timer++;
    2692:	80 91 84 01 	lds	r24, 0x0184
    2696:	90 91 85 01 	lds	r25, 0x0185
    269a:	01 96       	adiw	r24, 0x01	; 1
    269c:	90 93 85 01 	sts	0x0185, r25
    26a0:	80 93 84 01 	sts	0x0184, r24
			}
		#endif

		// ACS timer:
		if(acs_timer < (ACS_UPDATE_INTERVAL+1))
    26a4:	80 91 c5 01 	lds	r24, 0x01C5
    26a8:	90 91 c6 01 	lds	r25, 0x01C6
    26ac:	83 30       	cpi	r24, 0x03	; 3
    26ae:	91 05       	cpc	r25, r1
    26b0:	48 f4       	brcc	.+18     	; 0x26c4 <__vector_10+0x33e>
			acs_timer++;	
    26b2:	80 91 c5 01 	lds	r24, 0x01C5
    26b6:	90 91 c6 01 	lds	r25, 0x01C6
    26ba:	01 96       	adiw	r24, 0x01	; 1
    26bc:	90 93 c6 01 	sts	0x01C6, r25
    26c0:	80 93 c5 01 	sts	0x01C5, r24

		// Overcurrent measurement timer
		if(overcurrent_timer < 55)
    26c4:	80 91 e5 01 	lds	r24, 0x01E5
    26c8:	87 33       	cpi	r24, 0x37	; 55
    26ca:	28 f4       	brcc	.+10     	; 0x26d6 <__vector_10+0x350>
			overcurrent_timer++;
    26cc:	80 91 e5 01 	lds	r24, 0x01E5
    26d0:	8f 5f       	subi	r24, 0xFF	; 255
    26d2:	80 93 e5 01 	sts	0x01E5, r24
		
		// Bumper check timer
		if(bumper_timer < 52)
    26d6:	80 91 f0 01 	lds	r24, 0x01F0
    26da:	84 33       	cpi	r24, 0x34	; 52
    26dc:	28 f4       	brcc	.+10     	; 0x26e8 <__vector_10+0x362>
			bumper_timer++;		
    26de:	80 91 f0 01 	lds	r24, 0x01F0
    26e2:	8f 5f       	subi	r24, 0xFF	; 255
    26e4:	80 93 f0 01 	sts	0x01F0, r24
		
		// Soft PWM adjustment and automatic PWM shutdown if motor power is 0:
		if(speed_adjust_timer++ > 2) {
    26e8:	80 91 eb 01 	lds	r24, 0x01EB
    26ec:	8c 83       	std	Y+4, r24	; 0x04
    26ee:	1b 82       	std	Y+3, r1	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	93 30       	cpi	r25, 0x03	; 3
    26f4:	10 f0       	brcs	.+4      	; 0x26fa <__vector_10+0x374>
    26f6:	21 e0       	ldi	r18, 0x01	; 1
    26f8:	2b 83       	std	Y+3, r18	; 0x03
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	8f 5f       	subi	r24, 0xFF	; 255
    26fe:	80 93 eb 01 	sts	0x01EB, r24
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	88 23       	and	r24, r24
    2706:	09 f4       	brne	.+2      	; 0x270a <__vector_10+0x384>
    2708:	5e c0       	rjmp	.+188    	; 0x27c6 <__vector_10+0x440>
			if(mright_ptmp != mright_power) {
    270a:	80 91 e6 01 	lds	r24, 0x01E6
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	80 91 c9 01 	lds	r24, 0x01C9
    2716:	90 91 ca 01 	lds	r25, 0x01CA
    271a:	28 17       	cp	r18, r24
    271c:	39 07       	cpc	r19, r25
    271e:	d9 f0       	breq	.+54     	; 0x2756 <__vector_10+0x3d0>
				if(mright_ptmp < mright_power) 
    2720:	80 91 e6 01 	lds	r24, 0x01E6
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	80 91 c9 01 	lds	r24, 0x01C9
    272c:	90 91 ca 01 	lds	r25, 0x01CA
    2730:	28 17       	cp	r18, r24
    2732:	39 07       	cpc	r19, r25
    2734:	34 f4       	brge	.+12     	; 0x2742 <__vector_10+0x3bc>
					mright_ptmp++;
    2736:	80 91 e6 01 	lds	r24, 0x01E6
    273a:	8f 5f       	subi	r24, 0xFF	; 255
    273c:	80 93 e6 01 	sts	0x01E6, r24
    2740:	05 c0       	rjmp	.+10     	; 0x274c <__vector_10+0x3c6>
				else 
					mright_ptmp--;
    2742:	80 91 e6 01 	lds	r24, 0x01E6
    2746:	81 50       	subi	r24, 0x01	; 1
    2748:	80 93 e6 01 	sts	0x01E6, r24
				OCR1AL = mright_ptmp;
    274c:	ea e4       	ldi	r30, 0x4A	; 74
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 91 e6 01 	lds	r24, 0x01E6
    2754:	80 83       	st	Z, r24
			}
			if(mleft_ptmp != mleft_power) {
    2756:	80 91 08 02 	lds	r24, 0x0208
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	80 91 b9 01 	lds	r24, 0x01B9
    2762:	90 91 ba 01 	lds	r25, 0x01BA
    2766:	28 17       	cp	r18, r24
    2768:	39 07       	cpc	r19, r25
    276a:	d9 f0       	breq	.+54     	; 0x27a2 <__vector_10+0x41c>
				if(mleft_ptmp < mleft_power) 
    276c:	80 91 08 02 	lds	r24, 0x0208
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	80 91 b9 01 	lds	r24, 0x01B9
    2778:	90 91 ba 01 	lds	r25, 0x01BA
    277c:	28 17       	cp	r18, r24
    277e:	39 07       	cpc	r19, r25
    2780:	34 f4       	brge	.+12     	; 0x278e <__vector_10+0x408>
					mleft_ptmp++;
    2782:	80 91 08 02 	lds	r24, 0x0208
    2786:	8f 5f       	subi	r24, 0xFF	; 255
    2788:	80 93 08 02 	sts	0x0208, r24
    278c:	05 c0       	rjmp	.+10     	; 0x2798 <__vector_10+0x412>
				else 
					mleft_ptmp--;
    278e:	80 91 08 02 	lds	r24, 0x0208
    2792:	81 50       	subi	r24, 0x01	; 1
    2794:	80 93 08 02 	sts	0x0208, r24
				OCR1BL = mleft_ptmp;
    2798:	e8 e4       	ldi	r30, 0x48	; 72
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 91 08 02 	lds	r24, 0x0208
    27a0:	80 83       	st	Z, r24
			}
			if(mleft_ptmp || mright_ptmp)
    27a2:	80 91 08 02 	lds	r24, 0x0208
    27a6:	88 23       	and	r24, r24
    27a8:	21 f4       	brne	.+8      	; 0x27b2 <__vector_10+0x42c>
    27aa:	80 91 e6 01 	lds	r24, 0x01E6
    27ae:	88 23       	and	r24, r24
    27b0:	29 f0       	breq	.+10     	; 0x27bc <__vector_10+0x436>
				TCCR1A = (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
    27b2:	ef e4       	ldi	r30, 0x4F	; 79
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	82 ea       	ldi	r24, 0xA2	; 162
    27b8:	80 83       	st	Z, r24
    27ba:	03 c0       	rjmp	.+6      	; 0x27c2 <__vector_10+0x43c>
			else
				TCCR1A = 0;
    27bc:	ef e4       	ldi	r30, 0x4F	; 79
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	10 82       	st	Z, r1
			speed_adjust_timer = 0;
    27c2:	10 92 eb 01 	sts	0x01EB, r1
		}

		ms_timer = 0;
    27c6:	10 92 fc 01 	sts	0x01FC, r1
	
	static uint8_t	IRCOMM_RC5_bit;		// bit value
	static uint8_t	IRCOMM_RC5_time;	// count bit time
	static uint16_t IRCOMM_RC5_tmp;		// shift bits in
	
	if((!sysStatACS.rc5_data_received)) {
    27ca:	80 91 ad 01 	lds	r24, 0x01AD
    27ce:	88 70       	andi	r24, 0x08	; 8
    27d0:	88 23       	and	r24, r24
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <__vector_10+0x450>
    27d4:	77 c0       	rjmp	.+238    	; 0x28c4 <__vector_10+0x53e>
		uint16_t tmp = IRCOMM_RC5_tmp;
    27d6:	80 91 80 01 	lds	r24, 0x0180
    27da:	90 91 81 01 	lds	r25, 0x0181
    27de:	9a 83       	std	Y+2, r25	; 0x02
    27e0:	89 83       	std	Y+1, r24	; 0x01
		if(++IRCOMM_RC5_time > RC5_PULSE_MAX) {				// count pulse time
    27e2:	80 91 82 01 	lds	r24, 0x0182
    27e6:	8f 5f       	subi	r24, 0xFF	; 255
    27e8:	80 93 82 01 	sts	0x0182, r24
    27ec:	80 91 82 01 	lds	r24, 0x0182
    27f0:	86 31       	cpi	r24, 0x16	; 22
    27f2:	f0 f0       	brcs	.+60     	; 0x2830 <__vector_10+0x4aa>
			if(!(tmp & 0x4000) && (tmp & 0x2000)) {			// only 14 bits received?
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	9a 81       	ldd	r25, Y+2	; 0x02
    27f8:	80 70       	andi	r24, 0x00	; 0
    27fa:	90 74       	andi	r25, 0x40	; 64
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	89 f4       	brne	.+34     	; 0x2822 <__vector_10+0x49c>
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	80 70       	andi	r24, 0x00	; 0
    2806:	90 72       	andi	r25, 0x20	; 32
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	59 f0       	breq	.+22     	; 0x2822 <__vector_10+0x49c>
				IRCOMM_RC5_data_ok.data = tmp;				// store result
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	9a 81       	ldd	r25, Y+2	; 0x02
    2810:	90 93 07 02 	sts	0x0207, r25
    2814:	80 93 06 02 	sts	0x0206, r24
				sysStatACS.rc5_data_received = true; // we have new data!
    2818:	80 91 ad 01 	lds	r24, 0x01AD
    281c:	88 60       	ori	r24, 0x08	; 8
    281e:	80 93 ad 01 	sts	0x01AD, r24
			}
			sysStatACS.detect_rc5 = false; // NO RC5! 
    2822:	80 91 ad 01 	lds	r24, 0x01AD
    2826:	8f 7e       	andi	r24, 0xEF	; 239
    2828:	80 93 ad 01 	sts	0x01AD, r24
			tmp = 0;
    282c:	1a 82       	std	Y+2, r1	; 0x02
    282e:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((IRCOMM_RC5_bit ^ PINB) & ACS) {				// change detect
    2830:	e6 e3       	ldi	r30, 0x36	; 54
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	90 81       	ld	r25, Z
    2836:	80 91 83 01 	lds	r24, 0x0183
    283a:	89 27       	eor	r24, r25
    283c:	88 2f       	mov	r24, r24
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	84 70       	andi	r24, 0x04	; 4
    2842:	90 70       	andi	r25, 0x00	; 0
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	c1 f1       	breq	.+112    	; 0x28b8 <__vector_10+0x532>
			IRCOMM_RC5_bit = ~IRCOMM_RC5_bit;				// 0x00 -> 0xFF -> 0x00
    2848:	80 91 83 01 	lds	r24, 0x0183
    284c:	80 95       	com	r24
    284e:	80 93 83 01 	sts	0x0183, r24
			if(IRCOMM_RC5_time < RC5_PULSE_MIN)	{			// to short
    2852:	80 91 82 01 	lds	r24, 0x0182
    2856:	87 30       	cpi	r24, 0x07	; 7
    2858:	38 f4       	brcc	.+14     	; 0x2868 <__vector_10+0x4e2>
				sysStatACS.detect_rc5 = false; // RC5 transmission detected! 
    285a:	80 91 ad 01 	lds	r24, 0x01AD
    285e:	8f 7e       	andi	r24, 0xEF	; 239
    2860:	80 93 ad 01 	sts	0x01AD, r24
				tmp = 0;
    2864:	1a 82       	std	Y+2, r1	; 0x02
    2866:	19 82       	std	Y+1, r1	; 0x01
			}
			if(!tmp || (IRCOMM_RC5_time > RC5_PULSE_1_2)) {	// start or long pulse time
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	21 f0       	breq	.+8      	; 0x2878 <__vector_10+0x4f2>
    2870:	80 91 82 01 	lds	r24, 0x0182
    2874:	8f 30       	cpi	r24, 0x0F	; 15
    2876:	00 f1       	brcs	.+64     	; 0x28b8 <__vector_10+0x532>
				sysStatACS.detect_rc5 = true;
    2878:	80 91 ad 01 	lds	r24, 0x01AD
    287c:	80 61       	ori	r24, 0x10	; 16
    287e:	80 93 ad 01 	sts	0x01AD, r24
				if(!(tmp & 0x4000))							// not to many bits
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	80 70       	andi	r24, 0x00	; 0
    2888:	90 74       	andi	r25, 0x40	; 64
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	31 f4       	brne	.+12     	; 0x289a <__vector_10+0x514>
					tmp <<= 1;								// shift
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
				if(!(IRCOMM_RC5_bit & ACS))					// inverted bit
    289a:	80 91 83 01 	lds	r24, 0x0183
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	84 70       	andi	r24, 0x04	; 4
    28a4:	90 70       	andi	r25, 0x00	; 0
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	29 f4       	brne	.+10     	; 0x28b4 <__vector_10+0x52e>
					tmp |= 1;								// insert new bit
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	81 60       	ori	r24, 0x01	; 1
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	89 83       	std	Y+1, r24	; 0x01
				IRCOMM_RC5_time = 0;						// count next pulse time
    28b4:	10 92 82 01 	sts	0x0182, r1
			}
		}
		IRCOMM_RC5_tmp = tmp;	
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	90 93 81 01 	sts	0x0181, r25
    28c0:	80 93 80 01 	sts	0x0180, r24
		if(!isEncoderRight())
			cycle_l_r_tmp++;
		else 
			cycle_h_r_tmp++;
	#endif
}
    28c4:	2b 96       	adiw	r28, 0x0b	; 11
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	ff 91       	pop	r31
    28d0:	ef 91       	pop	r30
    28d2:	bf 91       	pop	r27
    28d4:	af 91       	pop	r26
    28d6:	9f 91       	pop	r25
    28d8:	8f 91       	pop	r24
    28da:	7f 91       	pop	r23
    28dc:	6f 91       	pop	r22
    28de:	5f 91       	pop	r21
    28e0:	3f 91       	pop	r19
    28e2:	2f 91       	pop	r18
    28e4:	0f 90       	pop	r0
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	0f 90       	pop	r0
    28ea:	1f 90       	pop	r1
    28ec:	18 95       	reti

000028ee <sleep>:
 *		sleep(100); // delay 100 * 100us = 10000us = 10ms
 *		// The maximum delay is:
 *		sleep(255); // delay 255 * 100us = 25500us = 25.5ms
 */
void sleep(uint8_t time)
{
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	0f 92       	push	r0
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	89 83       	std	Y+1, r24	; 0x01
	for (delay_timer = 0; delay_timer < time;);
    28fa:	10 92 f9 01 	sts	0x01F9, r1
    28fe:	90 91 f9 01 	lds	r25, 0x01F9
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	98 17       	cp	r25, r24
    2906:	d8 f3       	brcs	.-10     	; 0x28fe <sleep+0x10>
}
    2908:	0f 90       	pop	r0
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <mSleep>:
 *      mSleep(100); // delay 100 * 1ms = 100ms = 0.1s
 *		mSleep(1000); // delay 1000 * 1ms = 1000ms = 1s
 *
 */
void mSleep(uint16_t time)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	00 d0       	rcall	.+0      	; 0x2916 <mSleep+0x6>
    2916:	0f 92       	push	r0
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	9a 83       	std	Y+2, r25	; 0x02
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	03 c0       	rjmp	.+6      	; 0x2928 <mSleep+0x18>
	while (time--) sleep(10);
    2922:	8a e0       	ldi	r24, 0x0A	; 10
    2924:	0e 94 77 14 	call	0x28ee	; 0x28ee <sleep>
    2928:	1b 82       	std	Y+3, r1	; 0x03
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	11 f0       	breq	.+4      	; 0x2936 <mSleep+0x26>
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	8b 83       	std	Y+3, r24	; 0x03
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	88 23       	and	r24, r24
    2944:	71 f7       	brne	.-36     	; 0x2922 <mSleep+0x12>
}
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <delayCycles>:
 * Example:
 * 	delayCycles(1000); // Delays for minimal 1000 instruction cycles
 *					   // (it will be a lot more...)
 */
void delayCycles(uint16_t dly)
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	00 d0       	rcall	.+0      	; 0x2958 <delayCycles+0x6>
    2958:	0f 92       	push	r0
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	01 c0       	rjmp	.+2      	; 0x2966 <delayCycles+0x14>
	while(dly--) nop();
    2964:	00 00       	nop
    2966:	1b 82       	std	Y+3, r1	; 0x03
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	9a 81       	ldd	r25, Y+2	; 0x02
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	11 f0       	breq	.+4      	; 0x2974 <delayCycles+0x22>
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	8b 83       	std	Y+3, r24	; 0x03
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	88 23       	and	r24, r24
    2982:	81 f7       	brne	.-32     	; 0x2964 <delayCycles+0x12>
}
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <extIntON>:

/**
 * Set external interrupt to high level
 */
void extIntON(void)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
	DDRA |= E_INT1;
    2998:	aa e3       	ldi	r26, 0x3A	; 58
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	ea e3       	ldi	r30, 0x3A	; 58
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	80 61       	ori	r24, 0x10	; 16
    29a4:	8c 93       	st	X, r24
	PORTA |= E_INT1;
    29a6:	ab e3       	ldi	r26, 0x3B	; 59
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	eb e3       	ldi	r30, 0x3B	; 59
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	80 61       	ori	r24, 0x10	; 16
    29b2:	8c 93       	st	X, r24
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <extIntOFF>:

/**
 * Set external interrupt to low level
 */
void extIntOFF(void)
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
	PORTA &= ~E_INT1;
    29c2:	ab e3       	ldi	r26, 0x3B	; 59
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	eb e3       	ldi	r30, 0x3B	; 59
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	8f 7e       	andi	r24, 0xEF	; 239
    29ce:	8c 93       	st	X, r24
	DDRA &= ~E_INT1;
    29d0:	aa e3       	ldi	r26, 0x3A	; 58
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	ea e3       	ldi	r30, 0x3A	; 58
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	8f 7e       	andi	r24, 0xEF	; 239
    29dc:	8c 93       	st	X, r24
}
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <task_RP6System>:

/**
 * Calls all important system tasks.
 */
void task_RP6System(void)
{
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
	task_ADC();
    29ec:	0e 94 d6 05 	call	0xbac	; 0xbac <task_ADC>
	task_ACS();
    29f0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <task_ACS>
	task_Bumpers();
    29f4:	0e 94 5e 05 	call	0xabc	; 0xabc <task_Bumpers>
	task_motionControl();
    29f8:	0e 94 6e 07 	call	0xedc	; 0xedc <task_motionControl>
}
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <initRobotBase>:
 *				return 0;
 *			}
 *
 */
void initRobotBase(void)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	0f 92       	push	r0
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
	portInit();		// Setup port directions and initial values.
    2a0c:	eb e3       	ldi	r30, 0x3B	; 59
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	10 82       	st	Z, r1
    2a12:	e8 e3       	ldi	r30, 0x38	; 56
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	10 82       	st	Z, r1
    2a18:	e5 e3       	ldi	r30, 0x35	; 53
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	10 82       	st	Z, r1
    2a1e:	e2 e3       	ldi	r30, 0x32	; 50
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	80 83       	st	Z, r24
    2a26:	ea e3       	ldi	r30, 0x3A	; 58
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	10 82       	st	Z, r1
    2a2c:	e7 e3       	ldi	r30, 0x37	; 55
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	88 e5       	ldi	r24, 0x58	; 88
    2a32:	80 83       	st	Z, r24
    2a34:	e4 e3       	ldi	r30, 0x34	; 52
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	8c e8       	ldi	r24, 0x8C	; 140
    2a3a:	80 83       	st	Z, r24
    2a3c:	e1 e3       	ldi	r30, 0x31	; 49
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	82 ef       	ldi	r24, 0xF2	; 242
    2a42:	80 83       	st	Z, r24
					// THIS IS THE MOST IMPORTANT STEP!

	cli();			// Disable global interrupts
    2a44:	f8 94       	cli
	
	enableResetButton(); // Make sure the Reset Button is enabled!
    2a46:	a8 e3       	ldi	r26, 0x38	; 56
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e8 e3       	ldi	r30, 0x38	; 56
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	8f 7d       	andi	r24, 0xDF	; 223
    2a52:	8c 93       	st	X, r24
    2a54:	a7 e3       	ldi	r26, 0x37	; 55
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e7 e3       	ldi	r30, 0x37	; 55
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	80 62       	ori	r24, 0x20	; 32
    2a60:	8c 93       	st	X, r24
    2a62:	8c 91       	ld	r24, X
						 // Do not disable it if you want to be able to
						 // reset your robot! (Otherwise you can only
						 // stop it by switching it off completely, 
						 // if it gets out of control ;) )

	IRCOMM_OFF(); 	     // Make sure that IRCOMM and ...
    2a64:	a2 e3       	ldi	r26, 0x32	; 50
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e2 e3       	ldi	r30, 0x32	; 50
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	8f 77       	andi	r24, 0x7F	; 127
    2a70:	8c 93       	st	X, r24
	setACSPwrOff();		 // ACS are turned OFF!
    2a72:	0e 94 ed 10 	call	0x21da	; 0x21da <setACSPwrOff>

	// UART:
	UBRRH = UBRR_BAUD_LOW >> 8;	// Setup UART: Baudrate is Low Speed
    2a76:	e0 e4       	ldi	r30, 0x40	; 64
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	10 82       	st	Z, r1
	UBRRL = (uint8_t) UBRR_BAUD_LOW;
    2a7c:	e9 e2       	ldi	r30, 0x29	; 41
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	8c e0       	ldi	r24, 0x0C	; 12
    2a82:	80 83       	st	Z, r24
	UCSRA = 0x00;
    2a84:	eb e2       	ldi	r30, 0x2B	; 43
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	10 82       	st	Z, r1
    UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    2a8a:	e0 e4       	ldi	r30, 0x40	; 64
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	86 e8       	ldi	r24, 0x86	; 134
    2a90:	80 83       	st	Z, r24
    UCSRB = (1 << TXEN) | (1 << RXEN) | (1 << RXCIE);
    2a92:	ea e2       	ldi	r30, 0x2A	; 42
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	88 e9       	ldi	r24, 0x98	; 152
    2a98:	80 83       	st	Z, r24
	
	// Initialize ADC:
	ADMUX = 0; //external reference 
    2a9a:	e7 e2       	ldi	r30, 0x27	; 39
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	10 82       	st	Z, r1
	ADCSRA = (0<<ADIE) | (0<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADIF);
    2aa0:	e6 e2       	ldi	r30, 0x26	; 38
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	86 e1       	ldi	r24, 0x16	; 22
    2aa6:	80 83       	st	Z, r24
	SFIOR = 0;
    2aa8:	e0 e5       	ldi	r30, 0x50	; 80
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	10 82       	st	Z, r1

	// Initialize External interrupts:
	MCUCR = (0 << ISC11) | (1 << ISC10) | (0 << ISC01) | (1 << ISC00);
    2aae:	e5 e5       	ldi	r30, 0x55	; 85
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	85 e0       	ldi	r24, 0x05	; 5
    2ab4:	80 83       	st	Z, r24
	GICR = (1 << INT2) | (1 << INT1) | (1 << INT0);
    2ab6:	eb e5       	ldi	r30, 0x5B	; 91
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 ee       	ldi	r24, 0xE0	; 224
    2abc:	80 83       	st	Z, r24
	MCUCSR = (0 << ISC2);
    2abe:	e4 e5       	ldi	r30, 0x54	; 84
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	10 82       	st	Z, r1

	// Initialize Timer 0 -  100µs cycle for Delays/Stopwatches, RC5 reception etc.:
	TCCR0 =   (0 << WGM00) | (1 << WGM01) 
    2ac4:	e3 e5       	ldi	r30, 0x53	; 83
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	8a e0       	ldi	r24, 0x0A	; 10
    2aca:	80 83       	st	Z, r24
			| (0 << COM00) | (0 << COM01) 
			| (0 << CS02)  | (1 << CS01) | (0 << CS00);
	OCR0  = 99;
    2acc:	ec e5       	ldi	r30, 0x5C	; 92
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	83 e6       	ldi	r24, 0x63	; 99
    2ad2:	80 83       	st	Z, r24

	// Initialize Timer1 - PWM:
	// PWM, phase correct with ICR1 as top value.
	TCCR1A = (0 << WGM10) | (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
    2ad4:	ef e4       	ldi	r30, 0x4F	; 79
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	82 ea       	ldi	r24, 0xA2	; 162
    2ada:	80 83       	st	Z, r24
	TCCR1B =  (1 << WGM13) | (0 << WGM12) | (1 << CS10);
    2adc:	ee e4       	ldi	r30, 0x4E	; 78
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	81 e1       	ldi	r24, 0x11	; 17
    2ae2:	80 83       	st	Z, r24
	ICR1 = 210; // Phase corret PWM top value - 210 results in 
    2ae4:	e6 e4       	ldi	r30, 0x46	; 70
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	82 ed       	ldi	r24, 0xD2	; 210
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	80 83       	st	Z, r24
				// annoying high pitch noises from the motors!
				// 19 kHz is a bit over the maximum frequency most people can
				// hear!
				// 
				// ATTENTION: Max PWM value is 210 and NOT 255 !!!
	OCR1AL = 0;
    2af0:	ea e4       	ldi	r30, 0x4A	; 74
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	10 82       	st	Z, r1
	OCR1BL = 0;
    2af6:	e8 e4       	ldi	r30, 0x48	; 72
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	10 82       	st	Z, r1
	setMotorDir(FWD,FWD); 	// Direction Forwards
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	0e 94 91 0c 	call	0x1922	; 0x1922 <setMotorDir>

	// Initialize Timer2 - ACS:
	TCCR2 = (1 << WGM21) | (0 << COM20) | (1 << CS20);
    2b04:	e5 e4       	ldi	r30, 0x45	; 69
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	89 e0       	ldi	r24, 0x09	; 9
    2b0a:	80 83       	st	Z, r24
	OCR2  = 0x6E; // 0x6E = 72kHz @8MHz
    2b0c:	e3 e4       	ldi	r30, 0x43	; 67
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	8e e6       	ldi	r24, 0x6E	; 110
    2b12:	80 83       	st	Z, r24
	
	// Initialize Timer Interrupts:
	TIMSK = (1 << OCIE0); //| (1 << OCIE2); // Fixed: Timer2 Interrupt is turned 
    2b14:	e9 e5       	ldi	r30, 0x59	; 89
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	82 e0       	ldi	r24, 0x02	; 2
    2b1a:	80 83       	st	Z, r24
	                      // off by default now! It is only active 
						  // when ACS/IRCOMM are transmitting.

	// Initialize ACS:
	sysStatACS.channel = ACS_CHANNEL_RIGHT;
    2b1c:	80 91 ad 01 	lds	r24, 0x01AD
    2b20:	81 60       	ori	r24, 0x01	; 1
    2b22:	80 93 ad 01 	sts	0x01AD, r24
	acs_state = ACS_STATE_IRCOMM_DELAY;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	80 93 66 00 	sts	0x0066, r24

	sei(); // Enable Global Interrupts
    2b2c:	78 94       	sei
}
    2b2e:	0f 90       	pop	r0
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <I2CTWI_initSlave>:
 *
 * Example:
 * I2CTWI_initSlave((TWI_slaveAddress<<TWI_ADR_BITS) | (TRUE<<TWI_GEN_BIT));  
 */
void I2CTWI_initSlave(uint8_t address)
{
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	0f 92       	push	r0
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	89 83       	std	Y+1, r24	; 0x01
	cli();
    2b42:	f8 94       	cli
	TWAR = address;                  // Set own TWI slave address. Accept TWI General Calls.
    2b44:	e2 e2       	ldi	r30, 0x22	; 34
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	80 83       	st	Z, r24
	TWDR = 0xFF;                     // Default content = SDA released.
    2b4c:	e3 e2       	ldi	r30, 0x23	; 35
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	8f ef       	ldi	r24, 0xFF	; 255
    2b52:	80 83       	st	Z, r24
	TWCR = (1<<TWEN);
    2b54:	e6 e5       	ldi	r30, 0x56	; 86
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	84 e0       	ldi	r24, 0x04	; 4
    2b5a:	80 83       	st	Z, r24
	sei();
    2b5c:	78 94       	sei
	// Start the TWI transceiver to enable reception of the first command from the TWI Master.
	TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
    2b5e:	e6 e5       	ldi	r30, 0x56	; 86
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	85 ec       	ldi	r24, 0xC5	; 197
    2b64:	80 83       	st	Z, r24
}
    2b66:	0f 90       	pop	r0
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <__vector_19>:

volatile uint8_t I2CTWI_readBusy = 0;
volatile uint8_t I2CTWI_writeBusy = 0;

ISR (TWI_vect)
{
    2b6e:	1f 92       	push	r1
    2b70:	0f 92       	push	r0
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	0f 92       	push	r0
    2b76:	11 24       	eor	r1, r1
    2b78:	2f 93       	push	r18
    2b7a:	3f 93       	push	r19
    2b7c:	8f 93       	push	r24
    2b7e:	9f 93       	push	r25
    2b80:	af 93       	push	r26
    2b82:	bf 93       	push	r27
    2b84:	ef 93       	push	r30
    2b86:	ff 93       	push	r31
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <__vector_19+0x20>
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
	static uint8_t current_register = 0;
	static uint8_t TWI_state = I2CTWI_STATE_IDLE;
	switch (TWSR) {
    2b92:	e1 e2       	ldi	r30, 0x21	; 33
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	28 2f       	mov	r18, r24
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	3a 83       	std	Y+2, r19	; 0x02
    2b9e:	29 83       	std	Y+1, r18	; 0x01
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba4:	80 39       	cpi	r24, 0x90	; 144
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <__vector_19+0x3e>
    2baa:	9c c0       	rjmp	.+312    	; 0x2ce4 <__vector_19+0x176>
    2bac:	29 81       	ldd	r18, Y+1	; 0x01
    2bae:	3a 81       	ldd	r19, Y+2	; 0x02
    2bb0:	21 39       	cpi	r18, 0x91	; 145
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	9c f4       	brge	.+38     	; 0x2bdc <__vector_19+0x6e>
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	80 37       	cpi	r24, 0x70	; 112
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <__vector_19+0x54>
    2bc0:	89 c0       	rjmp	.+274    	; 0x2cd4 <__vector_19+0x166>
    2bc2:	29 81       	ldd	r18, Y+1	; 0x01
    2bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    2bc6:	20 38       	cpi	r18, 0x80	; 128
    2bc8:	31 05       	cpc	r19, r1
    2bca:	09 f4       	brne	.+2      	; 0x2bce <__vector_19+0x60>
    2bcc:	5a c0       	rjmp	.+180    	; 0x2c82 <__vector_19+0x114>
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd2:	80 36       	cpi	r24, 0x60	; 96
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <__vector_19+0x6c>
    2bd8:	49 c0       	rjmp	.+146    	; 0x2c6c <__vector_19+0xfe>
    2bda:	98 c0       	rjmp	.+304    	; 0x2d0c <__vector_19+0x19e>
    2bdc:	29 81       	ldd	r18, Y+1	; 0x01
    2bde:	3a 81       	ldd	r19, Y+2	; 0x02
    2be0:	28 3a       	cpi	r18, 0xA8	; 168
    2be2:	31 05       	cpc	r19, r1
    2be4:	b9 f0       	breq	.+46     	; 0x2c14 <__vector_19+0xa6>
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	89 3a       	cpi	r24, 0xA9	; 169
    2bec:	91 05       	cpc	r25, r1
    2bee:	3c f4       	brge	.+14     	; 0x2bfe <__vector_19+0x90>
    2bf0:	29 81       	ldd	r18, Y+1	; 0x01
    2bf2:	3a 81       	ldd	r19, Y+2	; 0x02
    2bf4:	20 3a       	cpi	r18, 0xA0	; 160
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	09 f4       	brne	.+2      	; 0x2bfc <__vector_19+0x8e>
    2bfa:	7e c0       	rjmp	.+252    	; 0x2cf8 <__vector_19+0x18a>
    2bfc:	87 c0       	rjmp	.+270    	; 0x2d0c <__vector_19+0x19e>
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	88 3b       	cpi	r24, 0xB8	; 184
    2c04:	91 05       	cpc	r25, r1
    2c06:	61 f0       	breq	.+24     	; 0x2c20 <__vector_19+0xb2>
    2c08:	29 81       	ldd	r18, Y+1	; 0x01
    2c0a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c0c:	20 3c       	cpi	r18, 0xC0	; 192
    2c0e:	31 05       	cpc	r19, r1
    2c10:	f9 f0       	breq	.+62     	; 0x2c50 <__vector_19+0xe2>
    2c12:	7c c0       	rjmp	.+248    	; 0x2d0c <__vector_19+0x19e>
		case TWI_STX_ADR_ACK:   // Own SLA+R has been received; ACK has been returned
			TWI_state = I2CTWI_STATE_READ_REG;				
    2c14:	84 e0       	ldi	r24, 0x04	; 4
    2c16:	80 93 8a 01 	sts	0x018A, r24
			I2CTWI_readBusy = 1;		
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	80 93 88 01 	sts	0x0188, r24
		case TWI_STX_DATA_ACK:  // Data byte in TWDR has been transmitted; ACK has been received
			if(TWI_state == I2CTWI_STATE_READ_REG)
    2c20:	80 91 8a 01 	lds	r24, 0x018A
    2c24:	84 30       	cpi	r24, 0x04	; 4
    2c26:	79 f4       	brne	.+30     	; 0x2c46 <__vector_19+0xd8>
				TWDR = I2CTWI_readRegisters[current_register++];
    2c28:	a3 e2       	ldi	r26, 0x23	; 35
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	20 91 8b 01 	lds	r18, 0x018B
    2c30:	82 2f       	mov	r24, r18
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	fc 01       	movw	r30, r24
    2c36:	e4 5e       	subi	r30, 0xE4	; 228
    2c38:	fd 4f       	sbci	r31, 0xFD	; 253
    2c3a:	80 81       	ld	r24, Z
    2c3c:	8c 93       	st	X, r24
    2c3e:	82 2f       	mov	r24, r18
    2c40:	8f 5f       	subi	r24, 0xFF	; 255
    2c42:	80 93 8b 01 	sts	0x018B, r24
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Enable TWI Interupt and clear the flag to send byte
    2c46:	e6 e5       	ldi	r30, 0x56	; 86
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	85 ec       	ldi	r24, 0xC5	; 197
    2c4c:	80 83       	st	Z, r24
    2c4e:	62 c0       	rjmp	.+196    	; 0x2d14 <__vector_19+0x1a6>
		break;
		case TWI_STX_DATA_NACK: // Data byte in TWDR has been transmitted; NACK has been received.
			TWI_state = I2CTWI_STATE_IDLE; // ... this is most likely the end of the transmission.
    2c50:	10 92 8a 01 	sts	0x018A, r1
			current_register = 0;
    2c54:	10 92 8b 01 	sts	0x018B, r1
			I2CTWI_readBusy = 0;	
    2c58:	10 92 88 01 	sts	0x0188, r1
			I2CTWI_dataWasRead = 1;
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	80 93 86 01 	sts	0x0186, r24
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
    2c62:	e6 e5       	ldi	r30, 0x56	; 86
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	85 ec       	ldi	r24, 0xC5	; 197
    2c68:	80 83       	st	Z, r24
    2c6a:	54 c0       	rjmp	.+168    	; 0x2d14 <__vector_19+0x1a6>
		break;
		case TWI_SRX_ADR_ACK: // Own SLA+W has been received ACK has been returned
			I2CTWI_writeBusy = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	80 93 89 01 	sts	0x0189, r24
			TWI_state = I2CTWI_STATE_WRITE_REG;	
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	80 93 8a 01 	sts	0x018A, r24
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Reset the TWI Interupt to wait for a new event.	
    2c78:	e6 e5       	ldi	r30, 0x56	; 86
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	85 ec       	ldi	r24, 0xC5	; 197
    2c7e:	80 83       	st	Z, r24
    2c80:	49 c0       	rjmp	.+146    	; 0x2d14 <__vector_19+0x1a6>
		break;
		case TWI_SRX_ADR_DATA_ACK: // Previously addressed with own SLA+W; data has been received; ACK has been returned
			if(TWI_state == I2CTWI_STATE_WRITE_REG) {
    2c82:	80 91 8a 01 	lds	r24, 0x018A
    2c86:	82 30       	cpi	r24, 0x02	; 2
    2c88:	69 f4       	brne	.+26     	; 0x2ca4 <__vector_19+0x136>
				current_register = TWDR;
    2c8a:	e3 e2       	ldi	r30, 0x23	; 35
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	80 93 8b 01 	sts	0x018B, r24
				I2CTWI_dataReadFromReg = current_register;
    2c94:	80 91 8b 01 	lds	r24, 0x018B
    2c98:	80 93 87 01 	sts	0x0187, r24
				TWI_state = I2CTWI_STATE_WRITE_DATA;
    2c9c:	83 e0       	ldi	r24, 0x03	; 3
    2c9e:	80 93 8a 01 	sts	0x018A, r24
    2ca2:	13 c0       	rjmp	.+38     	; 0x2cca <__vector_19+0x15c>
			}
			else if(TWI_state == I2CTWI_STATE_WRITE_DATA)
    2ca4:	80 91 8a 01 	lds	r24, 0x018A
    2ca8:	83 30       	cpi	r24, 0x03	; 3
    2caa:	79 f4       	brne	.+30     	; 0x2cca <__vector_19+0x15c>
				I2CTWI_writeRegisters[current_register++] = TWDR;
    2cac:	30 91 8b 01 	lds	r19, 0x018B
    2cb0:	83 2f       	mov	r24, r19
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	e3 e2       	ldi	r30, 0x23	; 35
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	20 81       	ld	r18, Z
    2cba:	fc 01       	movw	r30, r24
    2cbc:	e4 5f       	subi	r30, 0xF4	; 244
    2cbe:	fd 4f       	sbci	r31, 0xFD	; 253
    2cc0:	20 83       	st	Z, r18
    2cc2:	83 2f       	mov	r24, r19
    2cc4:	8f 5f       	subi	r24, 0xFF	; 255
    2cc6:	80 93 8b 01 	sts	0x018B, r24
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Reset the TWI Interupt to wait for a new event, send ACK after next reception
    2cca:	e6 e5       	ldi	r30, 0x56	; 86
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	85 ec       	ldi	r24, 0xC5	; 197
    2cd0:	80 83       	st	Z, r24
    2cd2:	20 c0       	rjmp	.+64     	; 0x2d14 <__vector_19+0x1a6>
		break;
		case TWI_SRX_GEN_ACK: // General call address has been received; ACK has been returned
			TWI_state = I2CTWI_STATE_GEN_CALL;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	80 93 8a 01 	sts	0x018A, r24
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
    2cda:	e6 e5       	ldi	r30, 0x56	; 86
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	85 ec       	ldi	r24, 0xC5	; 197
    2ce0:	80 83       	st	Z, r24
    2ce2:	18 c0       	rjmp	.+48     	; 0x2d14 <__vector_19+0x1a6>
		break;
		case TWI_SRX_GEN_DATA_ACK: // Previously addressed with general call; data has been received; ACK has been returned
			I2CTWI_genCallCMD = TWDR;
    2ce4:	e3 e2       	ldi	r30, 0x23	; 35
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	80 93 0b 02 	sts	0x020B, r24
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA); // Send ACK after next reception
    2cee:	e6 e5       	ldi	r30, 0x56	; 86
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	85 ec       	ldi	r24, 0xC5	; 197
    2cf4:	80 83       	st	Z, r24
    2cf6:	0e c0       	rjmp	.+28     	; 0x2d14 <__vector_19+0x1a6>
	    break;
		case TWI_SRX_STOP_RESTART:  // A STOP condition or repeated START condition has been received while still addressed as Slave
			TWI_state = I2CTWI_STATE_REP_START;
    2cf8:	85 e0       	ldi	r24, 0x05	; 5
    2cfa:	80 93 8a 01 	sts	0x018A, r24
			TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA);
    2cfe:	e6 e5       	ldi	r30, 0x56	; 86
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	85 ec       	ldi	r24, 0xC5	; 197
    2d04:	80 83       	st	Z, r24
			I2CTWI_writeBusy = 0;
    2d06:	10 92 89 01 	sts	0x0189, r1
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <__vector_19+0x1a6>
		break;
		default: // Any error, no state etc. 
			TWCR = (1<<TWEN)|(1<<TWINT); 
    2d0c:	e6 e5       	ldi	r30, 0x56	; 86
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	84 e8       	ldi	r24, 0x84	; 132
    2d12:	80 83       	st	Z, r24
		break;
	}
}
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	ff 91       	pop	r31
    2d1e:	ef 91       	pop	r30
    2d20:	bf 91       	pop	r27
    2d22:	af 91       	pop	r26
    2d24:	9f 91       	pop	r25
    2d26:	8f 91       	pop	r24
    2d28:	3f 91       	pop	r19
    2d2a:	2f 91       	pop	r18
    2d2c:	0f 90       	pop	r0
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	0f 90       	pop	r0
    2d32:	1f 90       	pop	r1
    2d34:	18 95       	reti

00002d36 <writeChar>:
 *			RP6
 *			00123
 *
 */
void writeChar(char ch)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	0f 92       	push	r0
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	89 83       	std	Y+1, r24	; 0x01
    while (!(UCSRA & (1<<UDRE)));
    2d42:	eb e2       	ldi	r30, 0x2B	; 43
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	88 2f       	mov	r24, r24
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	80 72       	andi	r24, 0x20	; 32
    2d4e:	90 70       	andi	r25, 0x00	; 0
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	b9 f3       	breq	.-18     	; 0x2d42 <writeChar+0xc>
    UDR = (uint8_t)ch;
    2d54:	ec e2       	ldi	r30, 0x2C	; 44
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	80 83       	st	Z, r24
}
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <writeString>:
 *
 *			writeString("RP6 Robot System\n");
 *
 */
void writeString(char *string)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <writeString+0x6>
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	0b c0       	rjmp	.+22     	; 0x2d8a <writeString+0x26>
	while(*string)
		writeChar(*string++);
    2d74:	e9 81       	ldd	r30, Y+1	; 0x01
    2d76:	fa 81       	ldd	r31, Y+2	; 0x02
    2d78:	20 81       	ld	r18, Z
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7e:	01 96       	adiw	r24, 0x01	; 1
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	82 2f       	mov	r24, r18
    2d86:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <writeChar>
 *			writeString("RP6 Robot System\n");
 *
 */
void writeString(char *string)
{
	while(*string)
    2d8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d8e:	80 81       	ld	r24, Z
    2d90:	88 23       	and	r24, r24
    2d92:	81 f7       	brne	.-32     	; 0x2d74 <writeString+0x10>
		writeChar(*string++);
}
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <writeNStringP>:
 *			// you can simply write:
 *			writeString_P("RP6 Robot System\n");
 *
 */
void writeNStringP(const char *pstring)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <writeNStringP+0x6>
    2da4:	00 d0       	rcall	.+0      	; 0x2da6 <writeNStringP+0x8>
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <writeNStringP+0xa>
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
    2db0:	03 c0       	rjmp	.+6      	; 0x2db8 <writeNStringP+0x1a>
    uint8_t c;
    for (;(c = pgm_read_byte_near(pstring++));writeChar(c));
    2db2:	8c 81       	ldd	r24, Y+4	; 0x04
    2db4:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <writeChar>
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	9b 83       	std	Y+3, r25	; 0x03
    2dbe:	8a 83       	std	Y+2, r24	; 0x02
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
    2dca:	ea 81       	ldd	r30, Y+2	; 0x02
    2dcc:	fb 81       	ldd	r31, Y+3	; 0x03
    2dce:	84 91       	lpm	r24, Z+
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	8c 83       	std	Y+4, r24	; 0x04
    2dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd8:	88 23       	and	r24, r24
    2dda:	59 f7       	brne	.-42     	; 0x2db2 <writeNStringP+0x14>
}
    2ddc:	26 96       	adiw	r28, 0x06	; 6
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <writeStringLength>:
 *			// would output: "Robot System\n"
 *			// No matter if the specified length is 40 characters!
 *
 */
void writeStringLength(char *string, uint8_t length, uint8_t offset)
{
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <writeStringLength+0x6>
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <writeStringLength+0x8>
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	9a 83       	std	Y+2, r25	; 0x02
    2dfc:	89 83       	std	Y+1, r24	; 0x01
    2dfe:	6b 83       	std	Y+3, r22	; 0x03
    2e00:	4c 83       	std	Y+4, r20	; 0x04
	for(string = &string[offset]; *string && length; length--)
    2e02:	8c 81       	ldd	r24, Y+4	; 0x04
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	82 0f       	add	r24, r18
    2e0e:	93 1f       	adc	r25, r19
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	0e c0       	rjmp	.+28     	; 0x2e32 <writeStringLength+0x44>
		writeChar(*string++);
    2e16:	e9 81       	ldd	r30, Y+1	; 0x01
    2e18:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1a:	20 81       	ld	r18, Z
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	01 96       	adiw	r24, 0x01	; 1
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	89 83       	std	Y+1, r24	; 0x01
    2e26:	82 2f       	mov	r24, r18
    2e28:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <writeChar>
 *			// No matter if the specified length is 40 characters!
 *
 */
void writeStringLength(char *string, uint8_t length, uint8_t offset)
{
	for(string = &string[offset]; *string && length; length--)
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	81 50       	subi	r24, 0x01	; 1
    2e30:	8b 83       	std	Y+3, r24	; 0x03
    2e32:	e9 81       	ldd	r30, Y+1	; 0x01
    2e34:	fa 81       	ldd	r31, Y+2	; 0x02
    2e36:	80 81       	ld	r24, Z
    2e38:	88 23       	and	r24, r24
    2e3a:	19 f0       	breq	.+6      	; 0x2e42 <writeStringLength+0x54>
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	88 23       	and	r24, r24
    2e40:	51 f7       	brne	.-44     	; 0x2e16 <writeStringLength+0x28>
		writeChar(*string++);
}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <writeInteger>:
 *			writeInteger(1024,DEC);  	// Decimal
 *			writeInteger(044,OCT);		// Ocal
 *			writeInteger(0b11010111,BIN); // Binary
 */
void writeInteger(int16_t number, uint8_t base)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	64 97       	sbiw	r28, 0x14	; 20
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	9b 8b       	std	Y+19, r25	; 0x13
    2e66:	8a 8b       	std	Y+18, r24	; 0x12
    2e68:	6c 8b       	std	Y+20, r22	; 0x14
	char buffer[17];
	itoa(number, &buffer[0], base);
    2e6a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e6c:	48 2f       	mov	r20, r24
    2e6e:	50 e0       	ldi	r21, 0x00	; 0
    2e70:	8a 89       	ldd	r24, Y+18	; 0x12
    2e72:	9b 89       	ldd	r25, Y+19	; 0x13
    2e74:	9e 01       	movw	r18, r28
    2e76:	2f 5f       	subi	r18, 0xFF	; 255
    2e78:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7a:	b9 01       	movw	r22, r18
    2e7c:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <itoa>
	writeString(&buffer[0]);
    2e80:	ce 01       	movw	r24, r28
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <writeString>
}
    2e88:	64 96       	adiw	r28, 0x14	; 20
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <writeIntegerLength>:
 *			writeIntegerLength(1024,DEC,6);  	// Decimal
 *			writeIntegerLength(044,OCT,4);		// Ocal
 *			writeIntegerLength(0b11010111,BIN,8); // Binary
 */
void writeIntegerLength(int16_t number, uint8_t base, uint8_t length)
{
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	66 97       	sbiw	r28, 0x16	; 22
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	9c 8b       	std	Y+20, r25	; 0x14
    2eb0:	8b 8b       	std	Y+19, r24	; 0x13
    2eb2:	6d 8b       	std	Y+21, r22	; 0x15
    2eb4:	4e 8b       	std	Y+22, r20	; 0x16
	char buffer[17];
	itoa(number, &buffer[0], base);
    2eb6:	8d 89       	ldd	r24, Y+21	; 0x15
    2eb8:	48 2f       	mov	r20, r24
    2eba:	50 e0       	ldi	r21, 0x00	; 0
    2ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec0:	9e 01       	movw	r18, r28
    2ec2:	2e 5f       	subi	r18, 0xFE	; 254
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	b9 01       	movw	r22, r18
    2ec8:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <itoa>
	int8_t cnt = length - strlen(buffer);
    2ecc:	ce 01       	movw	r24, r28
    2ece:	02 96       	adiw	r24, 0x02	; 2
    2ed0:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <strlen>
    2ed4:	98 2f       	mov	r25, r24
    2ed6:	8e 89       	ldd	r24, Y+22	; 0x16
    2ed8:	89 1b       	sub	r24, r25
    2eda:	89 83       	std	Y+1, r24	; 0x01
	if(cnt > 0) {
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	18 16       	cp	r1, r24
    2ee0:	7c f4       	brge	.+30     	; 0x2f00 <writeIntegerLength+0x66>
    2ee2:	06 c0       	rjmp	.+12     	; 0x2ef0 <writeIntegerLength+0x56>
		for(; cnt > 0; cnt--, writeChar('0'));
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	81 50       	subi	r24, 0x01	; 1
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	80 e3       	ldi	r24, 0x30	; 48
    2eec:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <writeChar>
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	18 16       	cp	r1, r24
    2ef4:	bc f3       	brlt	.-18     	; 0x2ee4 <writeIntegerLength+0x4a>
		writeString(&buffer[0]);
    2ef6:	ce 01       	movw	r24, r28
    2ef8:	02 96       	adiw	r24, 0x02	; 2
    2efa:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <writeString>
    2efe:	09 c0       	rjmp	.+18     	; 0x2f12 <writeIntegerLength+0x78>
	}
	else 
		writeStringLength(&buffer[0],length,-cnt);
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	81 95       	neg	r24
    2f04:	28 2f       	mov	r18, r24
    2f06:	ce 01       	movw	r24, r28
    2f08:	02 96       	adiw	r24, 0x02	; 2
    2f0a:	6e 89       	ldd	r22, Y+22	; 0x16
    2f0c:	42 2f       	mov	r20, r18
    2f0e:	0e 94 f7 16 	call	0x2dee	; 0x2dee <writeStringLength>
}
    2f12:	66 96       	adiw	r28, 0x16	; 22
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	cf 91       	pop	r28
    2f20:	df 91       	pop	r29
    2f22:	08 95       	ret

00002f24 <__vector_13>:
/**
 * UART receive ISR.
 * Handles reception to circular buffer.
 */
ISR(USART_RXC_vect)
{	
    2f24:	1f 92       	push	r1
    2f26:	0f 92       	push	r0
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	0f 92       	push	r0
    2f2c:	11 24       	eor	r1, r1
    2f2e:	2f 93       	push	r18
    2f30:	3f 93       	push	r19
    2f32:	8f 93       	push	r24
    2f34:	9f 93       	push	r25
    2f36:	ef 93       	push	r30
    2f38:	ff 93       	push	r31
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
	static volatile uint8_t dummy;
	if(((uint8_t)(write_size - read_size)) < UART_RECEIVE_BUFFER_SIZE) {
    2f42:	80 91 8f 01 	lds	r24, 0x018F
    2f46:	90 91 8e 01 	lds	r25, 0x018E
    2f4a:	89 1b       	sub	r24, r25
    2f4c:	80 32       	cpi	r24, 0x20	; 32
    2f4e:	e8 f4       	brcc	.+58     	; 0x2f8a <__vector_13+0x66>
		uart_receive_buffer[write_pos++] = UDR;
    2f50:	90 91 8d 01 	lds	r25, 0x018D
    2f54:	29 2f       	mov	r18, r25
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	ec e2       	ldi	r30, 0x2C	; 44
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	f9 01       	movw	r30, r18
    2f60:	e3 5b       	subi	r30, 0xB3	; 179
    2f62:	fd 4f       	sbci	r31, 0xFD	; 253
    2f64:	80 83       	st	Z, r24
    2f66:	89 2f       	mov	r24, r25
    2f68:	8f 5f       	subi	r24, 0xFF	; 255
    2f6a:	80 93 8d 01 	sts	0x018D, r24
		write_size++;
    2f6e:	80 91 8f 01 	lds	r24, 0x018F
    2f72:	8f 5f       	subi	r24, 0xFF	; 255
    2f74:	80 93 8f 01 	sts	0x018F, r24
		if(write_pos > UART_RECEIVE_BUFFER_SIZE) 
    2f78:	80 91 8d 01 	lds	r24, 0x018D
    2f7c:	81 32       	cpi	r24, 0x21	; 33
    2f7e:	10 f0       	brcs	.+4      	; 0x2f84 <__vector_13+0x60>
			write_pos = 0;
    2f80:	10 92 8d 01 	sts	0x018D, r1
		uart_status = UART_BUFFER_OK;
    2f84:	10 92 4c 02 	sts	0x024C, r1
    2f88:	08 c0       	rjmp	.+16     	; 0x2f9a <__vector_13+0x76>
	}
	else {	
		dummy = UDR;
    2f8a:	ec e2       	ldi	r30, 0x2C	; 44
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	80 93 90 01 	sts	0x0190, r24
		uart_status = UART_BUFFER_OVERFLOW;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	80 93 4c 02 	sts	0x024C, r24
	}
}
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	ff 91       	pop	r31
    2fa0:	ef 91       	pop	r30
    2fa2:	9f 91       	pop	r25
    2fa4:	8f 91       	pop	r24
    2fa6:	3f 91       	pop	r19
    2fa8:	2f 91       	pop	r18
    2faa:	0f 90       	pop	r0
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	0f 90       	pop	r0
    2fb0:	1f 90       	pop	r1
    2fb2:	18 95       	reti

00002fb4 <readChar>:
 *	   receivedData[data_position++] = readChar();
 * // [...]
 *
 */
char readChar(void)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	0f 92       	push	r0
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
	uart_status = UART_BUFFER_OK;
    2fbe:	10 92 4c 02 	sts	0x024C, r1
	if(((uint8_t)(write_size - read_size)) > 0) {
    2fc2:	90 91 8f 01 	lds	r25, 0x018F
    2fc6:	80 91 8e 01 	lds	r24, 0x018E
    2fca:	98 17       	cp	r25, r24
    2fcc:	c9 f0       	breq	.+50     	; 0x3000 <readChar+0x4c>
		read_size++;
    2fce:	80 91 8e 01 	lds	r24, 0x018E
    2fd2:	8f 5f       	subi	r24, 0xFF	; 255
    2fd4:	80 93 8e 01 	sts	0x018E, r24
		if(read_pos > UART_RECEIVE_BUFFER_SIZE) 
    2fd8:	80 91 8c 01 	lds	r24, 0x018C
    2fdc:	81 32       	cpi	r24, 0x21	; 33
    2fde:	10 f0       	brcs	.+4      	; 0x2fe4 <readChar+0x30>
			read_pos = 0;
    2fe0:	10 92 8c 01 	sts	0x018C, r1
		return uart_receive_buffer[read_pos++];
    2fe4:	20 91 8c 01 	lds	r18, 0x018C
    2fe8:	82 2f       	mov	r24, r18
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	fc 01       	movw	r30, r24
    2fee:	e3 5b       	subi	r30, 0xB3	; 179
    2ff0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ff2:	80 81       	ld	r24, Z
    2ff4:	89 83       	std	Y+1, r24	; 0x01
    2ff6:	82 2f       	mov	r24, r18
    2ff8:	8f 5f       	subi	r24, 0xFF	; 255
    2ffa:	80 93 8c 01 	sts	0x018C, r24
    2ffe:	01 c0       	rjmp	.+2      	; 0x3002 <readChar+0x4e>
	}
	return 0;
    3000:	19 82       	std	Y+1, r1	; 0x01
    3002:	89 81       	ldd	r24, Y+1	; 0x01
}
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <readChars>:
 * circular buffer to buf. 
 * It also returns the number of characters really copied to the buffer! 
 * Just in case that there were fewer chars in the buffer...
 */
uint8_t readChars(char *buf, uint8_t numberOfChars)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	00 d0       	rcall	.+0      	; 0x3012 <readChars+0x6>
    3012:	00 d0       	rcall	.+0      	; 0x3014 <readChars+0x8>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	9b 83       	std	Y+3, r25	; 0x03
    301a:	8a 83       	std	Y+2, r24	; 0x02
    301c:	6c 83       	std	Y+4, r22	; 0x04
   uint8_t i = 0;
    301e:	19 82       	std	Y+1, r1	; 0x01
   uart_status = UART_BUFFER_OK;
    3020:	10 92 4c 02 	sts	0x024C, r1
    3024:	23 c0       	rjmp	.+70     	; 0x306c <readChars+0x60>
   while(((uint8_t)(write_size - read_size))  > 0 && i < numberOfChars) {
      read_size++;
    3026:	80 91 8e 01 	lds	r24, 0x018E
    302a:	8f 5f       	subi	r24, 0xFF	; 255
    302c:	80 93 8e 01 	sts	0x018E, r24
      buf[i++] = uart_receive_buffer[read_pos++];
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	9b 81       	ldd	r25, Y+3	; 0x03
    303a:	dc 01       	movw	r26, r24
    303c:	a2 0f       	add	r26, r18
    303e:	b3 1f       	adc	r27, r19
    3040:	20 91 8c 01 	lds	r18, 0x018C
    3044:	82 2f       	mov	r24, r18
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	fc 01       	movw	r30, r24
    304a:	e3 5b       	subi	r30, 0xB3	; 179
    304c:	fd 4f       	sbci	r31, 0xFD	; 253
    304e:	80 81       	ld	r24, Z
    3050:	8c 93       	st	X, r24
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	8f 5f       	subi	r24, 0xFF	; 255
    3056:	89 83       	std	Y+1, r24	; 0x01
    3058:	82 2f       	mov	r24, r18
    305a:	8f 5f       	subi	r24, 0xFF	; 255
    305c:	80 93 8c 01 	sts	0x018C, r24
      if(read_pos > UART_RECEIVE_BUFFER_SIZE)
    3060:	80 91 8c 01 	lds	r24, 0x018C
    3064:	81 32       	cpi	r24, 0x21	; 33
    3066:	10 f0       	brcs	.+4      	; 0x306c <readChars+0x60>
         read_pos = 0;
    3068:	10 92 8c 01 	sts	0x018C, r1
 */
uint8_t readChars(char *buf, uint8_t numberOfChars)
{
   uint8_t i = 0;
   uart_status = UART_BUFFER_OK;
   while(((uint8_t)(write_size - read_size))  > 0 && i < numberOfChars) {
    306c:	90 91 8f 01 	lds	r25, 0x018F
    3070:	80 91 8e 01 	lds	r24, 0x018E
    3074:	98 17       	cp	r25, r24
    3076:	21 f0       	breq	.+8      	; 0x3080 <readChars+0x74>
    3078:	99 81       	ldd	r25, Y+1	; 0x01
    307a:	8c 81       	ldd	r24, Y+4	; 0x04
    307c:	98 17       	cp	r25, r24
    307e:	98 f2       	brcs	.-90     	; 0x3026 <readChars+0x1a>
      read_size++;
      buf[i++] = uart_receive_buffer[read_pos++];
      if(read_pos > UART_RECEIVE_BUFFER_SIZE)
         read_pos = 0;
   }
   return i;
    3080:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <getBufferLength>:
 *
 * Example:
 * s. readChar function above!
 */
uint8_t getBufferLength(void)
{
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
	return (((uint8_t)(write_size - read_size)));
    3098:	90 91 8f 01 	lds	r25, 0x018F
    309c:	80 91 8e 01 	lds	r24, 0x018E
    30a0:	29 2f       	mov	r18, r25
    30a2:	28 1b       	sub	r18, r24
    30a4:	82 2f       	mov	r24, r18
}
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <clearReceptionBuffer>:
/**
 * Clears the reception buffer - it disables UART Receive 
 * interrupt for a short period of time. 
 */
void clearReceptionBuffer(void)
{
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
	static uint8_t dummy;
	UCSRB &= ~(1 << RXCIE); // disable UART RX Interrupt
    30b4:	aa e2       	ldi	r26, 0x2A	; 42
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	ea e2       	ldi	r30, 0x2A	; 42
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	8f 77       	andi	r24, 0x7F	; 127
    30c0:	8c 93       	st	X, r24
	dummy = UDR;
    30c2:	ec e2       	ldi	r30, 0x2C	; 44
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	80 93 91 01 	sts	0x0191, r24
	read_pos = 0;
    30cc:	10 92 8c 01 	sts	0x018C, r1
	write_pos = 0; 
    30d0:	10 92 8d 01 	sts	0x018D, r1
	read_size = 0;
    30d4:	10 92 8e 01 	sts	0x018E, r1
	write_size = 0;
    30d8:	10 92 8f 01 	sts	0x018F, r1
	uart_status = UART_BUFFER_OK;
    30dc:	10 92 4c 02 	sts	0x024C, r1
	UCSRB |= (1 << RXCIE); // enable Interrupt again
    30e0:	aa e2       	ldi	r26, 0x2A	; 42
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	ea e2       	ldi	r30, 0x2A	; 42
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	80 68       	ori	r24, 0x80	; 128
    30ec:	8c 93       	st	X, r24
}
    30ee:	cf 91       	pop	r28
    30f0:	df 91       	pop	r29
    30f2:	08 95       	ret

000030f4 <__fixunssfsi>:
    30f4:	ef 92       	push	r14
    30f6:	ff 92       	push	r15
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	7b 01       	movw	r14, r22
    30fe:	8c 01       	movw	r16, r24
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	40 e0       	ldi	r20, 0x00	; 0
    3106:	5f e4       	ldi	r21, 0x4F	; 79
    3108:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__gesf2>
    310c:	88 23       	and	r24, r24
    310e:	8c f0       	brlt	.+34     	; 0x3132 <__fixunssfsi+0x3e>
    3110:	c8 01       	movw	r24, r16
    3112:	b7 01       	movw	r22, r14
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	5f e4       	ldi	r21, 0x4F	; 79
    311c:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    3120:	0e 94 84 1c 	call	0x3908	; 0x3908 <__fixsfsi>
    3124:	9b 01       	movw	r18, r22
    3126:	ac 01       	movw	r20, r24
    3128:	20 50       	subi	r18, 0x00	; 0
    312a:	30 40       	sbci	r19, 0x00	; 0
    312c:	40 40       	sbci	r20, 0x00	; 0
    312e:	50 48       	sbci	r21, 0x80	; 128
    3130:	06 c0       	rjmp	.+12     	; 0x313e <__fixunssfsi+0x4a>
    3132:	c8 01       	movw	r24, r16
    3134:	b7 01       	movw	r22, r14
    3136:	0e 94 84 1c 	call	0x3908	; 0x3908 <__fixsfsi>
    313a:	9b 01       	movw	r18, r22
    313c:	ac 01       	movw	r20, r24
    313e:	b9 01       	movw	r22, r18
    3140:	ca 01       	movw	r24, r20
    3142:	1f 91       	pop	r17
    3144:	0f 91       	pop	r16
    3146:	ff 90       	pop	r15
    3148:	ef 90       	pop	r14
    314a:	08 95       	ret

0000314c <_fpadd_parts>:
    314c:	a0 e0       	ldi	r26, 0x00	; 0
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	ec ea       	ldi	r30, 0xAC	; 172
    3152:	f8 e1       	ldi	r31, 0x18	; 24
    3154:	0c 94 9b 1f 	jmp	0x3f36	; 0x3f36 <__prologue_saves__>
    3158:	dc 01       	movw	r26, r24
    315a:	2b 01       	movw	r4, r22
    315c:	fa 01       	movw	r30, r20
    315e:	9c 91       	ld	r25, X
    3160:	92 30       	cpi	r25, 0x02	; 2
    3162:	08 f4       	brcc	.+2      	; 0x3166 <_fpadd_parts+0x1a>
    3164:	39 c1       	rjmp	.+626    	; 0x33d8 <_fpadd_parts+0x28c>
    3166:	eb 01       	movw	r28, r22
    3168:	88 81       	ld	r24, Y
    316a:	82 30       	cpi	r24, 0x02	; 2
    316c:	08 f4       	brcc	.+2      	; 0x3170 <_fpadd_parts+0x24>
    316e:	33 c1       	rjmp	.+614    	; 0x33d6 <_fpadd_parts+0x28a>
    3170:	94 30       	cpi	r25, 0x04	; 4
    3172:	69 f4       	brne	.+26     	; 0x318e <_fpadd_parts+0x42>
    3174:	84 30       	cpi	r24, 0x04	; 4
    3176:	09 f0       	breq	.+2      	; 0x317a <_fpadd_parts+0x2e>
    3178:	2f c1       	rjmp	.+606    	; 0x33d8 <_fpadd_parts+0x28c>
    317a:	11 96       	adiw	r26, 0x01	; 1
    317c:	9c 91       	ld	r25, X
    317e:	11 97       	sbiw	r26, 0x01	; 1
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	98 17       	cp	r25, r24
    3184:	09 f4       	brne	.+2      	; 0x3188 <_fpadd_parts+0x3c>
    3186:	28 c1       	rjmp	.+592    	; 0x33d8 <_fpadd_parts+0x28c>
    3188:	ab e6       	ldi	r26, 0x6B	; 107
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	25 c1       	rjmp	.+586    	; 0x33d8 <_fpadd_parts+0x28c>
    318e:	84 30       	cpi	r24, 0x04	; 4
    3190:	09 f4       	brne	.+2      	; 0x3194 <_fpadd_parts+0x48>
    3192:	21 c1       	rjmp	.+578    	; 0x33d6 <_fpadd_parts+0x28a>
    3194:	82 30       	cpi	r24, 0x02	; 2
    3196:	a9 f4       	brne	.+42     	; 0x31c2 <_fpadd_parts+0x76>
    3198:	92 30       	cpi	r25, 0x02	; 2
    319a:	09 f0       	breq	.+2      	; 0x319e <_fpadd_parts+0x52>
    319c:	1d c1       	rjmp	.+570    	; 0x33d8 <_fpadd_parts+0x28c>
    319e:	9a 01       	movw	r18, r20
    31a0:	ad 01       	movw	r20, r26
    31a2:	88 e0       	ldi	r24, 0x08	; 8
    31a4:	ea 01       	movw	r28, r20
    31a6:	09 90       	ld	r0, Y+
    31a8:	ae 01       	movw	r20, r28
    31aa:	e9 01       	movw	r28, r18
    31ac:	09 92       	st	Y+, r0
    31ae:	9e 01       	movw	r18, r28
    31b0:	81 50       	subi	r24, 0x01	; 1
    31b2:	c1 f7       	brne	.-16     	; 0x31a4 <_fpadd_parts+0x58>
    31b4:	e2 01       	movw	r28, r4
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	11 96       	adiw	r26, 0x01	; 1
    31ba:	9c 91       	ld	r25, X
    31bc:	89 23       	and	r24, r25
    31be:	81 83       	std	Z+1, r24	; 0x01
    31c0:	08 c1       	rjmp	.+528    	; 0x33d2 <_fpadd_parts+0x286>
    31c2:	92 30       	cpi	r25, 0x02	; 2
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <_fpadd_parts+0x7c>
    31c6:	07 c1       	rjmp	.+526    	; 0x33d6 <_fpadd_parts+0x28a>
    31c8:	12 96       	adiw	r26, 0x02	; 2
    31ca:	2d 90       	ld	r2, X+
    31cc:	3c 90       	ld	r3, X
    31ce:	13 97       	sbiw	r26, 0x03	; 3
    31d0:	eb 01       	movw	r28, r22
    31d2:	8a 81       	ldd	r24, Y+2	; 0x02
    31d4:	9b 81       	ldd	r25, Y+3	; 0x03
    31d6:	14 96       	adiw	r26, 0x04	; 4
    31d8:	ad 90       	ld	r10, X+
    31da:	bd 90       	ld	r11, X+
    31dc:	cd 90       	ld	r12, X+
    31de:	dc 90       	ld	r13, X
    31e0:	17 97       	sbiw	r26, 0x07	; 7
    31e2:	ec 80       	ldd	r14, Y+4	; 0x04
    31e4:	fd 80       	ldd	r15, Y+5	; 0x05
    31e6:	0e 81       	ldd	r16, Y+6	; 0x06
    31e8:	1f 81       	ldd	r17, Y+7	; 0x07
    31ea:	91 01       	movw	r18, r2
    31ec:	28 1b       	sub	r18, r24
    31ee:	39 0b       	sbc	r19, r25
    31f0:	b9 01       	movw	r22, r18
    31f2:	37 ff       	sbrs	r19, 7
    31f4:	04 c0       	rjmp	.+8      	; 0x31fe <_fpadd_parts+0xb2>
    31f6:	66 27       	eor	r22, r22
    31f8:	77 27       	eor	r23, r23
    31fa:	62 1b       	sub	r22, r18
    31fc:	73 0b       	sbc	r23, r19
    31fe:	60 32       	cpi	r22, 0x20	; 32
    3200:	71 05       	cpc	r23, r1
    3202:	0c f0       	brlt	.+2      	; 0x3206 <_fpadd_parts+0xba>
    3204:	61 c0       	rjmp	.+194    	; 0x32c8 <_fpadd_parts+0x17c>
    3206:	12 16       	cp	r1, r18
    3208:	13 06       	cpc	r1, r19
    320a:	6c f5       	brge	.+90     	; 0x3266 <_fpadd_parts+0x11a>
    320c:	37 01       	movw	r6, r14
    320e:	48 01       	movw	r8, r16
    3210:	06 2e       	mov	r0, r22
    3212:	04 c0       	rjmp	.+8      	; 0x321c <_fpadd_parts+0xd0>
    3214:	96 94       	lsr	r9
    3216:	87 94       	ror	r8
    3218:	77 94       	ror	r7
    321a:	67 94       	ror	r6
    321c:	0a 94       	dec	r0
    321e:	d2 f7       	brpl	.-12     	; 0x3214 <_fpadd_parts+0xc8>
    3220:	21 e0       	ldi	r18, 0x01	; 1
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e0       	ldi	r20, 0x00	; 0
    3226:	50 e0       	ldi	r21, 0x00	; 0
    3228:	04 c0       	rjmp	.+8      	; 0x3232 <_fpadd_parts+0xe6>
    322a:	22 0f       	add	r18, r18
    322c:	33 1f       	adc	r19, r19
    322e:	44 1f       	adc	r20, r20
    3230:	55 1f       	adc	r21, r21
    3232:	6a 95       	dec	r22
    3234:	d2 f7       	brpl	.-12     	; 0x322a <_fpadd_parts+0xde>
    3236:	21 50       	subi	r18, 0x01	; 1
    3238:	30 40       	sbci	r19, 0x00	; 0
    323a:	40 40       	sbci	r20, 0x00	; 0
    323c:	50 40       	sbci	r21, 0x00	; 0
    323e:	2e 21       	and	r18, r14
    3240:	3f 21       	and	r19, r15
    3242:	40 23       	and	r20, r16
    3244:	51 23       	and	r21, r17
    3246:	21 15       	cp	r18, r1
    3248:	31 05       	cpc	r19, r1
    324a:	41 05       	cpc	r20, r1
    324c:	51 05       	cpc	r21, r1
    324e:	21 f0       	breq	.+8      	; 0x3258 <_fpadd_parts+0x10c>
    3250:	21 e0       	ldi	r18, 0x01	; 1
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	50 e0       	ldi	r21, 0x00	; 0
    3258:	79 01       	movw	r14, r18
    325a:	8a 01       	movw	r16, r20
    325c:	e6 28       	or	r14, r6
    325e:	f7 28       	or	r15, r7
    3260:	08 29       	or	r16, r8
    3262:	19 29       	or	r17, r9
    3264:	3c c0       	rjmp	.+120    	; 0x32de <_fpadd_parts+0x192>
    3266:	23 2b       	or	r18, r19
    3268:	d1 f1       	breq	.+116    	; 0x32de <_fpadd_parts+0x192>
    326a:	26 0e       	add	r2, r22
    326c:	37 1e       	adc	r3, r23
    326e:	35 01       	movw	r6, r10
    3270:	46 01       	movw	r8, r12
    3272:	06 2e       	mov	r0, r22
    3274:	04 c0       	rjmp	.+8      	; 0x327e <_fpadd_parts+0x132>
    3276:	96 94       	lsr	r9
    3278:	87 94       	ror	r8
    327a:	77 94       	ror	r7
    327c:	67 94       	ror	r6
    327e:	0a 94       	dec	r0
    3280:	d2 f7       	brpl	.-12     	; 0x3276 <_fpadd_parts+0x12a>
    3282:	21 e0       	ldi	r18, 0x01	; 1
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e0       	ldi	r20, 0x00	; 0
    3288:	50 e0       	ldi	r21, 0x00	; 0
    328a:	04 c0       	rjmp	.+8      	; 0x3294 <_fpadd_parts+0x148>
    328c:	22 0f       	add	r18, r18
    328e:	33 1f       	adc	r19, r19
    3290:	44 1f       	adc	r20, r20
    3292:	55 1f       	adc	r21, r21
    3294:	6a 95       	dec	r22
    3296:	d2 f7       	brpl	.-12     	; 0x328c <_fpadd_parts+0x140>
    3298:	21 50       	subi	r18, 0x01	; 1
    329a:	30 40       	sbci	r19, 0x00	; 0
    329c:	40 40       	sbci	r20, 0x00	; 0
    329e:	50 40       	sbci	r21, 0x00	; 0
    32a0:	2a 21       	and	r18, r10
    32a2:	3b 21       	and	r19, r11
    32a4:	4c 21       	and	r20, r12
    32a6:	5d 21       	and	r21, r13
    32a8:	21 15       	cp	r18, r1
    32aa:	31 05       	cpc	r19, r1
    32ac:	41 05       	cpc	r20, r1
    32ae:	51 05       	cpc	r21, r1
    32b0:	21 f0       	breq	.+8      	; 0x32ba <_fpadd_parts+0x16e>
    32b2:	21 e0       	ldi	r18, 0x01	; 1
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	59 01       	movw	r10, r18
    32bc:	6a 01       	movw	r12, r20
    32be:	a6 28       	or	r10, r6
    32c0:	b7 28       	or	r11, r7
    32c2:	c8 28       	or	r12, r8
    32c4:	d9 28       	or	r13, r9
    32c6:	0b c0       	rjmp	.+22     	; 0x32de <_fpadd_parts+0x192>
    32c8:	82 15       	cp	r24, r2
    32ca:	93 05       	cpc	r25, r3
    32cc:	2c f0       	brlt	.+10     	; 0x32d8 <_fpadd_parts+0x18c>
    32ce:	1c 01       	movw	r2, r24
    32d0:	aa 24       	eor	r10, r10
    32d2:	bb 24       	eor	r11, r11
    32d4:	65 01       	movw	r12, r10
    32d6:	03 c0       	rjmp	.+6      	; 0x32de <_fpadd_parts+0x192>
    32d8:	ee 24       	eor	r14, r14
    32da:	ff 24       	eor	r15, r15
    32dc:	87 01       	movw	r16, r14
    32de:	11 96       	adiw	r26, 0x01	; 1
    32e0:	9c 91       	ld	r25, X
    32e2:	d2 01       	movw	r26, r4
    32e4:	11 96       	adiw	r26, 0x01	; 1
    32e6:	8c 91       	ld	r24, X
    32e8:	98 17       	cp	r25, r24
    32ea:	09 f4       	brne	.+2      	; 0x32ee <_fpadd_parts+0x1a2>
    32ec:	45 c0       	rjmp	.+138    	; 0x3378 <_fpadd_parts+0x22c>
    32ee:	99 23       	and	r25, r25
    32f0:	39 f0       	breq	.+14     	; 0x3300 <_fpadd_parts+0x1b4>
    32f2:	a8 01       	movw	r20, r16
    32f4:	97 01       	movw	r18, r14
    32f6:	2a 19       	sub	r18, r10
    32f8:	3b 09       	sbc	r19, r11
    32fa:	4c 09       	sbc	r20, r12
    32fc:	5d 09       	sbc	r21, r13
    32fe:	06 c0       	rjmp	.+12     	; 0x330c <_fpadd_parts+0x1c0>
    3300:	a6 01       	movw	r20, r12
    3302:	95 01       	movw	r18, r10
    3304:	2e 19       	sub	r18, r14
    3306:	3f 09       	sbc	r19, r15
    3308:	40 0b       	sbc	r20, r16
    330a:	51 0b       	sbc	r21, r17
    330c:	57 fd       	sbrc	r21, 7
    330e:	08 c0       	rjmp	.+16     	; 0x3320 <_fpadd_parts+0x1d4>
    3310:	11 82       	std	Z+1, r1	; 0x01
    3312:	33 82       	std	Z+3, r3	; 0x03
    3314:	22 82       	std	Z+2, r2	; 0x02
    3316:	24 83       	std	Z+4, r18	; 0x04
    3318:	35 83       	std	Z+5, r19	; 0x05
    331a:	46 83       	std	Z+6, r20	; 0x06
    331c:	57 83       	std	Z+7, r21	; 0x07
    331e:	1d c0       	rjmp	.+58     	; 0x335a <_fpadd_parts+0x20e>
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	81 83       	std	Z+1, r24	; 0x01
    3324:	33 82       	std	Z+3, r3	; 0x03
    3326:	22 82       	std	Z+2, r2	; 0x02
    3328:	88 27       	eor	r24, r24
    332a:	99 27       	eor	r25, r25
    332c:	dc 01       	movw	r26, r24
    332e:	82 1b       	sub	r24, r18
    3330:	93 0b       	sbc	r25, r19
    3332:	a4 0b       	sbc	r26, r20
    3334:	b5 0b       	sbc	r27, r21
    3336:	84 83       	std	Z+4, r24	; 0x04
    3338:	95 83       	std	Z+5, r25	; 0x05
    333a:	a6 83       	std	Z+6, r26	; 0x06
    333c:	b7 83       	std	Z+7, r27	; 0x07
    333e:	0d c0       	rjmp	.+26     	; 0x335a <_fpadd_parts+0x20e>
    3340:	22 0f       	add	r18, r18
    3342:	33 1f       	adc	r19, r19
    3344:	44 1f       	adc	r20, r20
    3346:	55 1f       	adc	r21, r21
    3348:	24 83       	std	Z+4, r18	; 0x04
    334a:	35 83       	std	Z+5, r19	; 0x05
    334c:	46 83       	std	Z+6, r20	; 0x06
    334e:	57 83       	std	Z+7, r21	; 0x07
    3350:	82 81       	ldd	r24, Z+2	; 0x02
    3352:	93 81       	ldd	r25, Z+3	; 0x03
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	93 83       	std	Z+3, r25	; 0x03
    3358:	82 83       	std	Z+2, r24	; 0x02
    335a:	24 81       	ldd	r18, Z+4	; 0x04
    335c:	35 81       	ldd	r19, Z+5	; 0x05
    335e:	46 81       	ldd	r20, Z+6	; 0x06
    3360:	57 81       	ldd	r21, Z+7	; 0x07
    3362:	da 01       	movw	r26, r20
    3364:	c9 01       	movw	r24, r18
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	a1 09       	sbc	r26, r1
    336a:	b1 09       	sbc	r27, r1
    336c:	8f 5f       	subi	r24, 0xFF	; 255
    336e:	9f 4f       	sbci	r25, 0xFF	; 255
    3370:	af 4f       	sbci	r26, 0xFF	; 255
    3372:	bf 43       	sbci	r27, 0x3F	; 63
    3374:	28 f3       	brcs	.-54     	; 0x3340 <_fpadd_parts+0x1f4>
    3376:	0b c0       	rjmp	.+22     	; 0x338e <_fpadd_parts+0x242>
    3378:	91 83       	std	Z+1, r25	; 0x01
    337a:	33 82       	std	Z+3, r3	; 0x03
    337c:	22 82       	std	Z+2, r2	; 0x02
    337e:	ea 0c       	add	r14, r10
    3380:	fb 1c       	adc	r15, r11
    3382:	0c 1d       	adc	r16, r12
    3384:	1d 1d       	adc	r17, r13
    3386:	e4 82       	std	Z+4, r14	; 0x04
    3388:	f5 82       	std	Z+5, r15	; 0x05
    338a:	06 83       	std	Z+6, r16	; 0x06
    338c:	17 83       	std	Z+7, r17	; 0x07
    338e:	83 e0       	ldi	r24, 0x03	; 3
    3390:	80 83       	st	Z, r24
    3392:	24 81       	ldd	r18, Z+4	; 0x04
    3394:	35 81       	ldd	r19, Z+5	; 0x05
    3396:	46 81       	ldd	r20, Z+6	; 0x06
    3398:	57 81       	ldd	r21, Z+7	; 0x07
    339a:	57 ff       	sbrs	r21, 7
    339c:	1a c0       	rjmp	.+52     	; 0x33d2 <_fpadd_parts+0x286>
    339e:	c9 01       	movw	r24, r18
    33a0:	aa 27       	eor	r26, r26
    33a2:	97 fd       	sbrc	r25, 7
    33a4:	a0 95       	com	r26
    33a6:	ba 2f       	mov	r27, r26
    33a8:	81 70       	andi	r24, 0x01	; 1
    33aa:	90 70       	andi	r25, 0x00	; 0
    33ac:	a0 70       	andi	r26, 0x00	; 0
    33ae:	b0 70       	andi	r27, 0x00	; 0
    33b0:	56 95       	lsr	r21
    33b2:	47 95       	ror	r20
    33b4:	37 95       	ror	r19
    33b6:	27 95       	ror	r18
    33b8:	82 2b       	or	r24, r18
    33ba:	93 2b       	or	r25, r19
    33bc:	a4 2b       	or	r26, r20
    33be:	b5 2b       	or	r27, r21
    33c0:	84 83       	std	Z+4, r24	; 0x04
    33c2:	95 83       	std	Z+5, r25	; 0x05
    33c4:	a6 83       	std	Z+6, r26	; 0x06
    33c6:	b7 83       	std	Z+7, r27	; 0x07
    33c8:	82 81       	ldd	r24, Z+2	; 0x02
    33ca:	93 81       	ldd	r25, Z+3	; 0x03
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	93 83       	std	Z+3, r25	; 0x03
    33d0:	82 83       	std	Z+2, r24	; 0x02
    33d2:	df 01       	movw	r26, r30
    33d4:	01 c0       	rjmp	.+2      	; 0x33d8 <_fpadd_parts+0x28c>
    33d6:	d2 01       	movw	r26, r4
    33d8:	cd 01       	movw	r24, r26
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	e2 e1       	ldi	r30, 0x12	; 18
    33e0:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <__epilogue_restores__>

000033e4 <__subsf3>:
    33e4:	a0 e2       	ldi	r26, 0x20	; 32
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	e8 ef       	ldi	r30, 0xF8	; 248
    33ea:	f9 e1       	ldi	r31, 0x19	; 25
    33ec:	0c 94 a7 1f 	jmp	0x3f4e	; 0x3f4e <__prologue_saves__+0x18>
    33f0:	69 83       	std	Y+1, r22	; 0x01
    33f2:	7a 83       	std	Y+2, r23	; 0x02
    33f4:	8b 83       	std	Y+3, r24	; 0x03
    33f6:	9c 83       	std	Y+4, r25	; 0x04
    33f8:	2d 83       	std	Y+5, r18	; 0x05
    33fa:	3e 83       	std	Y+6, r19	; 0x06
    33fc:	4f 83       	std	Y+7, r20	; 0x07
    33fe:	58 87       	std	Y+8, r21	; 0x08
    3400:	e9 e0       	ldi	r30, 0x09	; 9
    3402:	ee 2e       	mov	r14, r30
    3404:	f1 2c       	mov	r15, r1
    3406:	ec 0e       	add	r14, r28
    3408:	fd 1e       	adc	r15, r29
    340a:	ce 01       	movw	r24, r28
    340c:	01 96       	adiw	r24, 0x01	; 1
    340e:	b7 01       	movw	r22, r14
    3410:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    3414:	8e 01       	movw	r16, r28
    3416:	0f 5e       	subi	r16, 0xEF	; 239
    3418:	1f 4f       	sbci	r17, 0xFF	; 255
    341a:	ce 01       	movw	r24, r28
    341c:	05 96       	adiw	r24, 0x05	; 5
    341e:	b8 01       	movw	r22, r16
    3420:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    3424:	8a 89       	ldd	r24, Y+18	; 0x12
    3426:	91 e0       	ldi	r25, 0x01	; 1
    3428:	89 27       	eor	r24, r25
    342a:	8a 8b       	std	Y+18, r24	; 0x12
    342c:	c7 01       	movw	r24, r14
    342e:	b8 01       	movw	r22, r16
    3430:	ae 01       	movw	r20, r28
    3432:	47 5e       	subi	r20, 0xE7	; 231
    3434:	5f 4f       	sbci	r21, 0xFF	; 255
    3436:	0e 94 a6 18 	call	0x314c	; 0x314c <_fpadd_parts>
    343a:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__pack_f>
    343e:	a0 96       	adiw	r28, 0x20	; 32
    3440:	e6 e0       	ldi	r30, 0x06	; 6
    3442:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <__epilogue_restores__+0x18>

00003446 <__addsf3>:
    3446:	a0 e2       	ldi	r26, 0x20	; 32
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e9 e2       	ldi	r30, 0x29	; 41
    344c:	fa e1       	ldi	r31, 0x1A	; 26
    344e:	0c 94 a7 1f 	jmp	0x3f4e	; 0x3f4e <__prologue_saves__+0x18>
    3452:	69 83       	std	Y+1, r22	; 0x01
    3454:	7a 83       	std	Y+2, r23	; 0x02
    3456:	8b 83       	std	Y+3, r24	; 0x03
    3458:	9c 83       	std	Y+4, r25	; 0x04
    345a:	2d 83       	std	Y+5, r18	; 0x05
    345c:	3e 83       	std	Y+6, r19	; 0x06
    345e:	4f 83       	std	Y+7, r20	; 0x07
    3460:	58 87       	std	Y+8, r21	; 0x08
    3462:	f9 e0       	ldi	r31, 0x09	; 9
    3464:	ef 2e       	mov	r14, r31
    3466:	f1 2c       	mov	r15, r1
    3468:	ec 0e       	add	r14, r28
    346a:	fd 1e       	adc	r15, r29
    346c:	ce 01       	movw	r24, r28
    346e:	01 96       	adiw	r24, 0x01	; 1
    3470:	b7 01       	movw	r22, r14
    3472:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    3476:	8e 01       	movw	r16, r28
    3478:	0f 5e       	subi	r16, 0xEF	; 239
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	ce 01       	movw	r24, r28
    347e:	05 96       	adiw	r24, 0x05	; 5
    3480:	b8 01       	movw	r22, r16
    3482:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    3486:	c7 01       	movw	r24, r14
    3488:	b8 01       	movw	r22, r16
    348a:	ae 01       	movw	r20, r28
    348c:	47 5e       	subi	r20, 0xE7	; 231
    348e:	5f 4f       	sbci	r21, 0xFF	; 255
    3490:	0e 94 a6 18 	call	0x314c	; 0x314c <_fpadd_parts>
    3494:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__pack_f>
    3498:	a0 96       	adiw	r28, 0x20	; 32
    349a:	e6 e0       	ldi	r30, 0x06	; 6
    349c:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <__epilogue_restores__+0x18>

000034a0 <__mulsf3>:
    34a0:	a0 e2       	ldi	r26, 0x20	; 32
    34a2:	b0 e0       	ldi	r27, 0x00	; 0
    34a4:	e6 e5       	ldi	r30, 0x56	; 86
    34a6:	fa e1       	ldi	r31, 0x1A	; 26
    34a8:	0c 94 9b 1f 	jmp	0x3f36	; 0x3f36 <__prologue_saves__>
    34ac:	69 83       	std	Y+1, r22	; 0x01
    34ae:	7a 83       	std	Y+2, r23	; 0x02
    34b0:	8b 83       	std	Y+3, r24	; 0x03
    34b2:	9c 83       	std	Y+4, r25	; 0x04
    34b4:	2d 83       	std	Y+5, r18	; 0x05
    34b6:	3e 83       	std	Y+6, r19	; 0x06
    34b8:	4f 83       	std	Y+7, r20	; 0x07
    34ba:	58 87       	std	Y+8, r21	; 0x08
    34bc:	ce 01       	movw	r24, r28
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	be 01       	movw	r22, r28
    34c2:	67 5f       	subi	r22, 0xF7	; 247
    34c4:	7f 4f       	sbci	r23, 0xFF	; 255
    34c6:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    34ca:	ce 01       	movw	r24, r28
    34cc:	05 96       	adiw	r24, 0x05	; 5
    34ce:	be 01       	movw	r22, r28
    34d0:	6f 5e       	subi	r22, 0xEF	; 239
    34d2:	7f 4f       	sbci	r23, 0xFF	; 255
    34d4:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    34d8:	99 85       	ldd	r25, Y+9	; 0x09
    34da:	92 30       	cpi	r25, 0x02	; 2
    34dc:	88 f0       	brcs	.+34     	; 0x3500 <__mulsf3+0x60>
    34de:	89 89       	ldd	r24, Y+17	; 0x11
    34e0:	82 30       	cpi	r24, 0x02	; 2
    34e2:	c8 f0       	brcs	.+50     	; 0x3516 <__mulsf3+0x76>
    34e4:	94 30       	cpi	r25, 0x04	; 4
    34e6:	19 f4       	brne	.+6      	; 0x34ee <__mulsf3+0x4e>
    34e8:	82 30       	cpi	r24, 0x02	; 2
    34ea:	51 f4       	brne	.+20     	; 0x3500 <__mulsf3+0x60>
    34ec:	04 c0       	rjmp	.+8      	; 0x34f6 <__mulsf3+0x56>
    34ee:	84 30       	cpi	r24, 0x04	; 4
    34f0:	29 f4       	brne	.+10     	; 0x34fc <__mulsf3+0x5c>
    34f2:	92 30       	cpi	r25, 0x02	; 2
    34f4:	81 f4       	brne	.+32     	; 0x3516 <__mulsf3+0x76>
    34f6:	8b e6       	ldi	r24, 0x6B	; 107
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	c6 c0       	rjmp	.+396    	; 0x3688 <__mulsf3+0x1e8>
    34fc:	92 30       	cpi	r25, 0x02	; 2
    34fe:	49 f4       	brne	.+18     	; 0x3512 <__mulsf3+0x72>
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	8a 89       	ldd	r24, Y+18	; 0x12
    3506:	98 13       	cpse	r25, r24
    3508:	21 e0       	ldi	r18, 0x01	; 1
    350a:	2a 87       	std	Y+10, r18	; 0x0a
    350c:	ce 01       	movw	r24, r28
    350e:	09 96       	adiw	r24, 0x09	; 9
    3510:	bb c0       	rjmp	.+374    	; 0x3688 <__mulsf3+0x1e8>
    3512:	82 30       	cpi	r24, 0x02	; 2
    3514:	49 f4       	brne	.+18     	; 0x3528 <__mulsf3+0x88>
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	9a 85       	ldd	r25, Y+10	; 0x0a
    351a:	8a 89       	ldd	r24, Y+18	; 0x12
    351c:	98 13       	cpse	r25, r24
    351e:	21 e0       	ldi	r18, 0x01	; 1
    3520:	2a 8b       	std	Y+18, r18	; 0x12
    3522:	ce 01       	movw	r24, r28
    3524:	41 96       	adiw	r24, 0x11	; 17
    3526:	b0 c0       	rjmp	.+352    	; 0x3688 <__mulsf3+0x1e8>
    3528:	2d 84       	ldd	r2, Y+13	; 0x0d
    352a:	3e 84       	ldd	r3, Y+14	; 0x0e
    352c:	4f 84       	ldd	r4, Y+15	; 0x0f
    352e:	58 88       	ldd	r5, Y+16	; 0x10
    3530:	6d 88       	ldd	r6, Y+21	; 0x15
    3532:	7e 88       	ldd	r7, Y+22	; 0x16
    3534:	8f 88       	ldd	r8, Y+23	; 0x17
    3536:	98 8c       	ldd	r9, Y+24	; 0x18
    3538:	ee 24       	eor	r14, r14
    353a:	ff 24       	eor	r15, r15
    353c:	87 01       	movw	r16, r14
    353e:	aa 24       	eor	r10, r10
    3540:	bb 24       	eor	r11, r11
    3542:	65 01       	movw	r12, r10
    3544:	40 e0       	ldi	r20, 0x00	; 0
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	70 e0       	ldi	r23, 0x00	; 0
    354c:	e0 e0       	ldi	r30, 0x00	; 0
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	c1 01       	movw	r24, r2
    3552:	81 70       	andi	r24, 0x01	; 1
    3554:	90 70       	andi	r25, 0x00	; 0
    3556:	89 2b       	or	r24, r25
    3558:	e9 f0       	breq	.+58     	; 0x3594 <__mulsf3+0xf4>
    355a:	e6 0c       	add	r14, r6
    355c:	f7 1c       	adc	r15, r7
    355e:	08 1d       	adc	r16, r8
    3560:	19 1d       	adc	r17, r9
    3562:	9a 01       	movw	r18, r20
    3564:	ab 01       	movw	r20, r22
    3566:	2a 0d       	add	r18, r10
    3568:	3b 1d       	adc	r19, r11
    356a:	4c 1d       	adc	r20, r12
    356c:	5d 1d       	adc	r21, r13
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	a0 e0       	ldi	r26, 0x00	; 0
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	e6 14       	cp	r14, r6
    3578:	f7 04       	cpc	r15, r7
    357a:	08 05       	cpc	r16, r8
    357c:	19 05       	cpc	r17, r9
    357e:	20 f4       	brcc	.+8      	; 0x3588 <__mulsf3+0xe8>
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	a0 e0       	ldi	r26, 0x00	; 0
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	ba 01       	movw	r22, r20
    358a:	a9 01       	movw	r20, r18
    358c:	48 0f       	add	r20, r24
    358e:	59 1f       	adc	r21, r25
    3590:	6a 1f       	adc	r22, r26
    3592:	7b 1f       	adc	r23, r27
    3594:	aa 0c       	add	r10, r10
    3596:	bb 1c       	adc	r11, r11
    3598:	cc 1c       	adc	r12, r12
    359a:	dd 1c       	adc	r13, r13
    359c:	97 fe       	sbrs	r9, 7
    359e:	08 c0       	rjmp	.+16     	; 0x35b0 <__mulsf3+0x110>
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	a0 e0       	ldi	r26, 0x00	; 0
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	a8 2a       	or	r10, r24
    35aa:	b9 2a       	or	r11, r25
    35ac:	ca 2a       	or	r12, r26
    35ae:	db 2a       	or	r13, r27
    35b0:	31 96       	adiw	r30, 0x01	; 1
    35b2:	e0 32       	cpi	r30, 0x20	; 32
    35b4:	f1 05       	cpc	r31, r1
    35b6:	49 f0       	breq	.+18     	; 0x35ca <__mulsf3+0x12a>
    35b8:	66 0c       	add	r6, r6
    35ba:	77 1c       	adc	r7, r7
    35bc:	88 1c       	adc	r8, r8
    35be:	99 1c       	adc	r9, r9
    35c0:	56 94       	lsr	r5
    35c2:	47 94       	ror	r4
    35c4:	37 94       	ror	r3
    35c6:	27 94       	ror	r2
    35c8:	c3 cf       	rjmp	.-122    	; 0x3550 <__mulsf3+0xb0>
    35ca:	fa 85       	ldd	r31, Y+10	; 0x0a
    35cc:	ea 89       	ldd	r30, Y+18	; 0x12
    35ce:	2b 89       	ldd	r18, Y+19	; 0x13
    35d0:	3c 89       	ldd	r19, Y+20	; 0x14
    35d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    35d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    35d6:	28 0f       	add	r18, r24
    35d8:	39 1f       	adc	r19, r25
    35da:	2e 5f       	subi	r18, 0xFE	; 254
    35dc:	3f 4f       	sbci	r19, 0xFF	; 255
    35de:	17 c0       	rjmp	.+46     	; 0x360e <__mulsf3+0x16e>
    35e0:	ca 01       	movw	r24, r20
    35e2:	81 70       	andi	r24, 0x01	; 1
    35e4:	90 70       	andi	r25, 0x00	; 0
    35e6:	89 2b       	or	r24, r25
    35e8:	61 f0       	breq	.+24     	; 0x3602 <__mulsf3+0x162>
    35ea:	16 95       	lsr	r17
    35ec:	07 95       	ror	r16
    35ee:	f7 94       	ror	r15
    35f0:	e7 94       	ror	r14
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	a0 e0       	ldi	r26, 0x00	; 0
    35f8:	b0 e8       	ldi	r27, 0x80	; 128
    35fa:	e8 2a       	or	r14, r24
    35fc:	f9 2a       	or	r15, r25
    35fe:	0a 2b       	or	r16, r26
    3600:	1b 2b       	or	r17, r27
    3602:	76 95       	lsr	r23
    3604:	67 95       	ror	r22
    3606:	57 95       	ror	r21
    3608:	47 95       	ror	r20
    360a:	2f 5f       	subi	r18, 0xFF	; 255
    360c:	3f 4f       	sbci	r19, 0xFF	; 255
    360e:	77 fd       	sbrc	r23, 7
    3610:	e7 cf       	rjmp	.-50     	; 0x35e0 <__mulsf3+0x140>
    3612:	0c c0       	rjmp	.+24     	; 0x362c <__mulsf3+0x18c>
    3614:	44 0f       	add	r20, r20
    3616:	55 1f       	adc	r21, r21
    3618:	66 1f       	adc	r22, r22
    361a:	77 1f       	adc	r23, r23
    361c:	17 fd       	sbrc	r17, 7
    361e:	41 60       	ori	r20, 0x01	; 1
    3620:	ee 0c       	add	r14, r14
    3622:	ff 1c       	adc	r15, r15
    3624:	00 1f       	adc	r16, r16
    3626:	11 1f       	adc	r17, r17
    3628:	21 50       	subi	r18, 0x01	; 1
    362a:	30 40       	sbci	r19, 0x00	; 0
    362c:	40 30       	cpi	r20, 0x00	; 0
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	59 07       	cpc	r21, r25
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	69 07       	cpc	r22, r25
    3636:	90 e4       	ldi	r25, 0x40	; 64
    3638:	79 07       	cpc	r23, r25
    363a:	60 f3       	brcs	.-40     	; 0x3614 <__mulsf3+0x174>
    363c:	2b 8f       	std	Y+27, r18	; 0x1b
    363e:	3c 8f       	std	Y+28, r19	; 0x1c
    3640:	db 01       	movw	r26, r22
    3642:	ca 01       	movw	r24, r20
    3644:	8f 77       	andi	r24, 0x7F	; 127
    3646:	90 70       	andi	r25, 0x00	; 0
    3648:	a0 70       	andi	r26, 0x00	; 0
    364a:	b0 70       	andi	r27, 0x00	; 0
    364c:	80 34       	cpi	r24, 0x40	; 64
    364e:	91 05       	cpc	r25, r1
    3650:	a1 05       	cpc	r26, r1
    3652:	b1 05       	cpc	r27, r1
    3654:	61 f4       	brne	.+24     	; 0x366e <__mulsf3+0x1ce>
    3656:	47 fd       	sbrc	r20, 7
    3658:	0a c0       	rjmp	.+20     	; 0x366e <__mulsf3+0x1ce>
    365a:	e1 14       	cp	r14, r1
    365c:	f1 04       	cpc	r15, r1
    365e:	01 05       	cpc	r16, r1
    3660:	11 05       	cpc	r17, r1
    3662:	29 f0       	breq	.+10     	; 0x366e <__mulsf3+0x1ce>
    3664:	40 5c       	subi	r20, 0xC0	; 192
    3666:	5f 4f       	sbci	r21, 0xFF	; 255
    3668:	6f 4f       	sbci	r22, 0xFF	; 255
    366a:	7f 4f       	sbci	r23, 0xFF	; 255
    366c:	40 78       	andi	r20, 0x80	; 128
    366e:	1a 8e       	std	Y+26, r1	; 0x1a
    3670:	fe 17       	cp	r31, r30
    3672:	11 f0       	breq	.+4      	; 0x3678 <__mulsf3+0x1d8>
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	8a 8f       	std	Y+26, r24	; 0x1a
    3678:	4d 8f       	std	Y+29, r20	; 0x1d
    367a:	5e 8f       	std	Y+30, r21	; 0x1e
    367c:	6f 8f       	std	Y+31, r22	; 0x1f
    367e:	78 a3       	std	Y+32, r23	; 0x20
    3680:	83 e0       	ldi	r24, 0x03	; 3
    3682:	89 8f       	std	Y+25, r24	; 0x19
    3684:	ce 01       	movw	r24, r28
    3686:	49 96       	adiw	r24, 0x19	; 25
    3688:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__pack_f>
    368c:	a0 96       	adiw	r28, 0x20	; 32
    368e:	e2 e1       	ldi	r30, 0x12	; 18
    3690:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <__epilogue_restores__>

00003694 <__divsf3>:
    3694:	a8 e1       	ldi	r26, 0x18	; 24
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	e0 e5       	ldi	r30, 0x50	; 80
    369a:	fb e1       	ldi	r31, 0x1B	; 27
    369c:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <__prologue_saves__+0x10>
    36a0:	69 83       	std	Y+1, r22	; 0x01
    36a2:	7a 83       	std	Y+2, r23	; 0x02
    36a4:	8b 83       	std	Y+3, r24	; 0x03
    36a6:	9c 83       	std	Y+4, r25	; 0x04
    36a8:	2d 83       	std	Y+5, r18	; 0x05
    36aa:	3e 83       	std	Y+6, r19	; 0x06
    36ac:	4f 83       	std	Y+7, r20	; 0x07
    36ae:	58 87       	std	Y+8, r21	; 0x08
    36b0:	b9 e0       	ldi	r27, 0x09	; 9
    36b2:	eb 2e       	mov	r14, r27
    36b4:	f1 2c       	mov	r15, r1
    36b6:	ec 0e       	add	r14, r28
    36b8:	fd 1e       	adc	r15, r29
    36ba:	ce 01       	movw	r24, r28
    36bc:	01 96       	adiw	r24, 0x01	; 1
    36be:	b7 01       	movw	r22, r14
    36c0:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    36c4:	8e 01       	movw	r16, r28
    36c6:	0f 5e       	subi	r16, 0xEF	; 239
    36c8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ca:	ce 01       	movw	r24, r28
    36cc:	05 96       	adiw	r24, 0x05	; 5
    36ce:	b8 01       	movw	r22, r16
    36d0:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    36d4:	29 85       	ldd	r18, Y+9	; 0x09
    36d6:	22 30       	cpi	r18, 0x02	; 2
    36d8:	08 f4       	brcc	.+2      	; 0x36dc <__divsf3+0x48>
    36da:	7e c0       	rjmp	.+252    	; 0x37d8 <__divsf3+0x144>
    36dc:	39 89       	ldd	r19, Y+17	; 0x11
    36de:	32 30       	cpi	r19, 0x02	; 2
    36e0:	10 f4       	brcc	.+4      	; 0x36e6 <__divsf3+0x52>
    36e2:	b8 01       	movw	r22, r16
    36e4:	7c c0       	rjmp	.+248    	; 0x37de <__divsf3+0x14a>
    36e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    36e8:	9a 89       	ldd	r25, Y+18	; 0x12
    36ea:	89 27       	eor	r24, r25
    36ec:	8a 87       	std	Y+10, r24	; 0x0a
    36ee:	24 30       	cpi	r18, 0x04	; 4
    36f0:	11 f0       	breq	.+4      	; 0x36f6 <__divsf3+0x62>
    36f2:	22 30       	cpi	r18, 0x02	; 2
    36f4:	31 f4       	brne	.+12     	; 0x3702 <__divsf3+0x6e>
    36f6:	23 17       	cp	r18, r19
    36f8:	09 f0       	breq	.+2      	; 0x36fc <__divsf3+0x68>
    36fa:	6e c0       	rjmp	.+220    	; 0x37d8 <__divsf3+0x144>
    36fc:	6b e6       	ldi	r22, 0x6B	; 107
    36fe:	70 e0       	ldi	r23, 0x00	; 0
    3700:	6e c0       	rjmp	.+220    	; 0x37de <__divsf3+0x14a>
    3702:	34 30       	cpi	r19, 0x04	; 4
    3704:	39 f4       	brne	.+14     	; 0x3714 <__divsf3+0x80>
    3706:	1d 86       	std	Y+13, r1	; 0x0d
    3708:	1e 86       	std	Y+14, r1	; 0x0e
    370a:	1f 86       	std	Y+15, r1	; 0x0f
    370c:	18 8a       	std	Y+16, r1	; 0x10
    370e:	1c 86       	std	Y+12, r1	; 0x0c
    3710:	1b 86       	std	Y+11, r1	; 0x0b
    3712:	04 c0       	rjmp	.+8      	; 0x371c <__divsf3+0x88>
    3714:	32 30       	cpi	r19, 0x02	; 2
    3716:	21 f4       	brne	.+8      	; 0x3720 <__divsf3+0x8c>
    3718:	84 e0       	ldi	r24, 0x04	; 4
    371a:	89 87       	std	Y+9, r24	; 0x09
    371c:	b7 01       	movw	r22, r14
    371e:	5f c0       	rjmp	.+190    	; 0x37de <__divsf3+0x14a>
    3720:	2b 85       	ldd	r18, Y+11	; 0x0b
    3722:	3c 85       	ldd	r19, Y+12	; 0x0c
    3724:	8b 89       	ldd	r24, Y+19	; 0x13
    3726:	9c 89       	ldd	r25, Y+20	; 0x14
    3728:	28 1b       	sub	r18, r24
    372a:	39 0b       	sbc	r19, r25
    372c:	3c 87       	std	Y+12, r19	; 0x0c
    372e:	2b 87       	std	Y+11, r18	; 0x0b
    3730:	ed 84       	ldd	r14, Y+13	; 0x0d
    3732:	fe 84       	ldd	r15, Y+14	; 0x0e
    3734:	0f 85       	ldd	r16, Y+15	; 0x0f
    3736:	18 89       	ldd	r17, Y+16	; 0x10
    3738:	ad 88       	ldd	r10, Y+21	; 0x15
    373a:	be 88       	ldd	r11, Y+22	; 0x16
    373c:	cf 88       	ldd	r12, Y+23	; 0x17
    373e:	d8 8c       	ldd	r13, Y+24	; 0x18
    3740:	ea 14       	cp	r14, r10
    3742:	fb 04       	cpc	r15, r11
    3744:	0c 05       	cpc	r16, r12
    3746:	1d 05       	cpc	r17, r13
    3748:	40 f4       	brcc	.+16     	; 0x375a <__divsf3+0xc6>
    374a:	ee 0c       	add	r14, r14
    374c:	ff 1c       	adc	r15, r15
    374e:	00 1f       	adc	r16, r16
    3750:	11 1f       	adc	r17, r17
    3752:	21 50       	subi	r18, 0x01	; 1
    3754:	30 40       	sbci	r19, 0x00	; 0
    3756:	3c 87       	std	Y+12, r19	; 0x0c
    3758:	2b 87       	std	Y+11, r18	; 0x0b
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e0       	ldi	r20, 0x00	; 0
    3760:	50 e0       	ldi	r21, 0x00	; 0
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	a0 e0       	ldi	r26, 0x00	; 0
    3768:	b0 e4       	ldi	r27, 0x40	; 64
    376a:	60 e0       	ldi	r22, 0x00	; 0
    376c:	70 e0       	ldi	r23, 0x00	; 0
    376e:	ea 14       	cp	r14, r10
    3770:	fb 04       	cpc	r15, r11
    3772:	0c 05       	cpc	r16, r12
    3774:	1d 05       	cpc	r17, r13
    3776:	40 f0       	brcs	.+16     	; 0x3788 <__divsf3+0xf4>
    3778:	28 2b       	or	r18, r24
    377a:	39 2b       	or	r19, r25
    377c:	4a 2b       	or	r20, r26
    377e:	5b 2b       	or	r21, r27
    3780:	ea 18       	sub	r14, r10
    3782:	fb 08       	sbc	r15, r11
    3784:	0c 09       	sbc	r16, r12
    3786:	1d 09       	sbc	r17, r13
    3788:	b6 95       	lsr	r27
    378a:	a7 95       	ror	r26
    378c:	97 95       	ror	r25
    378e:	87 95       	ror	r24
    3790:	ee 0c       	add	r14, r14
    3792:	ff 1c       	adc	r15, r15
    3794:	00 1f       	adc	r16, r16
    3796:	11 1f       	adc	r17, r17
    3798:	6f 5f       	subi	r22, 0xFF	; 255
    379a:	7f 4f       	sbci	r23, 0xFF	; 255
    379c:	6f 31       	cpi	r22, 0x1F	; 31
    379e:	71 05       	cpc	r23, r1
    37a0:	31 f7       	brne	.-52     	; 0x376e <__divsf3+0xda>
    37a2:	da 01       	movw	r26, r20
    37a4:	c9 01       	movw	r24, r18
    37a6:	8f 77       	andi	r24, 0x7F	; 127
    37a8:	90 70       	andi	r25, 0x00	; 0
    37aa:	a0 70       	andi	r26, 0x00	; 0
    37ac:	b0 70       	andi	r27, 0x00	; 0
    37ae:	80 34       	cpi	r24, 0x40	; 64
    37b0:	91 05       	cpc	r25, r1
    37b2:	a1 05       	cpc	r26, r1
    37b4:	b1 05       	cpc	r27, r1
    37b6:	61 f4       	brne	.+24     	; 0x37d0 <__divsf3+0x13c>
    37b8:	27 fd       	sbrc	r18, 7
    37ba:	0a c0       	rjmp	.+20     	; 0x37d0 <__divsf3+0x13c>
    37bc:	e1 14       	cp	r14, r1
    37be:	f1 04       	cpc	r15, r1
    37c0:	01 05       	cpc	r16, r1
    37c2:	11 05       	cpc	r17, r1
    37c4:	29 f0       	breq	.+10     	; 0x37d0 <__divsf3+0x13c>
    37c6:	20 5c       	subi	r18, 0xC0	; 192
    37c8:	3f 4f       	sbci	r19, 0xFF	; 255
    37ca:	4f 4f       	sbci	r20, 0xFF	; 255
    37cc:	5f 4f       	sbci	r21, 0xFF	; 255
    37ce:	20 78       	andi	r18, 0x80	; 128
    37d0:	2d 87       	std	Y+13, r18	; 0x0d
    37d2:	3e 87       	std	Y+14, r19	; 0x0e
    37d4:	4f 87       	std	Y+15, r20	; 0x0f
    37d6:	58 8b       	std	Y+16, r21	; 0x10
    37d8:	be 01       	movw	r22, r28
    37da:	67 5f       	subi	r22, 0xF7	; 247
    37dc:	7f 4f       	sbci	r23, 0xFF	; 255
    37de:	cb 01       	movw	r24, r22
    37e0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__pack_f>
    37e4:	68 96       	adiw	r28, 0x18	; 24
    37e6:	ea e0       	ldi	r30, 0x0A	; 10
    37e8:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__epilogue_restores__+0x10>

000037ec <__gesf2>:
    37ec:	a8 e1       	ldi	r26, 0x18	; 24
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	ec ef       	ldi	r30, 0xFC	; 252
    37f2:	fb e1       	ldi	r31, 0x1B	; 27
    37f4:	0c 94 a7 1f 	jmp	0x3f4e	; 0x3f4e <__prologue_saves__+0x18>
    37f8:	69 83       	std	Y+1, r22	; 0x01
    37fa:	7a 83       	std	Y+2, r23	; 0x02
    37fc:	8b 83       	std	Y+3, r24	; 0x03
    37fe:	9c 83       	std	Y+4, r25	; 0x04
    3800:	2d 83       	std	Y+5, r18	; 0x05
    3802:	3e 83       	std	Y+6, r19	; 0x06
    3804:	4f 83       	std	Y+7, r20	; 0x07
    3806:	58 87       	std	Y+8, r21	; 0x08
    3808:	89 e0       	ldi	r24, 0x09	; 9
    380a:	e8 2e       	mov	r14, r24
    380c:	f1 2c       	mov	r15, r1
    380e:	ec 0e       	add	r14, r28
    3810:	fd 1e       	adc	r15, r29
    3812:	ce 01       	movw	r24, r28
    3814:	01 96       	adiw	r24, 0x01	; 1
    3816:	b7 01       	movw	r22, r14
    3818:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    381c:	8e 01       	movw	r16, r28
    381e:	0f 5e       	subi	r16, 0xEF	; 239
    3820:	1f 4f       	sbci	r17, 0xFF	; 255
    3822:	ce 01       	movw	r24, r28
    3824:	05 96       	adiw	r24, 0x05	; 5
    3826:	b8 01       	movw	r22, r16
    3828:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    382c:	89 85       	ldd	r24, Y+9	; 0x09
    382e:	82 30       	cpi	r24, 0x02	; 2
    3830:	40 f0       	brcs	.+16     	; 0x3842 <__gesf2+0x56>
    3832:	89 89       	ldd	r24, Y+17	; 0x11
    3834:	82 30       	cpi	r24, 0x02	; 2
    3836:	28 f0       	brcs	.+10     	; 0x3842 <__gesf2+0x56>
    3838:	c7 01       	movw	r24, r14
    383a:	b8 01       	movw	r22, r16
    383c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__fpcmp_parts_f>
    3840:	01 c0       	rjmp	.+2      	; 0x3844 <__gesf2+0x58>
    3842:	8f ef       	ldi	r24, 0xFF	; 255
    3844:	68 96       	adiw	r28, 0x18	; 24
    3846:	e6 e0       	ldi	r30, 0x06	; 6
    3848:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <__epilogue_restores__+0x18>

0000384c <__floatsisf>:
    384c:	a8 e0       	ldi	r26, 0x08	; 8
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	ec e2       	ldi	r30, 0x2C	; 44
    3852:	fc e1       	ldi	r31, 0x1C	; 28
    3854:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__prologue_saves__+0x12>
    3858:	9b 01       	movw	r18, r22
    385a:	ac 01       	movw	r20, r24
    385c:	83 e0       	ldi	r24, 0x03	; 3
    385e:	89 83       	std	Y+1, r24	; 0x01
    3860:	da 01       	movw	r26, r20
    3862:	c9 01       	movw	r24, r18
    3864:	88 27       	eor	r24, r24
    3866:	b7 fd       	sbrc	r27, 7
    3868:	83 95       	inc	r24
    386a:	99 27       	eor	r25, r25
    386c:	aa 27       	eor	r26, r26
    386e:	bb 27       	eor	r27, r27
    3870:	b8 2e       	mov	r11, r24
    3872:	21 15       	cp	r18, r1
    3874:	31 05       	cpc	r19, r1
    3876:	41 05       	cpc	r20, r1
    3878:	51 05       	cpc	r21, r1
    387a:	19 f4       	brne	.+6      	; 0x3882 <__floatsisf+0x36>
    387c:	82 e0       	ldi	r24, 0x02	; 2
    387e:	89 83       	std	Y+1, r24	; 0x01
    3880:	3a c0       	rjmp	.+116    	; 0x38f6 <__floatsisf+0xaa>
    3882:	88 23       	and	r24, r24
    3884:	a9 f0       	breq	.+42     	; 0x38b0 <__floatsisf+0x64>
    3886:	20 30       	cpi	r18, 0x00	; 0
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	38 07       	cpc	r19, r24
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	48 07       	cpc	r20, r24
    3890:	80 e8       	ldi	r24, 0x80	; 128
    3892:	58 07       	cpc	r21, r24
    3894:	29 f4       	brne	.+10     	; 0x38a0 <__floatsisf+0x54>
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	9f ec       	ldi	r25, 0xCF	; 207
    389e:	30 c0       	rjmp	.+96     	; 0x3900 <__floatsisf+0xb4>
    38a0:	ee 24       	eor	r14, r14
    38a2:	ff 24       	eor	r15, r15
    38a4:	87 01       	movw	r16, r14
    38a6:	e2 1a       	sub	r14, r18
    38a8:	f3 0a       	sbc	r15, r19
    38aa:	04 0b       	sbc	r16, r20
    38ac:	15 0b       	sbc	r17, r21
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <__floatsisf+0x68>
    38b0:	79 01       	movw	r14, r18
    38b2:	8a 01       	movw	r16, r20
    38b4:	8e e1       	ldi	r24, 0x1E	; 30
    38b6:	c8 2e       	mov	r12, r24
    38b8:	d1 2c       	mov	r13, r1
    38ba:	dc 82       	std	Y+4, r13	; 0x04
    38bc:	cb 82       	std	Y+3, r12	; 0x03
    38be:	ed 82       	std	Y+5, r14	; 0x05
    38c0:	fe 82       	std	Y+6, r15	; 0x06
    38c2:	0f 83       	std	Y+7, r16	; 0x07
    38c4:	18 87       	std	Y+8, r17	; 0x08
    38c6:	c8 01       	movw	r24, r16
    38c8:	b7 01       	movw	r22, r14
    38ca:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__clzsi2>
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	18 16       	cp	r1, r24
    38d2:	19 06       	cpc	r1, r25
    38d4:	84 f4       	brge	.+32     	; 0x38f6 <__floatsisf+0xaa>
    38d6:	08 2e       	mov	r0, r24
    38d8:	04 c0       	rjmp	.+8      	; 0x38e2 <__floatsisf+0x96>
    38da:	ee 0c       	add	r14, r14
    38dc:	ff 1c       	adc	r15, r15
    38de:	00 1f       	adc	r16, r16
    38e0:	11 1f       	adc	r17, r17
    38e2:	0a 94       	dec	r0
    38e4:	d2 f7       	brpl	.-12     	; 0x38da <__floatsisf+0x8e>
    38e6:	ed 82       	std	Y+5, r14	; 0x05
    38e8:	fe 82       	std	Y+6, r15	; 0x06
    38ea:	0f 83       	std	Y+7, r16	; 0x07
    38ec:	18 87       	std	Y+8, r17	; 0x08
    38ee:	c8 1a       	sub	r12, r24
    38f0:	d9 0a       	sbc	r13, r25
    38f2:	dc 82       	std	Y+4, r13	; 0x04
    38f4:	cb 82       	std	Y+3, r12	; 0x03
    38f6:	ba 82       	std	Y+2, r11	; 0x02
    38f8:	ce 01       	movw	r24, r28
    38fa:	01 96       	adiw	r24, 0x01	; 1
    38fc:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__pack_f>
    3900:	28 96       	adiw	r28, 0x08	; 8
    3902:	e9 e0       	ldi	r30, 0x09	; 9
    3904:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__epilogue_restores__+0x12>

00003908 <__fixsfsi>:
    3908:	ac e0       	ldi	r26, 0x0C	; 12
    390a:	b0 e0       	ldi	r27, 0x00	; 0
    390c:	ea e8       	ldi	r30, 0x8A	; 138
    390e:	fc e1       	ldi	r31, 0x1C	; 28
    3910:	0c 94 ab 1f 	jmp	0x3f56	; 0x3f56 <__prologue_saves__+0x20>
    3914:	69 83       	std	Y+1, r22	; 0x01
    3916:	7a 83       	std	Y+2, r23	; 0x02
    3918:	8b 83       	std	Y+3, r24	; 0x03
    391a:	9c 83       	std	Y+4, r25	; 0x04
    391c:	ce 01       	movw	r24, r28
    391e:	01 96       	adiw	r24, 0x01	; 1
    3920:	be 01       	movw	r22, r28
    3922:	6b 5f       	subi	r22, 0xFB	; 251
    3924:	7f 4f       	sbci	r23, 0xFF	; 255
    3926:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__unpack_f>
    392a:	8d 81       	ldd	r24, Y+5	; 0x05
    392c:	82 30       	cpi	r24, 0x02	; 2
    392e:	61 f1       	breq	.+88     	; 0x3988 <__fixsfsi+0x80>
    3930:	82 30       	cpi	r24, 0x02	; 2
    3932:	50 f1       	brcs	.+84     	; 0x3988 <__fixsfsi+0x80>
    3934:	84 30       	cpi	r24, 0x04	; 4
    3936:	21 f4       	brne	.+8      	; 0x3940 <__fixsfsi+0x38>
    3938:	8e 81       	ldd	r24, Y+6	; 0x06
    393a:	88 23       	and	r24, r24
    393c:	51 f1       	breq	.+84     	; 0x3992 <__fixsfsi+0x8a>
    393e:	2e c0       	rjmp	.+92     	; 0x399c <__fixsfsi+0x94>
    3940:	2f 81       	ldd	r18, Y+7	; 0x07
    3942:	38 85       	ldd	r19, Y+8	; 0x08
    3944:	37 fd       	sbrc	r19, 7
    3946:	20 c0       	rjmp	.+64     	; 0x3988 <__fixsfsi+0x80>
    3948:	6e 81       	ldd	r22, Y+6	; 0x06
    394a:	2f 31       	cpi	r18, 0x1F	; 31
    394c:	31 05       	cpc	r19, r1
    394e:	1c f0       	brlt	.+6      	; 0x3956 <__fixsfsi+0x4e>
    3950:	66 23       	and	r22, r22
    3952:	f9 f0       	breq	.+62     	; 0x3992 <__fixsfsi+0x8a>
    3954:	23 c0       	rjmp	.+70     	; 0x399c <__fixsfsi+0x94>
    3956:	8e e1       	ldi	r24, 0x1E	; 30
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	82 1b       	sub	r24, r18
    395c:	93 0b       	sbc	r25, r19
    395e:	29 85       	ldd	r18, Y+9	; 0x09
    3960:	3a 85       	ldd	r19, Y+10	; 0x0a
    3962:	4b 85       	ldd	r20, Y+11	; 0x0b
    3964:	5c 85       	ldd	r21, Y+12	; 0x0c
    3966:	04 c0       	rjmp	.+8      	; 0x3970 <__fixsfsi+0x68>
    3968:	56 95       	lsr	r21
    396a:	47 95       	ror	r20
    396c:	37 95       	ror	r19
    396e:	27 95       	ror	r18
    3970:	8a 95       	dec	r24
    3972:	d2 f7       	brpl	.-12     	; 0x3968 <__fixsfsi+0x60>
    3974:	66 23       	and	r22, r22
    3976:	b1 f0       	breq	.+44     	; 0x39a4 <__fixsfsi+0x9c>
    3978:	50 95       	com	r21
    397a:	40 95       	com	r20
    397c:	30 95       	com	r19
    397e:	21 95       	neg	r18
    3980:	3f 4f       	sbci	r19, 0xFF	; 255
    3982:	4f 4f       	sbci	r20, 0xFF	; 255
    3984:	5f 4f       	sbci	r21, 0xFF	; 255
    3986:	0e c0       	rjmp	.+28     	; 0x39a4 <__fixsfsi+0x9c>
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e0       	ldi	r20, 0x00	; 0
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	09 c0       	rjmp	.+18     	; 0x39a4 <__fixsfsi+0x9c>
    3992:	2f ef       	ldi	r18, 0xFF	; 255
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	4f ef       	ldi	r20, 0xFF	; 255
    3998:	5f e7       	ldi	r21, 0x7F	; 127
    399a:	04 c0       	rjmp	.+8      	; 0x39a4 <__fixsfsi+0x9c>
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	50 e8       	ldi	r21, 0x80	; 128
    39a4:	b9 01       	movw	r22, r18
    39a6:	ca 01       	movw	r24, r20
    39a8:	2c 96       	adiw	r28, 0x0c	; 12
    39aa:	e2 e0       	ldi	r30, 0x02	; 2
    39ac:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <__epilogue_restores__+0x20>

000039b0 <__floatunsisf>:
    39b0:	a8 e0       	ldi	r26, 0x08	; 8
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	ee ed       	ldi	r30, 0xDE	; 222
    39b6:	fc e1       	ldi	r31, 0x1C	; 28
    39b8:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <__prologue_saves__+0x10>
    39bc:	7b 01       	movw	r14, r22
    39be:	8c 01       	movw	r16, r24
    39c0:	61 15       	cp	r22, r1
    39c2:	71 05       	cpc	r23, r1
    39c4:	81 05       	cpc	r24, r1
    39c6:	91 05       	cpc	r25, r1
    39c8:	19 f4       	brne	.+6      	; 0x39d0 <__floatunsisf+0x20>
    39ca:	82 e0       	ldi	r24, 0x02	; 2
    39cc:	89 83       	std	Y+1, r24	; 0x01
    39ce:	60 c0       	rjmp	.+192    	; 0x3a90 <__floatunsisf+0xe0>
    39d0:	83 e0       	ldi	r24, 0x03	; 3
    39d2:	89 83       	std	Y+1, r24	; 0x01
    39d4:	8e e1       	ldi	r24, 0x1E	; 30
    39d6:	c8 2e       	mov	r12, r24
    39d8:	d1 2c       	mov	r13, r1
    39da:	dc 82       	std	Y+4, r13	; 0x04
    39dc:	cb 82       	std	Y+3, r12	; 0x03
    39de:	ed 82       	std	Y+5, r14	; 0x05
    39e0:	fe 82       	std	Y+6, r15	; 0x06
    39e2:	0f 83       	std	Y+7, r16	; 0x07
    39e4:	18 87       	std	Y+8, r17	; 0x08
    39e6:	c8 01       	movw	r24, r16
    39e8:	b7 01       	movw	r22, r14
    39ea:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__clzsi2>
    39ee:	fc 01       	movw	r30, r24
    39f0:	31 97       	sbiw	r30, 0x01	; 1
    39f2:	f7 ff       	sbrs	r31, 7
    39f4:	3b c0       	rjmp	.+118    	; 0x3a6c <__floatunsisf+0xbc>
    39f6:	22 27       	eor	r18, r18
    39f8:	33 27       	eor	r19, r19
    39fa:	2e 1b       	sub	r18, r30
    39fc:	3f 0b       	sbc	r19, r31
    39fe:	57 01       	movw	r10, r14
    3a00:	68 01       	movw	r12, r16
    3a02:	02 2e       	mov	r0, r18
    3a04:	04 c0       	rjmp	.+8      	; 0x3a0e <__floatunsisf+0x5e>
    3a06:	d6 94       	lsr	r13
    3a08:	c7 94       	ror	r12
    3a0a:	b7 94       	ror	r11
    3a0c:	a7 94       	ror	r10
    3a0e:	0a 94       	dec	r0
    3a10:	d2 f7       	brpl	.-12     	; 0x3a06 <__floatunsisf+0x56>
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	50 e0       	ldi	r21, 0x00	; 0
    3a16:	60 e0       	ldi	r22, 0x00	; 0
    3a18:	70 e0       	ldi	r23, 0x00	; 0
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	a0 e0       	ldi	r26, 0x00	; 0
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	04 c0       	rjmp	.+8      	; 0x3a2c <__floatunsisf+0x7c>
    3a24:	88 0f       	add	r24, r24
    3a26:	99 1f       	adc	r25, r25
    3a28:	aa 1f       	adc	r26, r26
    3a2a:	bb 1f       	adc	r27, r27
    3a2c:	2a 95       	dec	r18
    3a2e:	d2 f7       	brpl	.-12     	; 0x3a24 <__floatunsisf+0x74>
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	a1 09       	sbc	r26, r1
    3a34:	b1 09       	sbc	r27, r1
    3a36:	8e 21       	and	r24, r14
    3a38:	9f 21       	and	r25, r15
    3a3a:	a0 23       	and	r26, r16
    3a3c:	b1 23       	and	r27, r17
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	a1 05       	cpc	r26, r1
    3a42:	b1 05       	cpc	r27, r1
    3a44:	21 f0       	breq	.+8      	; 0x3a4e <__floatunsisf+0x9e>
    3a46:	41 e0       	ldi	r20, 0x01	; 1
    3a48:	50 e0       	ldi	r21, 0x00	; 0
    3a4a:	60 e0       	ldi	r22, 0x00	; 0
    3a4c:	70 e0       	ldi	r23, 0x00	; 0
    3a4e:	4a 29       	or	r20, r10
    3a50:	5b 29       	or	r21, r11
    3a52:	6c 29       	or	r22, r12
    3a54:	7d 29       	or	r23, r13
    3a56:	4d 83       	std	Y+5, r20	; 0x05
    3a58:	5e 83       	std	Y+6, r21	; 0x06
    3a5a:	6f 83       	std	Y+7, r22	; 0x07
    3a5c:	78 87       	std	Y+8, r23	; 0x08
    3a5e:	8e e1       	ldi	r24, 0x1E	; 30
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	8e 1b       	sub	r24, r30
    3a64:	9f 0b       	sbc	r25, r31
    3a66:	9c 83       	std	Y+4, r25	; 0x04
    3a68:	8b 83       	std	Y+3, r24	; 0x03
    3a6a:	12 c0       	rjmp	.+36     	; 0x3a90 <__floatunsisf+0xe0>
    3a6c:	30 97       	sbiw	r30, 0x00	; 0
    3a6e:	81 f0       	breq	.+32     	; 0x3a90 <__floatunsisf+0xe0>
    3a70:	0e 2e       	mov	r0, r30
    3a72:	04 c0       	rjmp	.+8      	; 0x3a7c <__floatunsisf+0xcc>
    3a74:	ee 0c       	add	r14, r14
    3a76:	ff 1c       	adc	r15, r15
    3a78:	00 1f       	adc	r16, r16
    3a7a:	11 1f       	adc	r17, r17
    3a7c:	0a 94       	dec	r0
    3a7e:	d2 f7       	brpl	.-12     	; 0x3a74 <__floatunsisf+0xc4>
    3a80:	ed 82       	std	Y+5, r14	; 0x05
    3a82:	fe 82       	std	Y+6, r15	; 0x06
    3a84:	0f 83       	std	Y+7, r16	; 0x07
    3a86:	18 87       	std	Y+8, r17	; 0x08
    3a88:	ce 1a       	sub	r12, r30
    3a8a:	df 0a       	sbc	r13, r31
    3a8c:	dc 82       	std	Y+4, r13	; 0x04
    3a8e:	cb 82       	std	Y+3, r12	; 0x03
    3a90:	1a 82       	std	Y+2, r1	; 0x02
    3a92:	ce 01       	movw	r24, r28
    3a94:	01 96       	adiw	r24, 0x01	; 1
    3a96:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <__pack_f>
    3a9a:	28 96       	adiw	r28, 0x08	; 8
    3a9c:	ea e0       	ldi	r30, 0x0A	; 10
    3a9e:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__epilogue_restores__+0x10>

00003aa2 <__clzsi2>:
    3aa2:	ef 92       	push	r14
    3aa4:	ff 92       	push	r15
    3aa6:	0f 93       	push	r16
    3aa8:	1f 93       	push	r17
    3aaa:	7b 01       	movw	r14, r22
    3aac:	8c 01       	movw	r16, r24
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	e8 16       	cp	r14, r24
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	f8 06       	cpc	r15, r24
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	08 07       	cpc	r16, r24
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	18 07       	cpc	r17, r24
    3abe:	88 f4       	brcc	.+34     	; 0x3ae2 <__clzsi2+0x40>
    3ac0:	8f ef       	ldi	r24, 0xFF	; 255
    3ac2:	e8 16       	cp	r14, r24
    3ac4:	f1 04       	cpc	r15, r1
    3ac6:	01 05       	cpc	r16, r1
    3ac8:	11 05       	cpc	r17, r1
    3aca:	31 f0       	breq	.+12     	; 0x3ad8 <__clzsi2+0x36>
    3acc:	28 f0       	brcs	.+10     	; 0x3ad8 <__clzsi2+0x36>
    3ace:	88 e0       	ldi	r24, 0x08	; 8
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	a0 e0       	ldi	r26, 0x00	; 0
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	17 c0       	rjmp	.+46     	; 0x3b06 <__clzsi2+0x64>
    3ad8:	80 e0       	ldi	r24, 0x00	; 0
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	a0 e0       	ldi	r26, 0x00	; 0
    3ade:	b0 e0       	ldi	r27, 0x00	; 0
    3ae0:	12 c0       	rjmp	.+36     	; 0x3b06 <__clzsi2+0x64>
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	e8 16       	cp	r14, r24
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	f8 06       	cpc	r15, r24
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	08 07       	cpc	r16, r24
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	18 07       	cpc	r17, r24
    3af2:	28 f0       	brcs	.+10     	; 0x3afe <__clzsi2+0x5c>
    3af4:	88 e1       	ldi	r24, 0x18	; 24
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	a0 e0       	ldi	r26, 0x00	; 0
    3afa:	b0 e0       	ldi	r27, 0x00	; 0
    3afc:	04 c0       	rjmp	.+8      	; 0x3b06 <__clzsi2+0x64>
    3afe:	80 e1       	ldi	r24, 0x10	; 16
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	a0 e0       	ldi	r26, 0x00	; 0
    3b04:	b0 e0       	ldi	r27, 0x00	; 0
    3b06:	20 e2       	ldi	r18, 0x20	; 32
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e0       	ldi	r20, 0x00	; 0
    3b0c:	50 e0       	ldi	r21, 0x00	; 0
    3b0e:	28 1b       	sub	r18, r24
    3b10:	39 0b       	sbc	r19, r25
    3b12:	4a 0b       	sbc	r20, r26
    3b14:	5b 0b       	sbc	r21, r27
    3b16:	04 c0       	rjmp	.+8      	; 0x3b20 <__clzsi2+0x7e>
    3b18:	16 95       	lsr	r17
    3b1a:	07 95       	ror	r16
    3b1c:	f7 94       	ror	r15
    3b1e:	e7 94       	ror	r14
    3b20:	8a 95       	dec	r24
    3b22:	d2 f7       	brpl	.-12     	; 0x3b18 <__clzsi2+0x76>
    3b24:	f7 01       	movw	r30, r14
    3b26:	ed 58       	subi	r30, 0x8D	; 141
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	80 81       	ld	r24, Z
    3b2c:	28 1b       	sub	r18, r24
    3b2e:	31 09       	sbc	r19, r1
    3b30:	41 09       	sbc	r20, r1
    3b32:	51 09       	sbc	r21, r1
    3b34:	c9 01       	movw	r24, r18
    3b36:	1f 91       	pop	r17
    3b38:	0f 91       	pop	r16
    3b3a:	ff 90       	pop	r15
    3b3c:	ef 90       	pop	r14
    3b3e:	08 95       	ret

00003b40 <__pack_f>:
    3b40:	df 92       	push	r13
    3b42:	ef 92       	push	r14
    3b44:	ff 92       	push	r15
    3b46:	0f 93       	push	r16
    3b48:	1f 93       	push	r17
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	e4 80       	ldd	r14, Z+4	; 0x04
    3b4e:	f5 80       	ldd	r15, Z+5	; 0x05
    3b50:	06 81       	ldd	r16, Z+6	; 0x06
    3b52:	17 81       	ldd	r17, Z+7	; 0x07
    3b54:	d1 80       	ldd	r13, Z+1	; 0x01
    3b56:	80 81       	ld	r24, Z
    3b58:	82 30       	cpi	r24, 0x02	; 2
    3b5a:	48 f4       	brcc	.+18     	; 0x3b6e <__pack_f+0x2e>
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	a0 e1       	ldi	r26, 0x10	; 16
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	e8 2a       	or	r14, r24
    3b66:	f9 2a       	or	r15, r25
    3b68:	0a 2b       	or	r16, r26
    3b6a:	1b 2b       	or	r17, r27
    3b6c:	a5 c0       	rjmp	.+330    	; 0x3cb8 <__pack_f+0x178>
    3b6e:	84 30       	cpi	r24, 0x04	; 4
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <__pack_f+0x34>
    3b72:	9f c0       	rjmp	.+318    	; 0x3cb2 <__pack_f+0x172>
    3b74:	82 30       	cpi	r24, 0x02	; 2
    3b76:	21 f4       	brne	.+8      	; 0x3b80 <__pack_f+0x40>
    3b78:	ee 24       	eor	r14, r14
    3b7a:	ff 24       	eor	r15, r15
    3b7c:	87 01       	movw	r16, r14
    3b7e:	05 c0       	rjmp	.+10     	; 0x3b8a <__pack_f+0x4a>
    3b80:	e1 14       	cp	r14, r1
    3b82:	f1 04       	cpc	r15, r1
    3b84:	01 05       	cpc	r16, r1
    3b86:	11 05       	cpc	r17, r1
    3b88:	19 f4       	brne	.+6      	; 0x3b90 <__pack_f+0x50>
    3b8a:	e0 e0       	ldi	r30, 0x00	; 0
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	96 c0       	rjmp	.+300    	; 0x3cbc <__pack_f+0x17c>
    3b90:	62 81       	ldd	r22, Z+2	; 0x02
    3b92:	73 81       	ldd	r23, Z+3	; 0x03
    3b94:	9f ef       	ldi	r25, 0xFF	; 255
    3b96:	62 38       	cpi	r22, 0x82	; 130
    3b98:	79 07       	cpc	r23, r25
    3b9a:	0c f0       	brlt	.+2      	; 0x3b9e <__pack_f+0x5e>
    3b9c:	5b c0       	rjmp	.+182    	; 0x3c54 <__pack_f+0x114>
    3b9e:	22 e8       	ldi	r18, 0x82	; 130
    3ba0:	3f ef       	ldi	r19, 0xFF	; 255
    3ba2:	26 1b       	sub	r18, r22
    3ba4:	37 0b       	sbc	r19, r23
    3ba6:	2a 31       	cpi	r18, 0x1A	; 26
    3ba8:	31 05       	cpc	r19, r1
    3baa:	2c f0       	brlt	.+10     	; 0x3bb6 <__pack_f+0x76>
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	40 e0       	ldi	r20, 0x00	; 0
    3bb2:	50 e0       	ldi	r21, 0x00	; 0
    3bb4:	2a c0       	rjmp	.+84     	; 0x3c0a <__pack_f+0xca>
    3bb6:	b8 01       	movw	r22, r16
    3bb8:	a7 01       	movw	r20, r14
    3bba:	02 2e       	mov	r0, r18
    3bbc:	04 c0       	rjmp	.+8      	; 0x3bc6 <__pack_f+0x86>
    3bbe:	76 95       	lsr	r23
    3bc0:	67 95       	ror	r22
    3bc2:	57 95       	ror	r21
    3bc4:	47 95       	ror	r20
    3bc6:	0a 94       	dec	r0
    3bc8:	d2 f7       	brpl	.-12     	; 0x3bbe <__pack_f+0x7e>
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	a0 e0       	ldi	r26, 0x00	; 0
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	04 c0       	rjmp	.+8      	; 0x3bdc <__pack_f+0x9c>
    3bd4:	88 0f       	add	r24, r24
    3bd6:	99 1f       	adc	r25, r25
    3bd8:	aa 1f       	adc	r26, r26
    3bda:	bb 1f       	adc	r27, r27
    3bdc:	2a 95       	dec	r18
    3bde:	d2 f7       	brpl	.-12     	; 0x3bd4 <__pack_f+0x94>
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	a1 09       	sbc	r26, r1
    3be4:	b1 09       	sbc	r27, r1
    3be6:	8e 21       	and	r24, r14
    3be8:	9f 21       	and	r25, r15
    3bea:	a0 23       	and	r26, r16
    3bec:	b1 23       	and	r27, r17
    3bee:	00 97       	sbiw	r24, 0x00	; 0
    3bf0:	a1 05       	cpc	r26, r1
    3bf2:	b1 05       	cpc	r27, r1
    3bf4:	21 f0       	breq	.+8      	; 0x3bfe <__pack_f+0xbe>
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	a0 e0       	ldi	r26, 0x00	; 0
    3bfc:	b0 e0       	ldi	r27, 0x00	; 0
    3bfe:	9a 01       	movw	r18, r20
    3c00:	ab 01       	movw	r20, r22
    3c02:	28 2b       	or	r18, r24
    3c04:	39 2b       	or	r19, r25
    3c06:	4a 2b       	or	r20, r26
    3c08:	5b 2b       	or	r21, r27
    3c0a:	da 01       	movw	r26, r20
    3c0c:	c9 01       	movw	r24, r18
    3c0e:	8f 77       	andi	r24, 0x7F	; 127
    3c10:	90 70       	andi	r25, 0x00	; 0
    3c12:	a0 70       	andi	r26, 0x00	; 0
    3c14:	b0 70       	andi	r27, 0x00	; 0
    3c16:	80 34       	cpi	r24, 0x40	; 64
    3c18:	91 05       	cpc	r25, r1
    3c1a:	a1 05       	cpc	r26, r1
    3c1c:	b1 05       	cpc	r27, r1
    3c1e:	39 f4       	brne	.+14     	; 0x3c2e <__pack_f+0xee>
    3c20:	27 ff       	sbrs	r18, 7
    3c22:	09 c0       	rjmp	.+18     	; 0x3c36 <__pack_f+0xf6>
    3c24:	20 5c       	subi	r18, 0xC0	; 192
    3c26:	3f 4f       	sbci	r19, 0xFF	; 255
    3c28:	4f 4f       	sbci	r20, 0xFF	; 255
    3c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c2c:	04 c0       	rjmp	.+8      	; 0x3c36 <__pack_f+0xf6>
    3c2e:	21 5c       	subi	r18, 0xC1	; 193
    3c30:	3f 4f       	sbci	r19, 0xFF	; 255
    3c32:	4f 4f       	sbci	r20, 0xFF	; 255
    3c34:	5f 4f       	sbci	r21, 0xFF	; 255
    3c36:	e0 e0       	ldi	r30, 0x00	; 0
    3c38:	f0 e0       	ldi	r31, 0x00	; 0
    3c3a:	20 30       	cpi	r18, 0x00	; 0
    3c3c:	a0 e0       	ldi	r26, 0x00	; 0
    3c3e:	3a 07       	cpc	r19, r26
    3c40:	a0 e0       	ldi	r26, 0x00	; 0
    3c42:	4a 07       	cpc	r20, r26
    3c44:	a0 e4       	ldi	r26, 0x40	; 64
    3c46:	5a 07       	cpc	r21, r26
    3c48:	10 f0       	brcs	.+4      	; 0x3c4e <__pack_f+0x10e>
    3c4a:	e1 e0       	ldi	r30, 0x01	; 1
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	79 01       	movw	r14, r18
    3c50:	8a 01       	movw	r16, r20
    3c52:	27 c0       	rjmp	.+78     	; 0x3ca2 <__pack_f+0x162>
    3c54:	60 38       	cpi	r22, 0x80	; 128
    3c56:	71 05       	cpc	r23, r1
    3c58:	64 f5       	brge	.+88     	; 0x3cb2 <__pack_f+0x172>
    3c5a:	fb 01       	movw	r30, r22
    3c5c:	e1 58       	subi	r30, 0x81	; 129
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	d8 01       	movw	r26, r16
    3c62:	c7 01       	movw	r24, r14
    3c64:	8f 77       	andi	r24, 0x7F	; 127
    3c66:	90 70       	andi	r25, 0x00	; 0
    3c68:	a0 70       	andi	r26, 0x00	; 0
    3c6a:	b0 70       	andi	r27, 0x00	; 0
    3c6c:	80 34       	cpi	r24, 0x40	; 64
    3c6e:	91 05       	cpc	r25, r1
    3c70:	a1 05       	cpc	r26, r1
    3c72:	b1 05       	cpc	r27, r1
    3c74:	39 f4       	brne	.+14     	; 0x3c84 <__pack_f+0x144>
    3c76:	e7 fe       	sbrs	r14, 7
    3c78:	0d c0       	rjmp	.+26     	; 0x3c94 <__pack_f+0x154>
    3c7a:	80 e4       	ldi	r24, 0x40	; 64
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	a0 e0       	ldi	r26, 0x00	; 0
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	04 c0       	rjmp	.+8      	; 0x3c8c <__pack_f+0x14c>
    3c84:	8f e3       	ldi	r24, 0x3F	; 63
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	a0 e0       	ldi	r26, 0x00	; 0
    3c8a:	b0 e0       	ldi	r27, 0x00	; 0
    3c8c:	e8 0e       	add	r14, r24
    3c8e:	f9 1e       	adc	r15, r25
    3c90:	0a 1f       	adc	r16, r26
    3c92:	1b 1f       	adc	r17, r27
    3c94:	17 ff       	sbrs	r17, 7
    3c96:	05 c0       	rjmp	.+10     	; 0x3ca2 <__pack_f+0x162>
    3c98:	16 95       	lsr	r17
    3c9a:	07 95       	ror	r16
    3c9c:	f7 94       	ror	r15
    3c9e:	e7 94       	ror	r14
    3ca0:	31 96       	adiw	r30, 0x01	; 1
    3ca2:	87 e0       	ldi	r24, 0x07	; 7
    3ca4:	16 95       	lsr	r17
    3ca6:	07 95       	ror	r16
    3ca8:	f7 94       	ror	r15
    3caa:	e7 94       	ror	r14
    3cac:	8a 95       	dec	r24
    3cae:	d1 f7       	brne	.-12     	; 0x3ca4 <__pack_f+0x164>
    3cb0:	05 c0       	rjmp	.+10     	; 0x3cbc <__pack_f+0x17c>
    3cb2:	ee 24       	eor	r14, r14
    3cb4:	ff 24       	eor	r15, r15
    3cb6:	87 01       	movw	r16, r14
    3cb8:	ef ef       	ldi	r30, 0xFF	; 255
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	6e 2f       	mov	r22, r30
    3cbe:	67 95       	ror	r22
    3cc0:	66 27       	eor	r22, r22
    3cc2:	67 95       	ror	r22
    3cc4:	90 2f       	mov	r25, r16
    3cc6:	9f 77       	andi	r25, 0x7F	; 127
    3cc8:	d7 94       	ror	r13
    3cca:	dd 24       	eor	r13, r13
    3ccc:	d7 94       	ror	r13
    3cce:	8e 2f       	mov	r24, r30
    3cd0:	86 95       	lsr	r24
    3cd2:	49 2f       	mov	r20, r25
    3cd4:	46 2b       	or	r20, r22
    3cd6:	58 2f       	mov	r21, r24
    3cd8:	5d 29       	or	r21, r13
    3cda:	b7 01       	movw	r22, r14
    3cdc:	ca 01       	movw	r24, r20
    3cde:	1f 91       	pop	r17
    3ce0:	0f 91       	pop	r16
    3ce2:	ff 90       	pop	r15
    3ce4:	ef 90       	pop	r14
    3ce6:	df 90       	pop	r13
    3ce8:	08 95       	ret

00003cea <__unpack_f>:
    3cea:	fc 01       	movw	r30, r24
    3cec:	db 01       	movw	r26, r22
    3cee:	40 81       	ld	r20, Z
    3cf0:	51 81       	ldd	r21, Z+1	; 0x01
    3cf2:	22 81       	ldd	r18, Z+2	; 0x02
    3cf4:	62 2f       	mov	r22, r18
    3cf6:	6f 77       	andi	r22, 0x7F	; 127
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	22 1f       	adc	r18, r18
    3cfc:	22 27       	eor	r18, r18
    3cfe:	22 1f       	adc	r18, r18
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	89 2f       	mov	r24, r25
    3d04:	88 0f       	add	r24, r24
    3d06:	82 2b       	or	r24, r18
    3d08:	28 2f       	mov	r18, r24
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	99 1f       	adc	r25, r25
    3d0e:	99 27       	eor	r25, r25
    3d10:	99 1f       	adc	r25, r25
    3d12:	11 96       	adiw	r26, 0x01	; 1
    3d14:	9c 93       	st	X, r25
    3d16:	11 97       	sbiw	r26, 0x01	; 1
    3d18:	21 15       	cp	r18, r1
    3d1a:	31 05       	cpc	r19, r1
    3d1c:	a9 f5       	brne	.+106    	; 0x3d88 <__unpack_f+0x9e>
    3d1e:	41 15       	cp	r20, r1
    3d20:	51 05       	cpc	r21, r1
    3d22:	61 05       	cpc	r22, r1
    3d24:	71 05       	cpc	r23, r1
    3d26:	11 f4       	brne	.+4      	; 0x3d2c <__unpack_f+0x42>
    3d28:	82 e0       	ldi	r24, 0x02	; 2
    3d2a:	37 c0       	rjmp	.+110    	; 0x3d9a <__unpack_f+0xb0>
    3d2c:	82 e8       	ldi	r24, 0x82	; 130
    3d2e:	9f ef       	ldi	r25, 0xFF	; 255
    3d30:	13 96       	adiw	r26, 0x03	; 3
    3d32:	9c 93       	st	X, r25
    3d34:	8e 93       	st	-X, r24
    3d36:	12 97       	sbiw	r26, 0x02	; 2
    3d38:	9a 01       	movw	r18, r20
    3d3a:	ab 01       	movw	r20, r22
    3d3c:	67 e0       	ldi	r22, 0x07	; 7
    3d3e:	22 0f       	add	r18, r18
    3d40:	33 1f       	adc	r19, r19
    3d42:	44 1f       	adc	r20, r20
    3d44:	55 1f       	adc	r21, r21
    3d46:	6a 95       	dec	r22
    3d48:	d1 f7       	brne	.-12     	; 0x3d3e <__unpack_f+0x54>
    3d4a:	83 e0       	ldi	r24, 0x03	; 3
    3d4c:	8c 93       	st	X, r24
    3d4e:	0d c0       	rjmp	.+26     	; 0x3d6a <__unpack_f+0x80>
    3d50:	22 0f       	add	r18, r18
    3d52:	33 1f       	adc	r19, r19
    3d54:	44 1f       	adc	r20, r20
    3d56:	55 1f       	adc	r21, r21
    3d58:	12 96       	adiw	r26, 0x02	; 2
    3d5a:	8d 91       	ld	r24, X+
    3d5c:	9c 91       	ld	r25, X
    3d5e:	13 97       	sbiw	r26, 0x03	; 3
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	13 96       	adiw	r26, 0x03	; 3
    3d64:	9c 93       	st	X, r25
    3d66:	8e 93       	st	-X, r24
    3d68:	12 97       	sbiw	r26, 0x02	; 2
    3d6a:	20 30       	cpi	r18, 0x00	; 0
    3d6c:	80 e0       	ldi	r24, 0x00	; 0
    3d6e:	38 07       	cpc	r19, r24
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	48 07       	cpc	r20, r24
    3d74:	80 e4       	ldi	r24, 0x40	; 64
    3d76:	58 07       	cpc	r21, r24
    3d78:	58 f3       	brcs	.-42     	; 0x3d50 <__unpack_f+0x66>
    3d7a:	14 96       	adiw	r26, 0x04	; 4
    3d7c:	2d 93       	st	X+, r18
    3d7e:	3d 93       	st	X+, r19
    3d80:	4d 93       	st	X+, r20
    3d82:	5c 93       	st	X, r21
    3d84:	17 97       	sbiw	r26, 0x07	; 7
    3d86:	08 95       	ret
    3d88:	2f 3f       	cpi	r18, 0xFF	; 255
    3d8a:	31 05       	cpc	r19, r1
    3d8c:	79 f4       	brne	.+30     	; 0x3dac <__unpack_f+0xc2>
    3d8e:	41 15       	cp	r20, r1
    3d90:	51 05       	cpc	r21, r1
    3d92:	61 05       	cpc	r22, r1
    3d94:	71 05       	cpc	r23, r1
    3d96:	19 f4       	brne	.+6      	; 0x3d9e <__unpack_f+0xb4>
    3d98:	84 e0       	ldi	r24, 0x04	; 4
    3d9a:	8c 93       	st	X, r24
    3d9c:	08 95       	ret
    3d9e:	64 ff       	sbrs	r22, 4
    3da0:	03 c0       	rjmp	.+6      	; 0x3da8 <__unpack_f+0xbe>
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	8c 93       	st	X, r24
    3da6:	12 c0       	rjmp	.+36     	; 0x3dcc <__unpack_f+0xe2>
    3da8:	1c 92       	st	X, r1
    3daa:	10 c0       	rjmp	.+32     	; 0x3dcc <__unpack_f+0xe2>
    3dac:	2f 57       	subi	r18, 0x7F	; 127
    3dae:	30 40       	sbci	r19, 0x00	; 0
    3db0:	13 96       	adiw	r26, 0x03	; 3
    3db2:	3c 93       	st	X, r19
    3db4:	2e 93       	st	-X, r18
    3db6:	12 97       	sbiw	r26, 0x02	; 2
    3db8:	83 e0       	ldi	r24, 0x03	; 3
    3dba:	8c 93       	st	X, r24
    3dbc:	87 e0       	ldi	r24, 0x07	; 7
    3dbe:	44 0f       	add	r20, r20
    3dc0:	55 1f       	adc	r21, r21
    3dc2:	66 1f       	adc	r22, r22
    3dc4:	77 1f       	adc	r23, r23
    3dc6:	8a 95       	dec	r24
    3dc8:	d1 f7       	brne	.-12     	; 0x3dbe <__unpack_f+0xd4>
    3dca:	70 64       	ori	r23, 0x40	; 64
    3dcc:	14 96       	adiw	r26, 0x04	; 4
    3dce:	4d 93       	st	X+, r20
    3dd0:	5d 93       	st	X+, r21
    3dd2:	6d 93       	st	X+, r22
    3dd4:	7c 93       	st	X, r23
    3dd6:	17 97       	sbiw	r26, 0x07	; 7
    3dd8:	08 95       	ret

00003dda <__fpcmp_parts_f>:
    3dda:	1f 93       	push	r17
    3ddc:	dc 01       	movw	r26, r24
    3dde:	fb 01       	movw	r30, r22
    3de0:	9c 91       	ld	r25, X
    3de2:	92 30       	cpi	r25, 0x02	; 2
    3de4:	08 f4       	brcc	.+2      	; 0x3de8 <__fpcmp_parts_f+0xe>
    3de6:	47 c0       	rjmp	.+142    	; 0x3e76 <__fpcmp_parts_f+0x9c>
    3de8:	80 81       	ld	r24, Z
    3dea:	82 30       	cpi	r24, 0x02	; 2
    3dec:	08 f4       	brcc	.+2      	; 0x3df0 <__fpcmp_parts_f+0x16>
    3dee:	43 c0       	rjmp	.+134    	; 0x3e76 <__fpcmp_parts_f+0x9c>
    3df0:	94 30       	cpi	r25, 0x04	; 4
    3df2:	51 f4       	brne	.+20     	; 0x3e08 <__fpcmp_parts_f+0x2e>
    3df4:	11 96       	adiw	r26, 0x01	; 1
    3df6:	1c 91       	ld	r17, X
    3df8:	84 30       	cpi	r24, 0x04	; 4
    3dfa:	99 f5       	brne	.+102    	; 0x3e62 <__fpcmp_parts_f+0x88>
    3dfc:	81 81       	ldd	r24, Z+1	; 0x01
    3dfe:	68 2f       	mov	r22, r24
    3e00:	70 e0       	ldi	r23, 0x00	; 0
    3e02:	61 1b       	sub	r22, r17
    3e04:	71 09       	sbc	r23, r1
    3e06:	3f c0       	rjmp	.+126    	; 0x3e86 <__fpcmp_parts_f+0xac>
    3e08:	84 30       	cpi	r24, 0x04	; 4
    3e0a:	21 f0       	breq	.+8      	; 0x3e14 <__fpcmp_parts_f+0x3a>
    3e0c:	92 30       	cpi	r25, 0x02	; 2
    3e0e:	31 f4       	brne	.+12     	; 0x3e1c <__fpcmp_parts_f+0x42>
    3e10:	82 30       	cpi	r24, 0x02	; 2
    3e12:	b9 f1       	breq	.+110    	; 0x3e82 <__fpcmp_parts_f+0xa8>
    3e14:	81 81       	ldd	r24, Z+1	; 0x01
    3e16:	88 23       	and	r24, r24
    3e18:	89 f1       	breq	.+98     	; 0x3e7c <__fpcmp_parts_f+0xa2>
    3e1a:	2d c0       	rjmp	.+90     	; 0x3e76 <__fpcmp_parts_f+0x9c>
    3e1c:	11 96       	adiw	r26, 0x01	; 1
    3e1e:	1c 91       	ld	r17, X
    3e20:	11 97       	sbiw	r26, 0x01	; 1
    3e22:	82 30       	cpi	r24, 0x02	; 2
    3e24:	f1 f0       	breq	.+60     	; 0x3e62 <__fpcmp_parts_f+0x88>
    3e26:	81 81       	ldd	r24, Z+1	; 0x01
    3e28:	18 17       	cp	r17, r24
    3e2a:	d9 f4       	brne	.+54     	; 0x3e62 <__fpcmp_parts_f+0x88>
    3e2c:	12 96       	adiw	r26, 0x02	; 2
    3e2e:	2d 91       	ld	r18, X+
    3e30:	3c 91       	ld	r19, X
    3e32:	13 97       	sbiw	r26, 0x03	; 3
    3e34:	82 81       	ldd	r24, Z+2	; 0x02
    3e36:	93 81       	ldd	r25, Z+3	; 0x03
    3e38:	82 17       	cp	r24, r18
    3e3a:	93 07       	cpc	r25, r19
    3e3c:	94 f0       	brlt	.+36     	; 0x3e62 <__fpcmp_parts_f+0x88>
    3e3e:	28 17       	cp	r18, r24
    3e40:	39 07       	cpc	r19, r25
    3e42:	bc f0       	brlt	.+46     	; 0x3e72 <__fpcmp_parts_f+0x98>
    3e44:	14 96       	adiw	r26, 0x04	; 4
    3e46:	8d 91       	ld	r24, X+
    3e48:	9d 91       	ld	r25, X+
    3e4a:	0d 90       	ld	r0, X+
    3e4c:	bc 91       	ld	r27, X
    3e4e:	a0 2d       	mov	r26, r0
    3e50:	24 81       	ldd	r18, Z+4	; 0x04
    3e52:	35 81       	ldd	r19, Z+5	; 0x05
    3e54:	46 81       	ldd	r20, Z+6	; 0x06
    3e56:	57 81       	ldd	r21, Z+7	; 0x07
    3e58:	28 17       	cp	r18, r24
    3e5a:	39 07       	cpc	r19, r25
    3e5c:	4a 07       	cpc	r20, r26
    3e5e:	5b 07       	cpc	r21, r27
    3e60:	18 f4       	brcc	.+6      	; 0x3e68 <__fpcmp_parts_f+0x8e>
    3e62:	11 23       	and	r17, r17
    3e64:	41 f0       	breq	.+16     	; 0x3e76 <__fpcmp_parts_f+0x9c>
    3e66:	0a c0       	rjmp	.+20     	; 0x3e7c <__fpcmp_parts_f+0xa2>
    3e68:	82 17       	cp	r24, r18
    3e6a:	93 07       	cpc	r25, r19
    3e6c:	a4 07       	cpc	r26, r20
    3e6e:	b5 07       	cpc	r27, r21
    3e70:	40 f4       	brcc	.+16     	; 0x3e82 <__fpcmp_parts_f+0xa8>
    3e72:	11 23       	and	r17, r17
    3e74:	19 f0       	breq	.+6      	; 0x3e7c <__fpcmp_parts_f+0xa2>
    3e76:	61 e0       	ldi	r22, 0x01	; 1
    3e78:	70 e0       	ldi	r23, 0x00	; 0
    3e7a:	05 c0       	rjmp	.+10     	; 0x3e86 <__fpcmp_parts_f+0xac>
    3e7c:	6f ef       	ldi	r22, 0xFF	; 255
    3e7e:	7f ef       	ldi	r23, 0xFF	; 255
    3e80:	02 c0       	rjmp	.+4      	; 0x3e86 <__fpcmp_parts_f+0xac>
    3e82:	60 e0       	ldi	r22, 0x00	; 0
    3e84:	70 e0       	ldi	r23, 0x00	; 0
    3e86:	cb 01       	movw	r24, r22
    3e88:	1f 91       	pop	r17
    3e8a:	08 95       	ret

00003e8c <__mulsi3>:
    3e8c:	62 9f       	mul	r22, r18
    3e8e:	d0 01       	movw	r26, r0
    3e90:	73 9f       	mul	r23, r19
    3e92:	f0 01       	movw	r30, r0
    3e94:	82 9f       	mul	r24, r18
    3e96:	e0 0d       	add	r30, r0
    3e98:	f1 1d       	adc	r31, r1
    3e9a:	64 9f       	mul	r22, r20
    3e9c:	e0 0d       	add	r30, r0
    3e9e:	f1 1d       	adc	r31, r1
    3ea0:	92 9f       	mul	r25, r18
    3ea2:	f0 0d       	add	r31, r0
    3ea4:	83 9f       	mul	r24, r19
    3ea6:	f0 0d       	add	r31, r0
    3ea8:	74 9f       	mul	r23, r20
    3eaa:	f0 0d       	add	r31, r0
    3eac:	65 9f       	mul	r22, r21
    3eae:	f0 0d       	add	r31, r0
    3eb0:	99 27       	eor	r25, r25
    3eb2:	72 9f       	mul	r23, r18
    3eb4:	b0 0d       	add	r27, r0
    3eb6:	e1 1d       	adc	r30, r1
    3eb8:	f9 1f       	adc	r31, r25
    3eba:	63 9f       	mul	r22, r19
    3ebc:	b0 0d       	add	r27, r0
    3ebe:	e1 1d       	adc	r30, r1
    3ec0:	f9 1f       	adc	r31, r25
    3ec2:	bd 01       	movw	r22, r26
    3ec4:	cf 01       	movw	r24, r30
    3ec6:	11 24       	eor	r1, r1
    3ec8:	08 95       	ret

00003eca <__udivmodhi4>:
    3eca:	aa 1b       	sub	r26, r26
    3ecc:	bb 1b       	sub	r27, r27
    3ece:	51 e1       	ldi	r21, 0x11	; 17
    3ed0:	07 c0       	rjmp	.+14     	; 0x3ee0 <__udivmodhi4_ep>

00003ed2 <__udivmodhi4_loop>:
    3ed2:	aa 1f       	adc	r26, r26
    3ed4:	bb 1f       	adc	r27, r27
    3ed6:	a6 17       	cp	r26, r22
    3ed8:	b7 07       	cpc	r27, r23
    3eda:	10 f0       	brcs	.+4      	; 0x3ee0 <__udivmodhi4_ep>
    3edc:	a6 1b       	sub	r26, r22
    3ede:	b7 0b       	sbc	r27, r23

00003ee0 <__udivmodhi4_ep>:
    3ee0:	88 1f       	adc	r24, r24
    3ee2:	99 1f       	adc	r25, r25
    3ee4:	5a 95       	dec	r21
    3ee6:	a9 f7       	brne	.-22     	; 0x3ed2 <__udivmodhi4_loop>
    3ee8:	80 95       	com	r24
    3eea:	90 95       	com	r25
    3eec:	bc 01       	movw	r22, r24
    3eee:	cd 01       	movw	r24, r26
    3ef0:	08 95       	ret

00003ef2 <__udivmodsi4>:
    3ef2:	a1 e2       	ldi	r26, 0x21	; 33
    3ef4:	1a 2e       	mov	r1, r26
    3ef6:	aa 1b       	sub	r26, r26
    3ef8:	bb 1b       	sub	r27, r27
    3efa:	fd 01       	movw	r30, r26
    3efc:	0d c0       	rjmp	.+26     	; 0x3f18 <__udivmodsi4_ep>

00003efe <__udivmodsi4_loop>:
    3efe:	aa 1f       	adc	r26, r26
    3f00:	bb 1f       	adc	r27, r27
    3f02:	ee 1f       	adc	r30, r30
    3f04:	ff 1f       	adc	r31, r31
    3f06:	a2 17       	cp	r26, r18
    3f08:	b3 07       	cpc	r27, r19
    3f0a:	e4 07       	cpc	r30, r20
    3f0c:	f5 07       	cpc	r31, r21
    3f0e:	20 f0       	brcs	.+8      	; 0x3f18 <__udivmodsi4_ep>
    3f10:	a2 1b       	sub	r26, r18
    3f12:	b3 0b       	sbc	r27, r19
    3f14:	e4 0b       	sbc	r30, r20
    3f16:	f5 0b       	sbc	r31, r21

00003f18 <__udivmodsi4_ep>:
    3f18:	66 1f       	adc	r22, r22
    3f1a:	77 1f       	adc	r23, r23
    3f1c:	88 1f       	adc	r24, r24
    3f1e:	99 1f       	adc	r25, r25
    3f20:	1a 94       	dec	r1
    3f22:	69 f7       	brne	.-38     	; 0x3efe <__udivmodsi4_loop>
    3f24:	60 95       	com	r22
    3f26:	70 95       	com	r23
    3f28:	80 95       	com	r24
    3f2a:	90 95       	com	r25
    3f2c:	9b 01       	movw	r18, r22
    3f2e:	ac 01       	movw	r20, r24
    3f30:	bd 01       	movw	r22, r26
    3f32:	cf 01       	movw	r24, r30
    3f34:	08 95       	ret

00003f36 <__prologue_saves__>:
    3f36:	2f 92       	push	r2
    3f38:	3f 92       	push	r3
    3f3a:	4f 92       	push	r4
    3f3c:	5f 92       	push	r5
    3f3e:	6f 92       	push	r6
    3f40:	7f 92       	push	r7
    3f42:	8f 92       	push	r8
    3f44:	9f 92       	push	r9
    3f46:	af 92       	push	r10
    3f48:	bf 92       	push	r11
    3f4a:	cf 92       	push	r12
    3f4c:	df 92       	push	r13
    3f4e:	ef 92       	push	r14
    3f50:	ff 92       	push	r15
    3f52:	0f 93       	push	r16
    3f54:	1f 93       	push	r17
    3f56:	cf 93       	push	r28
    3f58:	df 93       	push	r29
    3f5a:	cd b7       	in	r28, 0x3d	; 61
    3f5c:	de b7       	in	r29, 0x3e	; 62
    3f5e:	ca 1b       	sub	r28, r26
    3f60:	db 0b       	sbc	r29, r27
    3f62:	0f b6       	in	r0, 0x3f	; 63
    3f64:	f8 94       	cli
    3f66:	de bf       	out	0x3e, r29	; 62
    3f68:	0f be       	out	0x3f, r0	; 63
    3f6a:	cd bf       	out	0x3d, r28	; 61
    3f6c:	09 94       	ijmp

00003f6e <__epilogue_restores__>:
    3f6e:	2a 88       	ldd	r2, Y+18	; 0x12
    3f70:	39 88       	ldd	r3, Y+17	; 0x11
    3f72:	48 88       	ldd	r4, Y+16	; 0x10
    3f74:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f76:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f78:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f80:	b9 84       	ldd	r11, Y+9	; 0x09
    3f82:	c8 84       	ldd	r12, Y+8	; 0x08
    3f84:	df 80       	ldd	r13, Y+7	; 0x07
    3f86:	ee 80       	ldd	r14, Y+6	; 0x06
    3f88:	fd 80       	ldd	r15, Y+5	; 0x05
    3f8a:	0c 81       	ldd	r16, Y+4	; 0x04
    3f8c:	1b 81       	ldd	r17, Y+3	; 0x03
    3f8e:	aa 81       	ldd	r26, Y+2	; 0x02
    3f90:	b9 81       	ldd	r27, Y+1	; 0x01
    3f92:	ce 0f       	add	r28, r30
    3f94:	d1 1d       	adc	r29, r1
    3f96:	0f b6       	in	r0, 0x3f	; 63
    3f98:	f8 94       	cli
    3f9a:	de bf       	out	0x3e, r29	; 62
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	ed 01       	movw	r28, r26
    3fa2:	08 95       	ret

00003fa4 <strlen>:
    3fa4:	e8 2f       	mov	r30, r24
    3fa6:	f9 2f       	mov	r31, r25
    3fa8:	01 90       	ld	r0, Z+
    3faa:	00 20       	and	r0, r0
    3fac:	e9 f7       	brne	.-6      	; 0x3fa8 <strlen+0x4>
    3fae:	80 95       	com	r24
    3fb0:	90 95       	com	r25
    3fb2:	8e 0f       	add	r24, r30
    3fb4:	9f 1f       	adc	r25, r31
    3fb6:	08 95       	ret

00003fb8 <itoa>:
    3fb8:	e6 2f       	mov	r30, r22
    3fba:	f7 2f       	mov	r31, r23
    3fbc:	2e 2f       	mov	r18, r30
    3fbe:	3f 2f       	mov	r19, r31
    3fc0:	e8 94       	clt
    3fc2:	42 30       	cpi	r20, 0x02	; 2
    3fc4:	c4 f0       	brlt	.+48     	; 0x3ff6 <itoa+0x3e>
    3fc6:	45 32       	cpi	r20, 0x25	; 37
    3fc8:	b4 f4       	brge	.+44     	; 0x3ff6 <itoa+0x3e>
    3fca:	4a 30       	cpi	r20, 0x0A	; 10
    3fcc:	29 f4       	brne	.+10     	; 0x3fd8 <itoa+0x20>
    3fce:	97 fb       	bst	r25, 7
    3fd0:	1e f4       	brtc	.+6      	; 0x3fd8 <itoa+0x20>
    3fd2:	90 95       	com	r25
    3fd4:	81 95       	neg	r24
    3fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd8:	64 2f       	mov	r22, r20
    3fda:	77 27       	eor	r23, r23
    3fdc:	76 df       	rcall	.-276    	; 0x3eca <__udivmodhi4>
    3fde:	80 5d       	subi	r24, 0xD0	; 208
    3fe0:	8a 33       	cpi	r24, 0x3A	; 58
    3fe2:	0c f0       	brlt	.+2      	; 0x3fe6 <itoa+0x2e>
    3fe4:	89 5d       	subi	r24, 0xD9	; 217
    3fe6:	81 93       	st	Z+, r24
    3fe8:	86 2f       	mov	r24, r22
    3fea:	97 2f       	mov	r25, r23
    3fec:	00 97       	sbiw	r24, 0x00	; 0
    3fee:	a1 f7       	brne	.-24     	; 0x3fd8 <itoa+0x20>
    3ff0:	16 f4       	brtc	.+4      	; 0x3ff6 <itoa+0x3e>
    3ff2:	5d e2       	ldi	r21, 0x2D	; 45
    3ff4:	51 93       	st	Z+, r21
    3ff6:	10 82       	st	Z, r1
    3ff8:	82 2f       	mov	r24, r18
    3ffa:	93 2f       	mov	r25, r19
    3ffc:	00 c0       	rjmp	.+0      	; 0x3ffe <strrev>

00003ffe <strrev>:
    3ffe:	a8 2f       	mov	r26, r24
    4000:	b9 2f       	mov	r27, r25
    4002:	e8 2f       	mov	r30, r24
    4004:	f9 2f       	mov	r31, r25
    4006:	67 2f       	mov	r22, r23
    4008:	71 91       	ld	r23, Z+
    400a:	77 23       	and	r23, r23
    400c:	e1 f7       	brne	.-8      	; 0x4006 <strrev+0x8>
    400e:	32 97       	sbiw	r30, 0x02	; 2
    4010:	04 c0       	rjmp	.+8      	; 0x401a <strrev+0x1c>
    4012:	7c 91       	ld	r23, X
    4014:	6d 93       	st	X+, r22
    4016:	70 83       	st	Z, r23
    4018:	62 91       	ld	r22, -Z
    401a:	ae 17       	cp	r26, r30
    401c:	bf 07       	cpc	r27, r31
    401e:	c8 f3       	brcs	.-14     	; 0x4012 <strrev+0x14>
    4020:	08 95       	ret

00004022 <_exit>:
    4022:	f8 94       	cli

00004024 <__stop_program>:
    4024:	ff cf       	rjmp	.-2      	; 0x4024 <__stop_program>
